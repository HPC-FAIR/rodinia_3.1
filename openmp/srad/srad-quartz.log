Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_64_64 --  srad1 100 0.5 64 64 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.004055917263 % : READ COMMAND LINE PARAMETERS
0.000523000024 s, 0.353540807962 % : READ IMAGE FROM FILE
0.000039999999 s, 0.027039449662 % : RESIZE IMAGE
0.000019999999 s, 0.013519724831 % : SETUP, MEMORY ALLOCATION
0.000026000000 s, 0.017575643957 % : EXTRACT IMAGE
0.143712997437 s, 97.148010253906 % : COMPUTE
0.000073000003 s, 0.049346998334 % : COMPRESS IMAGE
0.003501000116 s, 2.366627931595 % : SAVE IMAGE INTO FILE
0.000029999999 s, 0.020279588178 % : FREE MEMORY
Total time:
0.147931993008 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-56159-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-56159-quartz1453.sc' filvtune: Executing actions 12 % Loading '56159-56164.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-56164-e611877d.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.378s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.000 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.378
        Serial Time (outside parallel regions): 0.348s (92.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.030s (7.9%)
            Estimated Ideal Time: 0.022s (5.8%)
            OpenMP Potential Gain: 0.008s (2.1%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.672s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                     Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        ----------------------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                                1.669s                        100.0%          30
        Stream image_out.pgm 0xff4f6b54                                              0.002s                        100.0%           1
        Stream 0x2e4a07a1                                                            0.001s                        100.0%           1
        Stream ../../../data/srad/image.pgm 0x5df7c973                               0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                              0.000s                        100.0%           2
        [Others]                                                                     0.000s                        100.0%          10
    Spin and Overhead Time: 3.270s (100.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  3.200s                 97.9%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.9%
        __kmp_fork_call                 libiomp5.so                  0.020s                  0.6%
        __kmp_join_barrier              libiomp5.so                  0.010s                  0.3%
        __kmp_join_call                 libiomp5.so                  0.010s                  0.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "64" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:14:30 22/04/2021 UTC
    Collection stop time: 20:14:31 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_64_64 > srad1-log/vtune/36_64_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_64_64 --  srad1 100 0.5 64 64 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.003696057247 % : READ COMMAND LINE PARAMETERS
0.000653999974 s, 0.345317363739 % : READ IMAGE FROM FILE
0.000045000001 s, 0.023760369048 % : RESIZE IMAGE
0.000015000000 s, 0.007920122705 % : SETUP, MEMORY ALLOCATION
0.000027000000 s, 0.014256222174 % : EXTRACT IMAGE
0.184697002172 s, 97.521530151367 % : COMPUTE
0.000067000001 s, 0.035376548767 % : COMPRESS IMAGE
0.003859000048 s, 2.037583589554 % : SAVE IMAGE INTO FILE
0.000019999999 s, 0.010560164228 % : FREE MEMORY
Total time:
0.189391002059 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-56276-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-56276-quartz1453.sc' filvtune: Executing actions 12 % Loading '56291.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-56291-c4533af2.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.272s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.225
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.745 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 5.9% (2.140 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.5% (1.070 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.254s (93.7%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.170s
        func@0x7efe0                libittnotify_collector.so           0.005s
    Parallel Region Time: 0.017s (6.3%)
        Estimated Ideal Time: 0.003s (1.1%)
        OpenMP Potential Gain: 0.014s (5.3%)
Memory Bound: 53.9% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 8.3% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "64" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:14:48 22/04/2021 UTC
    Collection stop time: 20:14:48 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_64_64 > srad1-log/vtune/36_64_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_64_64 --  srad1 100 0.5 64 64 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.007541667670 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.056562509388 % : READ IMAGE FROM FILE
0.000034000001 s, 0.042736116797 % : RESIZE IMAGE
0.000014000000 s, 0.017597224563 % : SETUP, MEMORY ALLOCATION
0.000024000001 s, 0.030166670680 % : EXTRACT IMAGE
0.076351001859 s, 95.968978881836 % : COMPUTE
0.000067000001 s, 0.084215290844 % : COMPRESS IMAGE
0.002992999973 s, 3.762035131454 % : SAVE IMAGE INTO FILE
0.000024000001 s, 0.030166670680 % : FREE MEMORY
Total time:
0.079557999969 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-56408-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-56408-quartz1453.sc' filvtune: Executing actions 12 % Loading '56408-56414.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-56414-7001d33f.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.231s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.000 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.231
        Serial Time (outside parallel regions): 0.202s (87.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
        Parallel Region Time: 0.029s (12.4%)
            Estimated Ideal Time: 0.017s (7.2%)
            OpenMP Potential Gain: 0.012s (5.2%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.239s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.237s                        100.0%          13
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 1.040s (100.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module           Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  ---------------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                      0.970s                 93.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                      0.030s                  2.9%
        __kmp_join_barrier              libiomp5.so                      0.010s                  1.0%
        __pthread_create_2_1            libpthread.so.0                  0.010s                  1.0%
        __kmp_fork_call                 libiomp5.so                      0.010s                  1.0%
        __kmp_join_call                 libiomp5.so                      0.010s                  1.0%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "64" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:15:12 22/04/2021 UTC
    Collection stop time: 20:15:12 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_64_64 > srad1-log/vtune/18_64_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_64_64 --  srad1 100 0.5 64 64 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000009000000 s, 0.009082560427 % : READ COMMAND LINE PARAMETERS
0.000683000020 s, 0.689265429974 % : READ IMAGE FROM FILE
0.000046000001 s, 0.046421974897 % : RESIZE IMAGE
0.000016000000 s, 0.016146775335 % : SETUP, MEMORY ALLOCATION
0.000027000000 s, 0.027247682214 % : EXTRACT IMAGE
0.094746001065 s, 95.615142822266 % : COMPUTE
0.000072000003 s, 0.072660483420 % : COMPRESS IMAGE
0.003471999895 s, 3.503849983215 % : SAVE IMAGE INTO FILE
0.000019999999 s, 0.020183466375 % : FREE MEMORY
Total time:
0.099091000855 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-56505-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-56505-quartz1453.sc' filvtune: Executing actions 12 % Loading '56520.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-56520-b060d789.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.189s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.162
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 3.065 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 1.9% (0.691 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.0% (0.691 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.180s (95.5%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.090s
        _IO_fprintf                 libc-2.17.so                        0.005s
        [Import thunk syscall]      libittnotify_collector.so           0.005s
        func@0x7efe0                libittnotify_collector.so           0.005s
    Parallel Region Time: 0.008s (4.5%)
        Estimated Ideal Time: 0.003s (1.5%)
        OpenMP Potential Gain: 0.006s (3.0%)
Memory Bound: 42.0% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 32.5% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "64" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:15:30 22/04/2021 UTC
    Collection stop time: 20:15:30 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_64_64 > srad1-log/vtune/18_64_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_64_64 --  srad1 100 0.5 64 64 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.013909496367 % : READ COMMAND LINE PARAMETERS
0.000049999999 s, 0.115912467241 % : READ IMAGE FROM FILE
0.000038999999 s, 0.090411715209 % : RESIZE IMAGE
0.000015000000 s, 0.034773740917 % : SETUP, MEMORY ALLOCATION
0.000015000000 s, 0.034773740917 % : EXTRACT IMAGE
0.039625000209 s, 91.860626220703 % : COMPUTE
0.000075999997 s, 0.176186934114 % : COMPRESS IMAGE
0.003286000108 s, 7.617767333984 % : SAVE IMAGE INTO FILE
0.000024000001 s, 0.055637985468 % : FREE MEMORY
Total time:
0.043136000633 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-56615-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-56615-quartz1453.sc' filvtune: Executing actions 12 % Loading '56615-56620.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-56620-7a2f191e.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.162s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.063 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.162
        Serial Time (outside parallel regions): 0.143s (88.5%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.019s (11.5%)
            Estimated Ideal Time: 0.014s (8.8%)
            OpenMP Potential Gain: 0.004s (2.7%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.013s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.011s                        100.0%           5
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 0.330s (97.1% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.270s                 79.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  8.8%
        __kmp_fork_call                 libiomp5.so                  0.020s                  5.9%
        __kmp_join_call                 libiomp5.so                  0.010s                  2.9%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "64" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:15:50 22/04/2021 UTC
    Collection stop time: 20:15:51 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_64_64 > srad1-log/vtune/9_64_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_64_64 --  srad1 100 0.5 64 64 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.014389265329 % : READ COMMAND LINE PARAMETERS
0.000836000021 s, 1.503678202629 % : READ IMAGE FROM FILE
0.000089000001 s, 0.160080581903 % : RESIZE IMAGE
0.000026000000 s, 0.046765115112 % : SETUP, MEMORY ALLOCATION
0.000028000000 s, 0.050362430513 % : EXTRACT IMAGE
0.051150001585 s, 92.001365661621 % : COMPUTE
0.000072000003 s, 0.129503399134 % : COMPRESS IMAGE
0.003372000065 s, 6.065075397491 % : SAVE IMAGE INTO FILE
0.000016000000 s, 0.028778530657 % : FREE MEMORY
Total time:
0.055596999824 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-56704-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-56704-quartz1453.sc' filvtune: Executing actions 12 % Loading '56719.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-56719-309f4fa8.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.142s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.200
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 3.279 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 2.9% (1.060 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.0% (0.707 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.137s (96.5%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.060s
        match_symbol                ld-2.17.so                          0.005s
        func@0x7efe0                libittnotify_collector.so           0.005s
    Parallel Region Time: 0.005s (3.5%)
        Estimated Ideal Time: 0.002s (1.5%)
        OpenMP Potential Gain: 0.003s (2.0%)
Memory Bound: 96.0% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 47.6% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 23.8% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 0.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "64" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:16:11 22/04/2021 UTC
    Collection stop time: 20:16:11 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_64_64 > srad1-log/vtune/9_64_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_64_64 --  srad1 100 0.5 64 64 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.019164431840 % : READ COMMAND LINE PARAMETERS
0.000042000000 s, 0.134151026607 % : READ IMAGE FROM FILE
0.000035000001 s, 0.111792519689 % : RESIZE IMAGE
0.000014000000 s, 0.044717006385 % : SETUP, MEMORY ALLOCATION
0.000023000001 s, 0.073463648558 % : EXTRACT IMAGE
0.027724999934 s, 88.555641174316 % : COMPUTE
0.000058000001 s, 0.185256153345 % : COMPRESS IMAGE
0.003386999946 s, 10.818321228027 % : SAVE IMAGE INTO FILE
0.000018000001 s, 0.057493291795 % : FREE MEMORY
Total time:
0.031307999045 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-56806-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-56806-quartz1453.sc' filvtune: Executing actions 12 % Loading '56806-56811.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-56811-6d26ba63.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.143s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.000 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.143
        Serial Time (outside parallel regions): 0.124s (86.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.020s (13.7%)
            Estimated Ideal Time: 0.016s (10.9%)
            OpenMP Potential Gain: 0.004s (2.8%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.002s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                                                             0.002s                        100.0%           1
        Stream 0x2e4a07a1                                                                           0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                                             0.000s                        100.0%           1
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0xf222eef6                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                                                             0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           3
    Spin and Overhead Time: 0.120s (100.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.060s                 50.0%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 25.0%
        __kmp_fork_call                 libiomp5.so                  0.020s                 16.7%
        __kmp_join_call                 libiomp5.so                  0.010s                  8.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "64" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:16:33 22/04/2021 UTC
    Collection stop time: 20:16:34 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_64_64 > srad1-log/vtune/4_64_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_64_64 --  srad1 100 0.5 64 64 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.024840865284 % : READ COMMAND LINE PARAMETERS
0.000831999991 s, 2.583449602127 % : READ IMAGE FROM FILE
0.000046000001 s, 0.142834961414 % : RESIZE IMAGE
0.000016000000 s, 0.049681730568 % : SETUP, MEMORY ALLOCATION
0.000027000000 s, 0.083837911487 % : EXTRACT IMAGE
0.027387000620 s, 85.039588928223 % : COMPUTE
0.000059000002 s, 0.183201372623 % : COMPRESS IMAGE
0.003806000110 s, 11.818040847778 % : SAVE IMAGE INTO FILE
0.000024000001 s, 0.074522584677 % : FREE MEMORY
Total time:
0.032205000520 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-56888-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-56888-quartz1453.sc' filvtune: Executing actions 12 % Loading '56902.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-56902-d530b9c1.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.129s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 3.062 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 2.6% (0.929 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.6% (0.465 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.124s (95.8%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.035s
        func@0x7efe0                libittnotify_collector.so           0.010s
    Parallel Region Time: 0.005s (4.2%)
        Estimated Ideal Time: 0.003s (2.1%)
        OpenMP Potential Gain: 0.003s (2.2%)
Memory Bound
    Cache Bound: 45.1% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 45.1% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "64" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:16:52 22/04/2021 UTC
    Collection stop time: 20:16:53 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_64_64 > srad1-log/vtune/4_64_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_64_128 --  srad1 100 0.5 64 128 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.004638004117 % : READ COMMAND LINE PARAMETERS
0.000047000001 s, 0.031140882522 % : READ IMAGE FROM FILE
0.000083999999 s, 0.055656045675 % : RESIZE IMAGE
0.000018999999 s, 0.012588867918 % : SETUP, MEMORY ALLOCATION
0.000029999999 s, 0.019877159968 % : EXTRACT IMAGE
0.146459996700 s, 97.040290832520 % : COMPUTE
0.000121999998 s, 0.080833785236 % : COMPRESS IMAGE
0.004126999993 s, 2.734434604645 % : SAVE IMAGE INTO FILE
0.000031000000 s, 0.020539730787 % : FREE MEMORY
Total time:
0.150927007198 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-56985-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-56985-quartz1453.sc' filvtune: Executing actions 12 % Loading '56985-56991.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-56991-768e9caa.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.370s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.000 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.370
        Serial Time (outside parallel regions): 0.342s (92.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.028s (7.4%)
            Estimated Ideal Time: 0.018s (4.8%)
            OpenMP Potential Gain: 0.010s (2.6%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.742s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.740s                        100.0%          30
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           3
        Mutex 0x6cb3026d                                              0.000s                        100.0%           4
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 3.390s (100.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  3.270s                 96.5%
        __kmp_join_barrier              libiomp5.so                  0.050s                  1.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.9%
        __kmp_fork_call                 libiomp5.so                  0.030s                  0.9%
        __kmp_join_call                 libiomp5.so                  0.010s                  0.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "128" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:17:12 22/04/2021 UTC
    Collection stop time: 20:17:13 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_64_128 > srad1-log/vtune/36_64_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_64_128 --  srad1 100 0.5 64 128 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.004300936591 % : READ COMMAND LINE PARAMETERS
0.000887000002 s, 0.476866364479 % : READ IMAGE FROM FILE
0.000087000000 s, 0.046772684902 % : RESIZE IMAGE
0.000090000001 s, 0.048385538161 % : SETUP, MEMORY ALLOCATION
0.000035000001 s, 0.018816597760 % : EXTRACT IMAGE
0.179115995765 s, 96.295814514160 % : COMPUTE
0.000192000007 s, 0.103222474456 % : COMPRESS IMAGE
0.005563999992 s, 2.991301298141 % : SAVE IMAGE INTO FILE
0.000027000000 s, 0.014515660703 % : FREE MEMORY
Total time:
0.186005994678 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-57098-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-57098-quartz1453.sc' filvtune: Executing actions 12 % Loading '57113.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-57113-7c4eaeb6.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.293s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.243
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.733 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 2.8% (1.025 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.4% (1.025 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.281s (95.6%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.170s
        _IO_vfscanf                 libc-2.17.so           0.005s
    Parallel Region Time: 0.013s (4.4%)
        Estimated Ideal Time: 0.002s (0.8%)
        OpenMP Potential Gain: 0.010s (3.6%)
Memory Bound: 59.9% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 8.2% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "128" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:17:30 22/04/2021 UTC
    Collection stop time: 20:17:30 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_64_128 > srad1-log/vtune/36_64_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_64_128 --  srad1 100 0.5 64 128 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.007671849802 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.054981589317 % : READ IMAGE FROM FILE
0.000070000002 s, 0.089504905045 % : RESIZE IMAGE
0.000017000000 s, 0.021736906841 % : SETUP, MEMORY ALLOCATION
0.000029000001 s, 0.037080604583 % : EXTRACT IMAGE
0.074105001986 s, 94.753738403320 % : COMPUTE
0.000113000002 s, 0.144486501813 % : COMPRESS IMAGE
0.003801000072 s, 4.860116481781 % : SAVE IMAGE INTO FILE
0.000024000001 s, 0.030687399209 % : FREE MEMORY
Total time:
0.078207999468 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-57227-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-57227-quartz1453.sc' filvtune: Executing actions 12 % Loading '57227-57232.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-57232-a7cfbc91.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.217s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.094 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.217
        Serial Time (outside parallel regions): 0.194s (89.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
        Parallel Region Time: 0.023s (10.4%)
            Estimated Ideal Time: 0.014s (6.6%)
            OpenMP Potential Gain: 0.008s (3.8%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.256s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.254s                        100.0%          14
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 1.020s (98.1% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module           Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  ---------------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                      0.950s                 91.3%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                      0.030s                  2.9%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_leave  libiomp5.so                      0.010s                  1.0%
        __pthread_create_2_1                                                           libpthread.so.0                  0.010s                  1.0%
        __kmp_fork_call                                                                libiomp5.so                      0.010s                  1.0%
        __kmp_join_call                                                                libiomp5.so                      0.010s                  1.0%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "128" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:17:52 22/04/2021 UTC
    Collection stop time: 20:17:52 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_64_128 > srad1-log/vtune/18_64_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_64_128 --  srad1 100 0.5 64 128 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.006551301107 % : READ COMMAND LINE PARAMETERS
0.000637000019 s, 0.596168398857 % : READ IMAGE FROM FILE
0.000082999999 s, 0.077679716051 % : RESIZE IMAGE
0.000092000002 s, 0.086102813482 % : SETUP, MEMORY ALLOCATION
0.000033000000 s, 0.030884705484 % : EXTRACT IMAGE
0.101507000625 s, 95.000419616699 % : COMPUTE
0.000121999998 s, 0.114179819822 % : COMPRESS IMAGE
0.004348000046 s, 4.069293975830 % : SAVE IMAGE INTO FILE
0.000019999999 s, 0.018718004227 % : FREE MEMORY
Total time:
0.106848999858 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-57322-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-57322-quartz1453.sc' filvtune: Executing actions 12 % Loading '57337.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-57337-042c5457.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.194s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.062
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.638 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 3.3% (1.202 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.1% (0.802 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.188s (97.0%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module                     Serial CPU Time
        ----------------------------  -------------------------  ---------------
        [Outside any known module]    [Unknown]                           0.090s
        func@0x7efe0                  libittnotify_collector.so           0.005s
        __open                        ld-2.17.so                          0.005s
        _IO_str_init_static_internal  libc-2.17.so                        0.005s
        _IO_vfprintf                  libc-2.17.so                        0.005s
    Parallel Region Time: 0.006s (3.0%)
        Estimated Ideal Time: 0.002s (1.3%)
        OpenMP Potential Gain: 0.003s (1.8%)
Memory Bound: 63.9% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 25.2% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "128" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:18:11 22/04/2021 UTC
    Collection stop time: 20:18:11 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_64_128 > srad1-log/vtune/18_64_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_64_128 --  srad1 100 0.5 64 128 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.014081956819 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.086503453553 % : READ IMAGE FROM FILE
0.000074000003 s, 0.148866400123 % : RESIZE IMAGE
0.000018000001 s, 0.036210745573 % : SETUP, MEMORY ALLOCATION
0.000028000000 s, 0.056327827275 % : EXTRACT IMAGE
0.045375000685 s, 91.281257629395 % : COMPUTE
0.000101999998 s, 0.205194234848 % : COMPRESS IMAGE
0.004038999788 s, 8.125289916992 % : SAVE IMAGE INTO FILE
0.000023000001 s, 0.046269286424 % : FREE MEMORY
Total time:
0.049708999693 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-57433-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-57433-quartz1453.sc' filvtune: Executing actions 12 % Loading '57433-57439.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-57439-316124ec.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.181s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.056 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.181
        Serial Time (outside parallel regions): 0.160s (88.0%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.022s (12.0%)
            Estimated Ideal Time: 0.014s (7.9%)
            OpenMP Potential Gain: 0.008s (4.1%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.017s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.015s                        100.0%           5
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 0.360s (97.3% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.300s                 81.1%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  8.1%
        __kmp_fork_call                 libiomp5.so                  0.030s                  8.1%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "128" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:18:32 22/04/2021 UTC
    Collection stop time: 20:18:33 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_64_128 > srad1-log/vtune/9_64_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_64_128 --  srad1 100 0.5 64 128 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.011564322747 % : READ COMMAND LINE PARAMETERS
0.000906999980 s, 1.498405814171 % : READ IMAGE FROM FILE
0.000176999994 s, 0.292412132025 % : RESIZE IMAGE
0.000132999994 s, 0.219722121954 % : SETUP, MEMORY ALLOCATION
0.000029000001 s, 0.047909334302 % : EXTRACT IMAGE
0.055250000209 s, 91.275543212891 % : COMPUTE
0.000113000002 s, 0.186681196094 % : COMPRESS IMAGE
0.003897000104 s, 6.438023567200 % : SAVE IMAGE INTO FILE
0.000018000001 s, 0.029736829922 % : FREE MEMORY
Total time:
0.060531001538 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-57520-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-57520-quartz1453.sc' filvtune: Executing actions 12 % Loading '57534.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-57534-7e30f340.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.163s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.229
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 3.107 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 1.5% (0.555 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.8% (0.555 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.157s (96.4%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.055s
        func@0x7efe0                libittnotify_collector.so           0.005s
    Parallel Region Time: 0.006s (3.6%)
        Estimated Ideal Time: 0.002s (1.4%)
        OpenMP Potential Gain: 0.004s (2.2%)
Memory Bound: 30.0% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 39.9% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "128" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:18:51 22/04/2021 UTC
    Collection stop time: 20:18:51 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_64_128 > srad1-log/vtune/9_64_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_64_128 --  srad1 100 0.5 64 128 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.017721069977 % : READ COMMAND LINE PARAMETERS
0.000042000000 s, 0.124047487974 % : READ IMAGE FROM FILE
0.000071000002 s, 0.209699332714 % : RESIZE IMAGE
0.000017000000 s, 0.050209701061 % : SETUP, MEMORY ALLOCATION
0.000028000000 s, 0.082698330283 % : EXTRACT IMAGE
0.029743999243 s, 87.849250793457 % : COMPUTE
0.000100999998 s, 0.298304706812 % : COMPRESS IMAGE
0.003828000044 s, 11.306042671204 % : SAVE IMAGE INTO FILE
0.000021000000 s, 0.062023743987 % : FREE MEMORY
Total time:
0.033858001232 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-57622-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-57622-quartz1453.sc' filvtune: Executing actions 12 % Loading '57622-57627.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-57627-bf543565.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.147s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.070 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.147
        Serial Time (outside parallel regions): 0.125s (85.4%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.021s (14.6%)
            Estimated Ideal Time: 0.017s (11.5%)
            OpenMP Potential Gain: 0.005s (3.1%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.002s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x6de01cba                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 0.120s (92.3% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.070s                 53.8%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 23.1%
        __kmp_fork_call                 libiomp5.so                  0.010s                  7.7%
        __kmp_join_call                 libiomp5.so                  0.010s                  7.7%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "128" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:19:13 22/04/2021 UTC
    Collection stop time: 20:19:14 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_64_128 > srad1-log/vtune/4_64_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_64_128 --  srad1 100 0.5 64 128 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.021559689194 % : READ COMMAND LINE PARAMETERS
0.000795000000 s, 2.448564767838 % : READ IMAGE FROM FILE
0.000113000002 s, 0.348034977913 % : RESIZE IMAGE
0.000111000001 s, 0.341875076294 % : SETUP, MEMORY ALLOCATION
0.000029999999 s, 0.092398673296 % : EXTRACT IMAGE
0.027463000268 s, 84.584823608398 % : COMPUTE
0.000091000002 s, 0.280275970697 % : COMPRESS IMAGE
0.003843999933 s, 11.839349746704 % : SAVE IMAGE INTO FILE
0.000014000000 s, 0.043119378388 % : FREE MEMORY
Total time:
0.032467998564 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-57706-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-57706-quartz1453.sc' filvtune: Executing actions 12 % Loading '57720.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-57720-009e29f8.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.134s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 3.223 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 1.6% (0.562 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.374 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.128s (95.9%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.025s
        [Loop@0x4035c1 in main]     srad1                               0.005s
        func@0x7fbb0                libittnotify_collector.so           0.005s
        check_match.9525            ld-2.17.so                          0.005s
    Parallel Region Time: 0.005s (4.1%)
        Estimated Ideal Time: 0.003s (2.5%)
        OpenMP Potential Gain: 0.002s (1.6%)
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 42.9% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "128" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:19:32 22/04/2021 UTC
    Collection stop time: 20:19:32 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_64_128 > srad1-log/vtune/4_64_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_64_256 --  srad1 100 0.5 64 256 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.003504938912 % : READ COMMAND LINE PARAMETERS
0.000044000000 s, 0.025702884421 % : READ IMAGE FROM FILE
0.000151999993 s, 0.088791787624 % : RESIZE IMAGE
0.000026000000 s, 0.015188070014 % : SETUP, MEMORY ALLOCATION
0.000038999999 s, 0.022782104090 % : EXTRACT IMAGE
0.164817005396 s, 96.278923034668 % : COMPUTE
0.000222999995 s, 0.130266904831 % : COMPRESS IMAGE
0.005849000067 s, 3.416731595993 % : SAVE IMAGE INTO FILE
0.000031000000 s, 0.018108852208 % : FREE MEMORY
Total time:
0.171186998487 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-57811-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-57811-quartz1453.sc' filvtune: Executing actions 12 % Loading '57811-57816.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-57816-5d1fc04b.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.402s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.025 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.402
        Serial Time (outside parallel regions): 0.374s (93.2%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.027s (6.8%)
            Estimated Ideal Time: 0.019s (4.7%)
            OpenMP Potential Gain: 0.009s (2.2%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.829s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.824s                        100.0%          32
        Mutex 0x6cb3026d                                              0.003s                        100.0%          10
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 3.580s (99.7% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  3.510s                 97.8%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.8%
        __kmp_fork_call                 libiomp5.so                  0.020s                  0.6%
        __kmp_join_barrier              libiomp5.so                  0.010s                  0.3%
        __kmp_join_call                 libiomp5.so                  0.010s                  0.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "256" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:19:55 22/04/2021 UTC
    Collection stop time: 20:19:56 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_64_256 > srad1-log/vtune/36_64_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_64_256 --  srad1 100 0.5 64 256 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.003402451752 % : READ COMMAND LINE PARAMETERS
0.000897000020 s, 0.435999870300 % : READ IMAGE FROM FILE
0.000214999993 s, 0.104503870010 % : RESIZE IMAGE
0.000172000000 s, 0.083603098989 % : SETUP, MEMORY ALLOCATION
0.000044000000 s, 0.021386839449 % : EXTRACT IMAGE
0.195642992854 s, 95.095123291016 % : COMPUTE
0.000358999998 s, 0.174497157335 % : COMPRESS IMAGE
0.008365999907 s, 4.066415786743 % : SAVE IMAGE INTO FILE
0.000031000000 s, 0.015068000183 % : FREE MEMORY
Total time:
0.205733999610 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-57928-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-57928-quartz1453.sc' filvtune: Executing actions 12 % Loading '57943.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-57943-c1894023.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.300s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.252
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.677 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 5.8% (2.103 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.7% (1.202 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.286s (95.2%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                        Module                     Serial CPU Time
        ------------------------------  -------------------------  ---------------
        [Outside any known module]      [Unknown]                           0.165s
        func@0x7efe0                    libittnotify_collector.so           0.005s
        __pthread_mutex_unlock_usercnt  libpthread-2.17.so                  0.005s
        _IO_file_xsputn                 libc-2.17.so                        0.005s
        _IO_str_init_static_internal    libc-2.17.so                        0.005s
    Parallel Region Time: 0.014s (4.8%)
        Estimated Ideal Time: 0.003s (1.1%)
        OpenMP Potential Gain: 0.011s (3.7%)
Memory Bound: 81.2% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 20.3% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "256" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:20:10 22/04/2021 UTC
    Collection stop time: 20:20:10 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_64_256 > srad1-log/vtune/36_64_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_64_256 --  srad1 100 0.5 64 256 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.009310739115 % : READ COMMAND LINE PARAMETERS
0.000048999998 s, 0.065175175667 % : READ IMAGE FROM FILE
0.000165999998 s, 0.220797538757 % : RESIZE IMAGE
0.000024000001 s, 0.031922534108 % : SETUP, MEMORY ALLOCATION
0.000029999999 s, 0.039903167635 % : EXTRACT IMAGE
0.068939998746 s, 91.697479248047 % : COMPUTE
0.000211000006 s, 0.280652284622 % : COMPRESS IMAGE
0.005725999828 s, 7.616184711456 % : SAVE IMAGE INTO FILE
0.000029000001 s, 0.038573060185 % : FREE MEMORY
Total time:
0.075181998312 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-58054-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-58054-quartz1453.sc' filvtune: Executing actions 12 % Loading '58054-58059.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-58059-ccb2b77b.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.204s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.050 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.204
        Serial Time (outside parallel regions): 0.181s (88.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.023s (11.2%)
            Estimated Ideal Time: 0.015s (7.5%)
            OpenMP Potential Gain: 0.007s (3.6%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.195s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.193s                        100.0%          13
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Mutex 0x6cb3026d                                              0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 1.010s (99.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.950s                 93.1%
        __kmp_fork_call                 libiomp5.so                  0.030s                  2.9%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  2.9%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "256" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:20:27 22/04/2021 UTC
    Collection stop time: 20:20:27 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_64_256 > srad1-log/vtune/18_64_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_64_256 --  srad1 100 0.5 64 256 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.007857234217 % : READ COMMAND LINE PARAMETERS
0.000707000028 s, 0.694383084774 % : READ IMAGE FROM FILE
0.000193000000 s, 0.189555779099 % : RESIZE IMAGE
0.000193999993 s, 0.190537929535 % : SETUP, MEMORY ALLOCATION
0.000050999999 s, 0.050089869648 % : EXTRACT IMAGE
0.094297997653 s, 92.615180969238 % : COMPUTE
0.000224000003 s, 0.220002561808 % : COMPRESS IMAGE
0.006091999821 s, 5.983283519745 % : SAVE IMAGE INTO FILE
0.000049999999 s, 0.049107715487 % : FREE MEMORY
Total time:
0.101816996932 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-58146-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-58146-quartz1453.sc' filvtune: Executing actions 12 % Loading '58161.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-58161-1137dd78.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.203s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.966
    Average CPU Frequency: 3.088 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 2.1% (0.764 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.1% (0.764 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.198s (97.2%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module                     Serial CPU Time
        ----------------------------  -------------------------  ---------------
        [Outside any known module]    [Unknown]                           0.095s
        [Loop@0x4035c1 in main]       srad1                               0.005s
        func@0x7efe0                  libittnotify_collector.so           0.005s
        _IO_vfprintf                  libc-2.17.so                        0.005s
        _IO_str_init_static_internal  libc-2.17.so                        0.005s
    Parallel Region Time: 0.006s (2.8%)
        Estimated Ideal Time: 0.003s (1.3%)
        OpenMP Potential Gain: 0.003s (1.6%)
Memory Bound: 71.2% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 20.4% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 0.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "256" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:20:41 22/04/2021 UTC
    Collection stop time: 20:20:41 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_64_256 > srad1-log/vtune/18_64_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_64_256 --  srad1 100 0.5 64 256 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.013785768300 % : READ COMMAND LINE PARAMETERS
0.000048000002 s, 0.094530984759 % : READ IMAGE FROM FILE
0.000174000001 s, 0.342674821615 % : RESIZE IMAGE
0.000023000001 s, 0.045296099037 % : SETUP, MEMORY ALLOCATION
0.000045000001 s, 0.088622801006 % : EXTRACT IMAGE
0.044553998858 s, 87.744453430176 % : COMPUTE
0.000190999999 s, 0.376154541969 % : COMPRESS IMAGE
0.005712999962 s, 11.251156806946 % : SAVE IMAGE INTO FILE
0.000022000000 s, 0.043326701969 % : FREE MEMORY
Total time:
0.050776999444 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-58253-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-58253-quartz1453.sc' filvtune: Executing actions 12 % Loading '58253-58258.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-58258-05c27a9c.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.179s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.057 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.179
        Serial Time (outside parallel regions): 0.156s (87.0%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module                Serial CPU Time
            ------------------------------  --------------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so                    0.030s
            [ld-linux-x86-64.so.2]          ld-linux-x86-64.so.2           0.010s
            __kmp_join_call                 libiomp5.so                    0.010s
        Parallel Region Time: 0.023s (13.0%)
            Estimated Ideal Time: 0.016s (9.1%)
            OpenMP Potential Gain: 0.007s (3.8%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.019s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.017s                        100.0%           4
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 0.420s (97.7% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.370s                 86.0%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  7.0%
        __kmp_fork_call                 libiomp5.so                  0.010s                  2.3%
        __kmp_join_call                 libiomp5.so                  0.010s                  2.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "256" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:20:58 22/04/2021 UTC
    Collection stop time: 20:20:58 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_64_256 > srad1-log/vtune/9_64_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_64_256 --  srad1 100 0.5 64 256 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.011848742142 % : READ COMMAND LINE PARAMETERS
0.000852000026 s, 1.442161202431 % : READ IMAGE FROM FILE
0.000236000007 s, 0.399471879005 % : RESIZE IMAGE
0.000195000001 s, 0.330072104931 % : SETUP, MEMORY ALLOCATION
0.000045000001 s, 0.076170489192 % : EXTRACT IMAGE
0.051112998277 s, 86.517822265625 % : COMPUTE
0.000224000003 s, 0.379159748554 % : COMPRESS IMAGE
0.006382000167 s, 10.802667617798 % : SAVE IMAGE INTO FILE
0.000024000001 s, 0.040624257177 % : FREE MEMORY
Total time:
0.059078000486 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-58336-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-58336-quartz1453.sc' filvtune: Executing actions 12 % Loading '58350.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-58350-2f7b9603.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.139s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.915
    Average CPU Frequency: 3.003 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization
    Effective Logical Core Utilization: 1.0% (0.687 out of 72)
    Serial Time (outside parallel regions): 0.132s (95.5%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.055s
        _IO_vfscanf                 libc-2.17.so           0.005s
        __kmp_init_implicit_task    libiomp5.so            0.005s
    Parallel Region Time: 0.006s (4.5%)
        Estimated Ideal Time: 0.003s (2.3%)
        OpenMP Potential Gain: 0.003s (2.2%)
Memory Bound
    Cache Bound: 79.7% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "256" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:21:12 22/04/2021 UTC
    Collection stop time: 20:21:12 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_64_256 > srad1-log/vtune/9_64_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_64_256 --  srad1 100 0.5 64 256 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.015015390702 % : READ COMMAND LINE PARAMETERS
0.000044000000 s, 0.110112860799 % : READ IMAGE FROM FILE
0.000149000000 s, 0.372882217169 % : RESIZE IMAGE
0.000022000000 s, 0.055056430399 % : SETUP, MEMORY ALLOCATION
0.000039999999 s, 0.100102603436 % : EXTRACT IMAGE
0.033987998962 s, 85.057182312012 % : COMPUTE
0.000169999999 s, 0.425436079502 % : COMPRESS IMAGE
0.005520999897 s, 13.816661834717 % : SAVE IMAGE INTO FILE
0.000018999999 s, 0.047548737377 % : FREE MEMORY
Total time:
0.039958998561 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-58435-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-58435-quartz1453.sc' filvtune: Executing actions 12 % Loading '58435-58440.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-58440-2c5f02b4.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.140s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.073 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.140
        Serial Time (outside parallel regions): 0.115s (82.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
            _IO_fprintf                     libc.so.6             0.010s
        Parallel Region Time: 0.025s (17.7%)
            Estimated Ideal Time: 0.020s (14.1%)
            OpenMP Potential Gain: 0.005s (3.7%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.002s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x6de01cba                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 0.150s (93.8% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.090s                 56.2%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 18.8%
        __kmp_join_call                 libiomp5.so                  0.020s                 12.5%
        __kmp_fork_call                 libiomp5.so                  0.010s                  6.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "256" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:21:29 22/04/2021 UTC
    Collection stop time: 20:21:29 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_64_256 > srad1-log/vtune/4_64_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_64_256 --  srad1 100 0.5 64 256 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.017965761945 % : READ COMMAND LINE PARAMETERS
0.000828000018 s, 2.125092983246 % : READ IMAGE FROM FILE
0.000186000005 s, 0.477375984192 % : RESIZE IMAGE
0.000144000005 s, 0.369581401348 % : SETUP, MEMORY ALLOCATION
0.000038999999 s, 0.100094966590 % : EXTRACT IMAGE
0.031284999102 s, 80.294128417969 % : COMPUTE
0.000192000007 s, 0.492775201797 % : COMPRESS IMAGE
0.006256000139 s, 16.056259155273 % : SAVE IMAGE INTO FILE
0.000026000000 s, 0.066729970276 % : FREE MEMORY
Total time:
0.038963001221 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-58513-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-58513-quartz1453.sc' filvtune: Executing actions 12 % Loading '58527.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-58527-84d0b90a.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.139s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.852
    Average CPU Frequency: 3.213 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 1.1% (0.398 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.6% (0.398 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.131s (94.5%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                              Module        Serial CPU Time
        ------------------------------------  ------------  ---------------
        [Outside any known module]            [Unknown]              0.025s
        _IO_old_init                          libc-2.17.so           0.005s
        [Loop at line 111 in _strnlen_s_chk]  libiomp5.so            0.005s
    Parallel Region Time: 0.008s (5.5%)
        Estimated Ideal Time: 0.005s (3.7%)
        OpenMP Potential Gain: 0.002s (1.8%)
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 37.3% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "256" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:21:43 22/04/2021 UTC
    Collection stop time: 20:21:43 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_64_256 > srad1-log/vtune/4_64_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_64_512 --  srad1 100 0.5 64 512 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.004071412608 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.029178455472 % : READ IMAGE FROM FILE
0.000287000003 s, 0.194749236107 % : RESIZE IMAGE
0.000027000000 s, 0.018321355805 % : SETUP, MEMORY ALLOCATION
0.000059000002 s, 0.040035557002 % : EXTRACT IMAGE
0.136769995093 s, 92.807846069336 % : COMPUTE
0.000418000011 s, 0.283641755581 % : COMPRESS IMAGE
0.009545999579 s, 6.477617263794 % : SAVE IMAGE INTO FILE
0.000213000007 s, 0.144535154104 % : FREE MEMORY
Total time:
0.147368997335 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-58606-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-58606-quartz1453.sc' filvtune: Executing actions 12 % Loading '58606-58611.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-58611-9383e340.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.342s
    Paused Time: 0s
Effective CPU Utilization: 0.4% (0.266 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.342
        Serial Time (outside parallel regions): 0.313s (91.4%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.020s
            [Outside any known module]      [Unknown]             0.010s
            _IO_fprintf                     libc.so.6             0.010s
        Parallel Region Time: 0.029s (8.6%)
            Estimated Ideal Time: 0.019s (5.6%)
            OpenMP Potential Gain: 0.010s (3.0%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.511s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.509s                        100.0%          31
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%           9
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 3.310s (97.4% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  3.260s                 95.9%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.020s                  0.6%
        __kmp_join_barrier              libiomp5.so                  0.010s                  0.3%
        __kmp_fork_call                 libiomp5.so                  0.010s                  0.3%
        __kmp_join_call                 libiomp5.so                  0.010s                  0.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "512" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:22:00 22/04/2021 UTC
    Collection stop time: 20:22:01 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_64_512 > srad1-log/vtune/36_64_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_64_512 --  srad1 100 0.5 64 512 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.004052500241 % : READ COMMAND LINE PARAMETERS
0.000911000010 s, 0.461478441954 % : READ IMAGE FROM FILE
0.000438999996 s, 0.222380951047 % : RESIZE IMAGE
0.000472000014 s, 0.239097505808 % : SETUP, MEMORY ALLOCATION
0.000075999997 s, 0.038498751819 % : EXTRACT IMAGE
0.179921999574 s, 91.141738891602 % : COMPUTE
0.000692999980 s, 0.351047813892 % : COMPRESS IMAGE
0.014662999660 s, 7.427725791931 % : SAVE IMAGE INTO FILE
0.000224999996 s, 0.113976575434 % : FREE MEMORY
Total time:
0.197409003973 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-58716-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-58716-quartz1453.sc' filvtune: Executing actions 12 % Loading '58730.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-58730-d22741ad.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.294s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.055
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.590 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 8.0% (2.862 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.0% (1.431 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.282s (96.0%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                        Module                     Serial CPU Time
        ------------------------------  -------------------------  ---------------
        [Outside any known module]      [Unknown]                           0.175s
        func@0x7efe0                    libittnotify_collector.so           0.005s
        [Loop@0x48360 in _itoa_word]    libc-2.17.so                        0.005s
        __kmp_register_library_startup  libiomp5.so                         0.005s
    Parallel Region Time: 0.012s (4.0%)
        Estimated Ideal Time: 0.004s (1.2%)
        OpenMP Potential Gain: 0.008s (2.8%)
Memory Bound: 68.3% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 6.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "512" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:22:15 22/04/2021 UTC
    Collection stop time: 20:22:15 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_64_512 > srad1-log/vtune/36_64_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_64_512 --  srad1 100 0.5 64 512 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.006117891520 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.045884188265 % : READ IMAGE FROM FILE
0.000292000012 s, 0.297737389803 % : RESIZE IMAGE
0.000023000001 s, 0.023451918736 % : SETUP, MEMORY ALLOCATION
0.000060999999 s, 0.062198564410 % : EXTRACT IMAGE
0.087199002504 s, 88.912338256836 % : COMPUTE
0.000426000013 s, 0.434370338917 % : COMPRESS IMAGE
0.009808000177 s, 10.000714302063 % : SAVE IMAGE INTO FILE
0.000213000007 s, 0.217185169458 % : FREE MEMORY
Total time:
0.098072998226 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-58842-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-58842-quartz1453.sc' filvtune: Executing actions 12 % Loading '58842-58847.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-58847-dc0f5e89.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.259s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.039 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.259
        Serial Time (outside parallel regions): 0.227s (87.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.033s (12.7%)
            Estimated Ideal Time: 0.023s (9.0%)
            OpenMP Potential Gain: 0.010s (3.7%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.286s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.284s                        100.0%          14
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 1.330s (99.3% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  1.240s                 92.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  2.2%
        __kmp_fork_call                 libiomp5.so                  0.030s                  2.2%
        __kmp_affinity_set_init_mask    libiomp5.so                  0.010s                  0.7%
        __kmp_join_call                 libiomp5.so                  0.010s                  0.7%
        __kmp_join_barrier              libiomp5.so                  0.010s                  0.7%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "512" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:22:32 22/04/2021 UTC
    Collection stop time: 20:22:32 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_64_512 > srad1-log/vtune/18_64_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_64_512 --  srad1 100 0.5 64 512 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.007287766319 % : READ COMMAND LINE PARAMETERS
0.000786999997 s, 0.716934025288 % : READ IMAGE FROM FILE
0.000426999992 s, 0.388984531164 % : RESIZE IMAGE
0.000376999989 s, 0.343436002731 % : SETUP, MEMORY ALLOCATION
0.000070000002 s, 0.063767962158 % : EXTRACT IMAGE
0.097052000463 s, 88.411537170410 % : COMPUTE
0.000422000012 s, 0.384429693222 % : COMPRESS IMAGE
0.010494000278 s, 9.559727668762 % : SAVE IMAGE INTO FILE
0.000136000002 s, 0.123892024159 % : FREE MEMORY
Total time:
0.109773002565 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-58938-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-58938-quartz1453.sc' filvtune: Executing actions 12 % Loading '58958.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-58958-23e3755a.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.195s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.936
    Average CPU Frequency: 2.724 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 4.0% (1.424 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.3% (0.950 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.188s (96.1%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.100s
        [Loop@0x402006 in main]     srad1                  0.005s
        __memmove_ssse3_back        libc-2.17.so           0.005s
    Parallel Region Time: 0.008s (3.9%)
        Estimated Ideal Time: 0.004s (1.8%)
        OpenMP Potential Gain: 0.004s (2.1%)
Memory Bound: 46.8% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 14.7% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "512" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:22:46 22/04/2021 UTC
    Collection stop time: 20:22:46 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_64_512 > srad1-log/vtune/18_64_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_64_512 --  srad1 100 0.5 64 512 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000009000000 s, 0.014842668548 % : READ COMMAND LINE PARAMETERS
0.000050999999 s, 0.084108449519 % : READ IMAGE FROM FILE
0.000300000014 s, 0.494755566120 % : RESIZE IMAGE
0.000021000000 s, 0.034632891417 % : SETUP, MEMORY ALLOCATION
0.000072000003 s, 0.118741348386 % : EXTRACT IMAGE
0.050191000104 s, 82.774261474609 % : COMPUTE
0.000380999991 s, 0.628339588642 % : COMPRESS IMAGE
0.009430999868 s, 15.553466796875 % : SAVE IMAGE INTO FILE
0.000180000003 s, 0.296853333712 % : FREE MEMORY
Total time:
0.060635998845 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-59054-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-59054-quartz1453.sc' filvtune: Executing actions 12 % Loading '59054-59059.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-59059-0faab554.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.181s
    Paused Time: 0s
Effective CPU Utilization: 0.6% (0.452 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.181
        Serial Time (outside parallel regions): 0.154s (85.4%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.026s (14.6%)
            Estimated Ideal Time: 0.018s (9.9%)
            OpenMP Potential Gain: 0.008s (4.7%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.024s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.022s                        100.0%           4
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 0.410s (83.7% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.350s                 71.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  6.1%
        __kmp_fork_call                 libiomp5.so                  0.020s                  4.1%
        __kmp_join_call                 libiomp5.so                  0.010s                  2.0%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "512" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:23:03 22/04/2021 UTC
    Collection stop time: 20:23:03 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_64_512 > srad1-log/vtune/9_64_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_64_512 --  srad1 100 0.5 64 512 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.010094128549 % : READ COMMAND LINE PARAMETERS
0.000704000005 s, 0.888283252716 % : READ IMAGE FROM FILE
0.000411999994 s, 0.519847571850 % : RESIZE IMAGE
0.000396999996 s, 0.500921070576 % : SETUP, MEMORY ALLOCATION
0.000073000003 s, 0.092108912766 % : EXTRACT IMAGE
0.066444002092 s, 83.836776733398 % : COMPUTE
0.000433000008 s, 0.546344637871 % : COMPRESS IMAGE
0.010623999871 s, 13.405000686646 % : SAVE IMAGE INTO FILE
0.000159000003 s, 0.200620785356 % : FREE MEMORY
Total time:
0.079254001379 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-59137-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-59137-quartz1453.sc' filvtune: Executing actions 12 % Loading '59152.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-59152-3e84f590.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.163s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.917
    Average CPU Frequency: 2.766 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 4.0% (1.431 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.3% (0.954 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.153s (94.0%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module                     Serial CPU Time
        ----------------------------  -------------------------  ---------------
        [Outside any known module]    [Unknown]                           0.065s
        func@0x7efe0                  libittnotify_collector.so           0.005s
        [Loop@0x48360 in _itoa_word]  libc-2.17.so                        0.005s
        _IO_vfscanf                   libc-2.17.so                        0.005s
    Parallel Region Time: 0.010s (6.0%)
        Estimated Ideal Time: 0.006s (3.7%)
        OpenMP Potential Gain: 0.004s (2.2%)
Memory Bound: 39.2% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 39.0% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "512" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:23:16 22/04/2021 UTC
    Collection stop time: 20:23:17 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_64_512 > srad1-log/vtune/9_64_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_64_512 --  srad1 100 0.5 64 512 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000005000000 s, 0.010024459101 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.086210355163 % : READ IMAGE FROM FILE
0.000288999989 s, 0.579413771629 % : RESIZE IMAGE
0.000023000001 s, 0.046112515032 % : SETUP, MEMORY ALLOCATION
0.000056000001 s, 0.112273953855 % : EXTRACT IMAGE
0.040022000670 s, 80.239784240723 % : COMPUTE
0.000330999988 s, 0.663619220257 % : COMPRESS IMAGE
0.008929999545 s, 17.903686523438 % : SAVE IMAGE INTO FILE
0.000178999995 s, 0.358875662088 % : FREE MEMORY
Total time:
0.049878001213 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-59235-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-59235-quartz1453.sc' filvtune: Executing actions 12 % Loading '59235-59240.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-59240-fa247a00.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.145s
    Paused Time: 0s
Effective CPU Utilization: 0.3% (0.211 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.145
        Serial Time (outside parallel regions): 0.116s (79.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.029s (20.2%)
            Estimated Ideal Time: 0.025s (17.4%)
            OpenMP Potential Gain: 0.004s (2.9%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.002s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x6de01cba                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 0.160s (84.2% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.110s                 57.9%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 15.8%
        __kmp_fork_call                 libiomp5.so                  0.010s                  5.3%
        __kmp_join_call                 libiomp5.so                  0.010s                  5.2%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "512" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:23:32 22/04/2021 UTC
    Collection stop time: 20:23:33 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_64_512 > srad1-log/vtune/4_64_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_64_512 --  srad1 100 0.5 64 512 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000009000000 s, 0.018790321425 % : READ COMMAND LINE PARAMETERS
0.000959999976 s, 2.004300832748 % : READ IMAGE FROM FILE
0.000465999998 s, 0.972921013832 % : RESIZE IMAGE
0.000452999986 s, 0.945779502392 % : SETUP, MEMORY ALLOCATION
0.000085000000 s, 0.177464142442 % : EXTRACT IMAGE
0.036031998694 s, 75.228096008301 % : COMPUTE
0.000353999989 s, 0.739085972309 % : COMPRESS IMAGE
0.009398999624 s, 19.623357772827 % : SAVE IMAGE INTO FILE
0.000138999996 s, 0.290206074715 % : FREE MEMORY
Total time:
0.047896999866 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-59312-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-59312-quartz1453.sc' filvtune: Executing actions 12 % Loading '59326.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-59326-f3cbc3d1.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.124s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.902
    Average CPU Frequency: 2.982 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 3.0% (1.093 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.0% (0.729 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.110s (89.0%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.035s
        func@0x7efe0                libittnotify_collector.so           0.010s
        func@0x1a390                libittnotify_collector.so           0.005s
    Parallel Region Time: 0.014s (11.0%)
        Estimated Ideal Time: 0.010s (8.4%)
        OpenMP Potential Gain: 0.003s (2.6%)
Memory Bound: 80.7% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 23.2% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 23.2% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "64" "512" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:23:45 22/04/2021 UTC
    Collection stop time: 20:23:45 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_64_512 > srad1-log/vtune/4_64_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_128_64 --  srad1 100 0.5 128 64 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.003907878418 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.029309088364 % : READ IMAGE FROM FILE
0.000046000001 s, 0.029960399494 % : RESIZE IMAGE
0.000018000001 s, 0.011723634787 % : SETUP, MEMORY ALLOCATION
0.000028000000 s, 0.018236765638 % : EXTRACT IMAGE
0.148914992809 s, 96.990280151367 % : COMPUTE
0.000121999998 s, 0.079460188746 % : COMPRESS IMAGE
0.004327000119 s, 2.818231582642 % : SAVE IMAGE INTO FILE
0.000029000001 s, 0.018888078630 % : FREE MEMORY
Total time:
0.153536006808 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-59406-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-59406-quartz1453.sc' filvtune: Executing actions 12 % Loading '59406-59412.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-59412-a33514a8.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' 
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 20 % Resolving information for `libpthread.so.0'      vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.353s
    Paused Time: 0s
Effective CPU Utilization: 0.3% (0.200 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.353
        Serial Time (outside parallel regions): 0.325s (92.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            [Outside any known module]      [Unknown]             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.028s (7.9%)
            Estimated Ideal Time: 0.017s (4.7%)
            OpenMP Potential Gain: 0.011s (3.2%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.838s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.834s                        100.0%          31
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Mutex 0x6cb3026d                                              0.002s                        100.0%           8
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 3.130s (97.8% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                Module       Spin and Overhead Time  (% from CPU Time)(%)
        ----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                      libiomp5.so                  3.040s                 95.0%
        __kmp_get_global_thread_id_reg                                          libiomp5.so                  0.030s                  0.9%
        __kmp_join_barrier                                                      libiomp5.so                  0.020s                  0.6%
        _INTERNAL_23_______src_kmp_sched_cpp_20354e55::__kmp_itt_metadata_loop  libiomp5.so                  0.010s                  0.3%
        __kmp_join_call                                                         libiomp5.so                  0.010s                  0.3%
        [Others]                                                                N/A                          0.020s                  0.6%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "64" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:24:01 22/04/2021 UTC
    Collection stop time: 20:24:02 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_128_64 > srad1-log/vtune/36_128_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_128_64 --  srad1 100 0.5 128 64 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000001000000 s, 0.000542464084 % : SETUP VARIABLES
0.000007000000 s, 0.003797248704 % : READ COMMAND LINE PARAMETERS
0.000740999996 s, 0.401965916157 % : READ IMAGE FROM FILE
0.000070000002 s, 0.037972487509 % : RESIZE IMAGE
0.000095000003 s, 0.051534090191 % : SETUP, MEMORY ALLOCATION
0.000039999999 s, 0.021698562428 % : EXTRACT IMAGE
0.178029999137 s, 96.574882507324 % : COMPUTE
0.000192000007 s, 0.104153111577 % : COMPRESS IMAGE
0.005142000038 s, 2.789350509644 % : SAVE IMAGE INTO FILE
0.000026000000 s, 0.014104067348 % : FREE MEMORY
Total time:
0.184343993664 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-59517-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-59517-quartz1453.sc' filvtune: Executing actions 12 % Loading '59532.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-59532-dec1c8f9.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.280s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.204
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.724 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 3.2% (1.144 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.6% (1.144 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.267s (95.4%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.155s
        func@0x7efe0                libittnotify_collector.so           0.010s
        calloc                      libc-2.17.so                        0.005s
    Parallel Region Time: 0.013s (4.6%)
        Estimated Ideal Time: 0.003s (1.0%)
        OpenMP Potential Gain: 0.010s (3.6%)
Memory Bound: 24.2% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 13.2% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "64" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:24:15 22/04/2021 UTC
    Collection stop time: 20:24:15 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_128_64 > srad1-log/vtune/36_128_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_128_64 --  srad1 100 0.5 128 64 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.007325470448 % : READ COMMAND LINE PARAMETERS
0.000047000001 s, 0.057382851839 % : READ IMAGE FROM FILE
0.000050999999 s, 0.062266498804 % : RESIZE IMAGE
0.000018000001 s, 0.021976411343 % : SETUP, MEMORY ALLOCATION
0.000019999999 s, 0.024418236688 % : EXTRACT IMAGE
0.077518999577 s, 94.643859863281 % : COMPUTE
0.000123000005 s, 0.150172144175 % : COMPRESS IMAGE
0.004095000215 s, 4.999633789062 % : SAVE IMAGE INTO FILE
0.000027000000 s, 0.032964617014 % : FREE MEMORY
Total time:
0.081905998290 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-59643-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-59643-quartz1453.sc' filvtune: Executing actions 12 % Loading '59643-59649.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-59649-e71ba620.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.246s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.000 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.246
        Serial Time (outside parallel regions): 0.224s (90.7%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.023s (9.3%)
            Estimated Ideal Time: 0.014s (5.8%)
            OpenMP Potential Gain: 0.009s (3.5%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.269s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                                               0.267s                        100.0%          14
        Stream image_out.pgm 0xff4f6b54                                                             0.001s                        100.0%           1
        Stream 0x2e4a07a1                                                                           0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                                             0.000s                        100.0%           1
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0xf222eef6                               0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           4
    Spin and Overhead Time: 1.170s (100.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  1.100s                 94.0%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  2.6%
        __kmp_fork_call                 libiomp5.so                  0.020s                  1.7%
        __kmp_join_barrier              libiomp5.so                  0.010s                  0.9%
        __kmp_join_call                 libiomp5.so                  0.010s                  0.9%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "64" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:24:32 22/04/2021 UTC
    Collection stop time: 20:24:33 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_128_64 > srad1-log/vtune/18_128_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_128_64 --  srad1 100 0.5 128 64 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.008359631523 % : READ COMMAND LINE PARAMETERS
0.000890999974 s, 0.931053996086 % : READ IMAGE FROM FILE
0.000110000001 s, 0.114944927394 % : RESIZE IMAGE
0.000169000006 s, 0.176597207785 % : SETUP, MEMORY ALLOCATION
0.000037999998 s, 0.039708249271 % : EXTRACT IMAGE
0.089730001986 s, 93.763717651367 % : COMPUTE
0.000136000002 s, 0.142113730311 % : COMPRESS IMAGE
0.004598000087 s, 4.804697990417 % : SAVE IMAGE INTO FILE
0.000018000001 s, 0.018809171394 % : FREE MEMORY
Total time:
0.095697999001 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-59736-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-59736-quartz1453.sc' filvtune: Executing actions 12 % Loading '59751.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-59751-1b2b219b.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.231s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.929
    Average CPU Frequency: 2.522 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization
    Effective Logical Core Utilization: 0.7% (0.521 out of 72)
    Serial Time (outside parallel regions): 0.225s (97.4%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module              Serial CPU Time
        --------------------------  ------------------  ---------------
        [Outside any known module]  [Unknown]                    0.095s
        write                       libpthread-2.17.so           0.005s
        [Loop@0x4035c1 in main]     srad1                        0.005s
    Parallel Region Time: 0.006s (2.6%)
        Estimated Ideal Time: 0.002s (1.0%)
        OpenMP Potential Gain: 0.004s (1.6%)
Memory Bound
    Cache Bound: 26.4% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "64" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:24:46 22/04/2021 UTC
    Collection stop time: 20:24:46 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_128_64 > srad1-log/vtune/18_128_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_128_64 --  srad1 100 0.5 128 64 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.010975141078 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.082313559949 % : READ IMAGE FROM FILE
0.000046000001 s, 0.084142744541 % : RESIZE IMAGE
0.000018000001 s, 0.032925426960 % : SETUP, MEMORY ALLOCATION
0.000031000000 s, 0.056704897434 % : EXTRACT IMAGE
0.050108999014 s, 91.658889770508 % : COMPUTE
0.000103999999 s, 0.190235778689 % : COMPRESS IMAGE
0.004290000070 s, 7.847225666046 % : SAVE IMAGE INTO FILE
0.000019999999 s, 0.036583803594 % : FREE MEMORY
Total time:
0.054669000208 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-59843-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-59843-quartz1453.sc' filvtune: Executing actions 12 % Loading '59843-59848.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-59848-1d3cc958.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.180s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.170 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.180
        Serial Time (outside parallel regions): 0.160s (88.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.020s (11.2%)
            Estimated Ideal Time: 0.014s (7.6%)
            OpenMP Potential Gain: 0.007s (3.6%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.027s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.024s                        100.0%           4
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 0.370s (92.5% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.300s                 75.0%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  7.5%
        __kmp_join_barrier              libiomp5.so                  0.020s                  5.0%
        __kmp_join_call                 libiomp5.so                  0.010s                  2.5%
        __kmp_fork_call                 libiomp5.so                  0.010s                  2.5%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "64" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:25:03 22/04/2021 UTC
    Collection stop time: 20:25:04 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_128_64 > srad1-log/vtune/9_128_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_128_64 --  srad1 100 0.5 128 64 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.012198521756 % : READ COMMAND LINE PARAMETERS
0.000790000020 s, 1.376690387726 % : READ IMAGE FROM FILE
0.000058000001 s, 0.101073473692 % : RESIZE IMAGE
0.000112000002 s, 0.195176348090 % : SETUP, MEMORY ALLOCATION
0.000037999998 s, 0.066220551729 % : EXTRACT IMAGE
0.051488000900 s, 89.725357055664 % : COMPUTE
0.000130999993 s, 0.228286623955 % : COMPRESS IMAGE
0.004745000042 s, 8.268855094910 % : SAVE IMAGE INTO FILE
0.000015000000 s, 0.026139689609 % : FREE MEMORY
Total time:
0.057383999228 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-59926-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-59926-quartz1453.sc' filvtune: Executing actions 12 % Loading '59940.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-59940-3c084432.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.139s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.946
    Average CPU Frequency: 2.529 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 2.0% (0.728 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.9% (0.647 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.134s (96.0%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.055s
        func@0x7f060                libittnotify_collector.so           0.005s
        [Loop@0x4025b5 in main]     srad1                               0.005s
    Parallel Region Time: 0.006s (4.0%)
        Estimated Ideal Time: 0.002s (1.7%)
        OpenMP Potential Gain: 0.003s (2.2%)
Memory Bound: 94.6% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 24.5% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 0.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "64" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:25:17 22/04/2021 UTC
    Collection stop time: 20:25:17 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_128_64 > srad1-log/vtune/9_128_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_128_64 --  srad1 100 0.5 128 64 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.017760938033 % : READ COMMAND LINE PARAMETERS
0.000044000000 s, 0.130246877670 % : READ IMAGE FROM FILE
0.000046000001 s, 0.136167198420 % : RESIZE IMAGE
0.000018000001 s, 0.053282815963 % : SETUP, MEMORY ALLOCATION
0.000028000000 s, 0.082884371281 % : EXTRACT IMAGE
0.029145000502 s, 86.273750305176 % : COMPUTE
0.000094000003 s, 0.278254687786 % : COMPRESS IMAGE
0.004381999839 s, 12.971404075623 % : SAVE IMAGE INTO FILE
0.000018999999 s, 0.056242972612 % : FREE MEMORY
Total time:
0.033782001585 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-60024-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-60024-quartz1453.sc' filvtune: Executing actions 12 % Loading '60024-60029.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-60029-41d4b561.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.130s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.000 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.130
        Serial Time (outside parallel regions): 0.109s (83.5%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
        Parallel Region Time: 0.022s (16.5%)
            Estimated Ideal Time: 0.017s (13.1%)
            OpenMP Potential Gain: 0.005s (3.5%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.002s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x6de01cba                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 0.130s (100.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.080s                 61.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 23.1%
        __kmp_fork_call                 libiomp5.so                  0.010s                  7.7%
        __kmp_join_call                 libiomp5.so                  0.010s                  7.7%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "64" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:25:34 22/04/2021 UTC
    Collection stop time: 20:25:34 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_128_64 > srad1-log/vtune/4_128_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_128_64 --  srad1 100 0.5 128 64 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.021817728877 % : READ COMMAND LINE PARAMETERS
0.000890999974 s, 2.777085065842 % : READ IMAGE FROM FILE
0.000155000002 s, 0.483106821775 % : RESIZE IMAGE
0.000116000003 s, 0.361550927162 % : SETUP, MEMORY ALLOCATION
0.000037000002 s, 0.115322276950 % : EXTRACT IMAGE
0.026560999453 s, 82.785812377930 % : COMPUTE
0.000096999996 s, 0.302331387997 % : COMPRESS IMAGE
0.004207000136 s, 13.112454414368 % : SAVE IMAGE INTO FILE
0.000013000000 s, 0.040518637747 % : FREE MEMORY
Total time:
0.032083999366 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-60109-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-60109-quartz1453.sc' filvtune: Executing actions 12 % Loading '60123.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-60123-49ee91d4.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.115s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.993 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 2.0% (0.721 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.7% (0.481 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.109s (94.8%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.035s
        func@0x7efe0                libittnotify_collector.so           0.005s
    Parallel Region Time: 0.006s (5.2%)
        Estimated Ideal Time: 0.004s (3.2%)
        OpenMP Potential Gain: 0.002s (2.0%)
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 42.9% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "64" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:25:47 22/04/2021 UTC
    Collection stop time: 20:25:47 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_128_64 > srad1-log/vtune/4_128_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_128_128 --  srad1 100 0.5 128 128 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000005000000 s, 0.003110671649 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.026751775295 % : READ IMAGE FROM FILE
0.000101999998 s, 0.063457697630 % : RESIZE IMAGE
0.000018000001 s, 0.011198417284 % : SETUP, MEMORY ALLOCATION
0.000037999998 s, 0.023641102016 % : EXTRACT IMAGE
0.154514998198 s, 96.129074096680 % : COMPUTE
0.000218999994 s, 0.136247411370 % : COMPRESS IMAGE
0.005768000148 s, 3.588470458984 % : SAVE IMAGE INTO FILE
0.000029000001 s, 0.018041895702 % : FREE MEMORY
Total time:
0.160736992955 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-60216-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-60216-quartz1453.sc' filvtune: Executing actions 12 % Loading '60216-60222.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-60222-418e7dfb.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.394s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.000 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.394
        Serial Time (outside parallel regions): 0.369s (93.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.025s (6.4%)
            Estimated Ideal Time: 0.016s (4.1%)
            OpenMP Potential Gain: 0.009s (2.3%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.890s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.887s                        100.0%          32
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Mutex 0x6cb3026d                                              0.000s                        100.0%           6
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 3.620s (100.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  3.510s                 97.0%
        __kmp_join_barrier              libiomp5.so                  0.050s                  1.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.8%
        __kmp_join_call                 libiomp5.so                  0.020s                  0.6%
        __kmp_fork_call                 libiomp5.so                  0.010s                  0.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "128" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:26:04 22/04/2021 UTC
    Collection stop time: 20:26:04 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_128_128 > srad1-log/vtune/36_128_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_128_128 --  srad1 100 0.5 128 128 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.004330902360 % : READ COMMAND LINE PARAMETERS
0.000713000016 s, 0.385991692543 % : READ IMAGE FROM FILE
0.000121999998 s, 0.066046267748 % : RESIZE IMAGE
0.000176000001 s, 0.095279857516 % : SETUP, MEMORY ALLOCATION
0.000045000001 s, 0.024361327291 % : EXTRACT IMAGE
0.174739003181 s, 94.597198486328 % : COMPUTE
0.000376999989 s, 0.204093784094 % : COMPRESS IMAGE
0.008510000072 s, 4.606997489929 % : SAVE IMAGE INTO FILE
0.000029000001 s, 0.015699520707 % : FREE MEMORY
Total time:
0.184718996286 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-60327-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-60327-quartz1453.sc' filvtune: Executing actions 12 % Loading '60342.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-60342-96db79f2.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.280s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.243
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.750 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 3.3% (1.183 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.6% (1.183 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.269s (96.4%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.165s
        func@0x1f9b0                libc-2.17.so           0.005s
    Parallel Region Time: 0.010s (3.6%)
        Estimated Ideal Time: 0.003s (1.1%)
        OpenMP Potential Gain: 0.007s (2.6%)
Memory Bound: 45.4% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 8.2% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "128" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:26:18 22/04/2021 UTC
    Collection stop time: 20:26:19 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_128_128 > srad1-log/vtune/36_128_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_128_128 --  srad1 100 0.5 128 128 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.006621932145 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.047457177192 % : READ IMAGE FROM FILE
0.000103999999 s, 0.114780150354 % : RESIZE IMAGE
0.000018999999 s, 0.020969450474 % : SETUP, MEMORY ALLOCATION
0.000037999998 s, 0.041938900948 % : EXTRACT IMAGE
0.084141001105 s, 92.862663269043 % : COMPUTE
0.000226000004 s, 0.249426096678 % : COMPRESS IMAGE
0.006006000098 s, 6.628553390503 % : SAVE IMAGE INTO FILE
0.000024999999 s, 0.027591383085 % : FREE MEMORY
Total time:
0.090608000755 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-60453-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-60453-quartz1453.sc' filvtune: Executing actions 12 % Loading '60453-60458.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-60458-971b78a4.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.247s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.000 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.247
        Serial Time (outside parallel regions): 0.222s (89.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
        Parallel Region Time: 0.025s (10.2%)
            Estimated Ideal Time: 0.016s (6.4%)
            OpenMP Potential Gain: 0.010s (3.9%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.277s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.275s                        100.0%          13
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 1.200s (100.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  1.140s                 95.0%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  2.5%
        __kmp_fork_call                 libiomp5.so                  0.020s                  1.7%
        __kmp_join_call                 libiomp5.so                  0.010s                  0.8%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "128" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:26:35 22/04/2021 UTC
    Collection stop time: 20:26:36 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_128_128 > srad1-log/vtune/18_128_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_128_128 --  srad1 100 0.5 128 128 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.006773363799 % : READ COMMAND LINE PARAMETERS
0.000844999973 s, 0.817641735077 % : READ IMAGE FROM FILE
0.000268000003 s, 0.259323060513 % : RESIZE IMAGE
0.000216000000 s, 0.209006637335 % : SETUP, MEMORY ALLOCATION
0.000048999998 s, 0.047413542867 % : EXTRACT IMAGE
0.094871997833 s, 91.800361633301 % : COMPUTE
0.000230999998 s, 0.223520979285 % : COMPRESS IMAGE
0.006837000139 s, 6.615641117096 % : SAVE IMAGE INTO FILE
0.000021000000 s, 0.020320089534 % : FREE MEMORY
Total time:
0.103345997632 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-60545-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-60545-quartz1453.sc' filvtune: Executing actions 12 % Loading '60559.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-60559-d050fde3.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.180s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.955
    Average CPU Frequency: 3.088 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 3.2% (1.169 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.1% (0.779 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.174s (96.9%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.090s
        func@0x7f060                libittnotify_collector.so           0.005s
        func@0xcf20                 libittnotify_collector.so           0.005s
        func@0x7efe0                libittnotify_collector.so           0.005s
        _IO_vfprintf                libc-2.17.so                        0.005s
    Parallel Region Time: 0.006s (3.1%)
        Estimated Ideal Time: 0.002s (1.3%)
        OpenMP Potential Gain: 0.003s (1.8%)
Memory Bound: 52.7% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 30.6% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "128" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:26:49 22/04/2021 UTC
    Collection stop time: 20:26:50 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_128_128 > srad1-log/vtune/18_128_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_128_128 --  srad1 100 0.5 128 128 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000005000000 s, 0.009049282409 % : READ COMMAND LINE PARAMETERS
0.000046000001 s, 0.083253398538 % : READ IMAGE FROM FILE
0.000103999999 s, 0.188225075603 % : RESIZE IMAGE
0.000018999999 s, 0.034387271851 % : SETUP, MEMORY ALLOCATION
0.000029999999 s, 0.054295692593 % : EXTRACT IMAGE
0.048983998597 s, 88.654014587402 % : COMPUTE
0.000190000006 s, 0.343872725964 % : COMPRESS IMAGE
0.005849000067 s, 10.585850715637 % : SAVE IMAGE INTO FILE
0.000026000000 s, 0.047056268901 % : FREE MEMORY
Total time:
0.055252999067 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-60651-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-60651-quartz1453.sc' filvtune: Executing actions 12 % Loading '60651-60657.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-60657-b90e4975.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.171s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.060 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.171
        Serial Time (outside parallel regions): 0.149s (87.5%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.021s (12.5%)
            Estimated Ideal Time: 0.015s (8.7%)
            OpenMP Potential Gain: 0.006s (3.8%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.007s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                                               0.005s                        100.0%           5
        Stream image_out.pgm 0xff4f6b54                                                             0.001s                        100.0%           1
        Stream 0x2e4a07a1                                                                           0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                                             0.000s                        100.0%           1
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0xf222eef6                               0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           4
    Spin and Overhead Time: 0.420s (97.7% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.340s                 79.1%
        __kmp_fork_call                 libiomp5.so                  0.040s                  9.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  7.0%
        __kmp_join_barrier              libiomp5.so                  0.010s                  2.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "128" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:27:06 22/04/2021 UTC
    Collection stop time: 20:27:06 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_128_128 > srad1-log/vtune/9_128_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_128_128 --  srad1 100 0.5 128 128 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.013535692357 % : READ COMMAND LINE PARAMETERS
0.000752999971 s, 1.274047017097 % : READ IMAGE FROM FILE
0.000243999995 s, 0.412838637829 % : RESIZE IMAGE
0.000174000001 s, 0.294401317835 % : SETUP, MEMORY ALLOCATION
0.000044000000 s, 0.074446305633 % : EXTRACT IMAGE
0.050992999226 s, 86.278190612793 % : COMPUTE
0.000222000002 s, 0.375615447760 % : COMPRESS IMAGE
0.006649000105 s, 11.249852180481 % : SAVE IMAGE INTO FILE
0.000016000000 s, 0.027071384713 % : FREE MEMORY
Total time:
0.059103000909 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-60739-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-60739-quartz1453.sc' filvtune: Executing actions 12 % Loading '60754.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-60754-f886067d.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.143s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.917
    Average CPU Frequency: 3.073 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 2.9% (1.050 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.0% (0.700 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.137s (95.4%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.045s
        func@0x7efe0                libittnotify_collector.so           0.010s
        check_match.9525            ld-2.17.so                          0.005s
        free                        libc-2.17.so                        0.005s
    Parallel Region Time: 0.007s (4.6%)
        Estimated Ideal Time: 0.003s (2.4%)
        OpenMP Potential Gain: 0.003s (2.3%)
Memory Bound: 93.5% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 39.0% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "128" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:27:20 22/04/2021 UTC
    Collection stop time: 20:27:20 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_128_128 > srad1-log/vtune/9_128_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_128_128 --  srad1 100 0.5 128 128 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.016528014094 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.123960115016 % : READ IMAGE FROM FILE
0.000114000002 s, 0.314032286406 % : RESIZE IMAGE
0.000018999999 s, 0.052338715643 % : SETUP, MEMORY ALLOCATION
0.000040999999 s, 0.112941429019 % : EXTRACT IMAGE
0.029735999182 s, 81.912841796875 % : COMPUTE
0.000184999997 s, 0.509613811970 % : COMPRESS IMAGE
0.006138000172 s, 16.908159255981 % : SAVE IMAGE INTO FILE
0.000018000001 s, 0.049584046006 % : FREE MEMORY
Total time:
0.036302000284 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-60837-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-60837-quartz1453.sc' filvtune: Executing actions 12 % Loading '60837-60842.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-60842-f4e96564.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.131s
    Paused Time: 0s
Effective CPU Utilization: 0.3% (0.236 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.131
        Serial Time (outside parallel regions): 0.108s (82.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.011s
        Parallel Region Time: 0.022s (17.1%)
            Estimated Ideal Time: 0.018s (14.1%)
            OpenMP Potential Gain: 0.004s (3.0%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.003s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x6de01cba                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 0.110s (78.5% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.060s                 42.8%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 21.4%
        __kmp_fork_call                 libiomp5.so                  0.011s                  7.9%
        __kmp_join_call                 libiomp5.so                  0.009s                  6.4%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "128" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:27:37 22/04/2021 UTC
    Collection stop time: 20:27:37 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_128_128 > srad1-log/vtune/4_128_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_128_128 --  srad1 100 0.5 128 128 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.019577134401 % : READ COMMAND LINE PARAMETERS
0.000995000009 s, 2.434906005859 % : READ IMAGE FROM FILE
0.000128000000 s, 0.313234150410 % : RESIZE IMAGE
0.000203000003 s, 0.496769785881 % : SETUP, MEMORY ALLOCATION
0.000046000001 s, 0.112568520010 % : EXTRACT IMAGE
0.032914001495 s, 80.545219421387 % : COMPUTE
0.000190999999 s, 0.467404067516 % : COMPRESS IMAGE
0.006353999954 s, 15.549138069153 % : SAVE IMAGE INTO FILE
0.000024999999 s, 0.061178546399 % : FREE MEMORY
Total time:
0.040863998234 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-60915-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-60915-quartz1453.sc' filvtune: Executing actions 12 % Loading '60929.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-60929-0a055589.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.137s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 3.143 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 1.4% (0.511 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.7% (0.511 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.129s (94.1%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.045s
        [Loop@0x402ec0 in main]     srad1                  0.005s
        _IO_vfscanf                 libc-2.17.so           0.005s
    Parallel Region Time: 0.008s (5.9%)
        Estimated Ideal Time: 0.006s (4.2%)
        OpenMP Potential Gain: 0.002s (1.7%)
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 31.7% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "128" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:27:50 22/04/2021 UTC
    Collection stop time: 20:27:51 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_128_128 > srad1-log/vtune/4_128_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_128_256 --  srad1 100 0.5 128 256 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.003643562319 % : READ COMMAND LINE PARAMETERS
0.000060999999 s, 0.037042882293 % : READ IMAGE FROM FILE
0.000214000000 s, 0.129953727126 % : RESIZE IMAGE
0.000022000000 s, 0.013359729201 % : SETUP, MEMORY ALLOCATION
0.000059999998 s, 0.036435622722 % : EXTRACT IMAGE
0.154113993049 s, 93.587333679199 % : COMPUTE
0.000426000013 s, 0.258692950010 % : COMPRESS IMAGE
0.009544000030 s, 5.795693397522 % : SAVE IMAGE INTO FILE
0.000226999997 s, 0.137848109007 % : FREE MEMORY
Total time:
0.164673998952 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-61009-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-61009-quartz1453.sc' filvtune: Executing actions 12 % Loading '61009-61014.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-61014-0b39eecc.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.398s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.051 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.398
        Serial Time (outside parallel regions): 0.369s (92.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.020s
            __kmp_fork_call                 libiomp5.so               0.020s
            _IO_fprintf                     libc.so.6                 0.010s
        Parallel Region Time: 0.028s (7.1%)
            Estimated Ideal Time: 0.018s (4.6%)
            OpenMP Potential Gain: 0.010s (2.6%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.766s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.764s                        100.0%          30
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Mutex 0x6cb3026d                                              0.000s                        100.0%           5
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 4.040s (99.5% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module           Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  ---------------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                      3.930s                 96.8%
        __kmp_get_global_thread_id_reg  libiomp5.so                      0.030s                  0.7%
        __kmp_fork_call                 libiomp5.so                      0.030s                  0.7%
        __pthread_create_2_1            libpthread.so.0                  0.020s                  0.5%
        __kmp_join_barrier              libiomp5.so                      0.010s                  0.2%
        [Others]                        N/A                              0.020s                  0.5%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "256" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:28:07 22/04/2021 UTC
    Collection stop time: 20:28:08 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_128_256 > srad1-log/vtune/36_128_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_128_256 --  srad1 100 0.5 128 256 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.003302525496 % : READ COMMAND LINE PARAMETERS
0.000818000000 s, 0.385923683643 % : READ IMAGE FROM FILE
0.000410999986 s, 0.193905428052 % : RESIZE IMAGE
0.000376999989 s, 0.177864596248 % : SETUP, MEMORY ALLOCATION
0.000088000001 s, 0.041517462581 % : EXTRACT IMAGE
0.200326994061 s, 94.512145996094 % : COMPUTE
0.000369999994 s, 0.174562066793 % : COMPRESS IMAGE
0.009410999715 s, 4.440009593964 % : SAVE IMAGE INTO FILE
0.000150000007 s, 0.070768401027 % : FREE MEMORY
Total time:
0.211959004402 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-61120-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-61120-quartz1453.sc' filvtune: Executing actions 12 % Loading '61135.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-61135-6c37ef7b.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `srad1'                vtune: Executing actions 22 % Resolving information for `srad1'                vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.304s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.260
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.747 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 4.8% (1.712 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.9% (1.370 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.291s (95.8%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.190s
        func@0x7efe0                libittnotify_collector.so           0.005s
    Parallel Region Time: 0.013s (4.2%)
        Estimated Ideal Time: 0.004s (1.4%)
        OpenMP Potential Gain: 0.009s (2.9%)
Memory Bound: 62.7% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 10.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "256" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:28:22 22/04/2021 UTC
    Collection stop time: 20:28:23 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_128_256 > srad1-log/vtune/36_128_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_128_256 --  srad1 100 0.5 128 256 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.006354384124 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.047657880932 % : READ IMAGE FROM FILE
0.000211000006 s, 0.223462492228 % : RESIZE IMAGE
0.000032000000 s, 0.033890049905 % : SETUP, MEMORY ALLOCATION
0.000059000002 s, 0.062484778464 % : EXTRACT IMAGE
0.083902001381 s, 88.857582092285 % : COMPUTE
0.000390000001 s, 0.413034945726 % : COMPRESS IMAGE
0.009585999884 s, 10.152187347412 % : SAVE IMAGE INTO FILE
0.000192000007 s, 0.203340291977 % : FREE MEMORY
Total time:
0.094423003495 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-61248-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-61248-quartz1453.sc' filvtune: Executing actions 12 % Loading '61248-61254.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-61254-7edb355b.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.247s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.082 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.247
        Serial Time (outside parallel regions): 0.222s (89.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.025s (10.2%)
            Estimated Ideal Time: 0.017s (6.9%)
            OpenMP Potential Gain: 0.008s (3.3%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.299s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.297s                        100.0%          13
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 1.220s (98.4% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  1.120s                 90.3%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  2.4%
        __kmp_fork_call                                                                libiomp5.so                  0.020s                  1.6%
        __kmp_join_barrier                                                             libiomp5.so                  0.020s                  1.6%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_enter  libiomp5.so                  0.020s                  1.6%
        __kmp_join_call                                                                libiomp5.so                  0.010s                  0.8%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "256" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:28:39 22/04/2021 UTC
    Collection stop time: 20:28:40 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_128_256 > srad1-log/vtune/18_128_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_128_256 --  srad1 100 0.5 128 256 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.007658067625 % : READ COMMAND LINE PARAMETERS
0.000889000017 s, 0.851002693176 % : READ IMAGE FROM FILE
0.000475000008 s, 0.454697757959 % : RESIZE IMAGE
0.000384999992 s, 0.368544489145 % : SETUP, MEMORY ALLOCATION
0.000070000002 s, 0.067008085549 % : EXTRACT IMAGE
0.091813996434 s, 87.889724731445 % : COMPUTE
0.000423999998 s, 0.405877560377 % : COMPRESS IMAGE
0.010258000344 s, 9.819557189941 % : SAVE IMAGE INTO FILE
0.000142000004 s, 0.135930702090 % : FREE MEMORY
Total time:
0.104465000331 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-61360-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-61360-quartz1453.sc' filvtune: Executing actions 12 % Loading '61375.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-61375-b7aeeabc.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `srad1'                vtune: Executing actions 22 % Resolving information for `srad1'                vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.181s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.927
    Average CPU Frequency: 2.679 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization
    Effective Logical Core Utilization: 1.6% (1.136 out of 72)
    Serial Time (outside parallel regions): 0.174s (96.3%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.090s
        func@0x7efe0                libittnotify_collector.so           0.005s
        _IO_vfprintf                libc-2.17.so                        0.005s
    Parallel Region Time: 0.007s (3.7%)
        Estimated Ideal Time: 0.004s (2.1%)
        OpenMP Potential Gain: 0.003s (1.6%)
Memory Bound
    Cache Bound: 33.9% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "256" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:28:54 22/04/2021 UTC
    Collection stop time: 20:28:54 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_128_256 > srad1-log/vtune/18_128_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_128_256 --  srad1 100 0.5 128 256 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.010686859488 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.065647847950 % : READ IMAGE FROM FILE
0.000216000000 s, 0.329765945673 % : RESIZE IMAGE
0.000022000000 s, 0.033587273210 % : SETUP, MEMORY ALLOCATION
0.000059000002 s, 0.090074956417 % : EXTRACT IMAGE
0.054792001843 s, 83.650627136230 % : COMPUTE
0.000368000008 s, 0.561823487282 % : COMPRESS IMAGE
0.009792000055 s, 14.949390411377 % : SAVE IMAGE INTO FILE
0.000201999996 s, 0.308392256498 % : FREE MEMORY
Total time:
0.065500997007 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-61467-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-61467-quartz1453.sc' filvtune: Executing actions 12 % Loading '61467-61472.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-61472-b383a7cf.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libpthread.so.0'      vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.194s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.053 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.194
        Serial Time (outside parallel regions): 0.167s (86.2%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.027s (13.8%)
            Estimated Ideal Time: 0.017s (8.9%)
            OpenMP Potential Gain: 0.010s (5.0%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.014s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.012s                        100.0%           5
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 0.510s (98.1% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.410s                 78.8%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  5.8%
        __kmp_join_call                 libiomp5.so                  0.028s                  5.4%
        __kmp_fork_call                 libiomp5.so                  0.022s                  4.2%
        __kmp_join_barrier              libiomp5.so                  0.020s                  3.8%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "256" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:29:10 22/04/2021 UTC
    Collection stop time: 20:29:11 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_128_256 > srad1-log/vtune/9_128_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_128_256 --  srad1 100 0.5 128 256 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.010437012650 % : READ COMMAND LINE PARAMETERS
0.000789000012 s, 1.176400423050 % : READ IMAGE FROM FILE
0.000333000004 s, 0.496503621340 % : RESIZE IMAGE
0.000372999988 s, 0.556143641472 % : SETUP, MEMORY ALLOCATION
0.000068000001 s, 0.101388119161 % : EXTRACT IMAGE
0.054623000324 s, 81.442993164062 % : COMPUTE
0.000426999992 s, 0.636657774448 % : COMPRESS IMAGE
0.010304999538 s, 15.364773750305 % : SAVE IMAGE INTO FILE
0.000144000005 s, 0.214704260230 % : FREE MEMORY
Total time:
0.067069001496 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-61551-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-61551-quartz1453.sc' filvtune: Executing actions 12 % Loading '61565.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-61565-f21b378f.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.158s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.924
    Average CPU Frequency: 2.778 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 2.5% (0.888 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.2% (0.888 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.148s (93.9%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module                     Serial CPU Time
        ----------------------------  -------------------------  ---------------
        [Outside any known module]    [Unknown]                           0.050s
        func@0x7efe0                  libittnotify_collector.so           0.005s
        [Loop@0x402ec0 in main]       srad1                               0.005s
        [Loop@0x48360 in _itoa_word]  libc-2.17.so                        0.005s
        _IO_vfscanf                   libc-2.17.so                        0.005s
    Parallel Region Time: 0.010s (6.1%)
        Estimated Ideal Time: 0.006s (3.8%)
        OpenMP Potential Gain: 0.004s (2.3%)
Memory Bound: 34.2% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 28.1% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 28.1% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "256" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:29:25 22/04/2021 UTC
    Collection stop time: 20:29:25 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_128_256 > srad1-log/vtune/9_128_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_128_256 --  srad1 100 0.5 128 256 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.011928192340 % : READ COMMAND LINE PARAMETERS
0.000044000000 s, 0.087473407388 % : READ IMAGE FROM FILE
0.000216999993 s, 0.431402951479 % : RESIZE IMAGE
0.000023000001 s, 0.045724738389 % : SETUP, MEMORY ALLOCATION
0.000061999999 s, 0.123257979751 % : EXTRACT IMAGE
0.039859000593 s, 79.240974426270 % : COMPUTE
0.000342999992 s, 0.681894958019 % : COMPRESS IMAGE
0.009595000185 s, 19.075166702271 % : SAVE IMAGE INTO FILE
0.000151999993 s, 0.302180886269 % : FREE MEMORY
Total time:
0.050301000476 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-61653-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-61653-quartz1453.sc' filvtune: Executing actions 12 % Loading '61653-61658.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-61658-0a327d80.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.159s
    Paused Time: 0s
Effective CPU Utilization: 0.4% (0.322 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.159
        Serial Time (outside parallel regions): 0.128s (80.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad1                 0.010s
            _IO_fprintf                     libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.031s (19.4%)
            Estimated Ideal Time: 0.026s (16.1%)
            OpenMP Potential Gain: 0.005s (3.4%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.002s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x6de01cba                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 0.150s (75.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.100s                 50.0%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 15.0%
        __kmp_fork_call                 libiomp5.so                  0.010s                  5.0%
        __kmp_join_call                 libiomp5.so                  0.010s                  5.0%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "256" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:29:42 22/04/2021 UTC
    Collection stop time: 20:29:42 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_128_256 > srad1-log/vtune/4_128_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_128_256 --  srad1 100 0.5 128 256 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000001000000 s, 0.002043151297 % : SETUP VARIABLES
0.000007000000 s, 0.014302059077 % : READ COMMAND LINE PARAMETERS
0.000816999993 s, 1.669254660606 % : READ IMAGE FROM FILE
0.000321000000 s, 0.655851602554 % : RESIZE IMAGE
0.000391000009 s, 0.798872232437 % : SETUP, MEMORY ALLOCATION
0.000070000002 s, 0.143020600080 % : EXTRACT IMAGE
0.036704000086 s, 74.991828918457 % : COMPUTE
0.000356000004 s, 0.727361857891 % : COMPRESS IMAGE
0.010033000261 s, 20.498937606812 % : SAVE IMAGE INTO FILE
0.000243999995 s, 0.498528927565 % : FREE MEMORY
Total time:
0.048944000155 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-61731-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-61731-quartz1453.sc' filvtune: Executing actions 12 % Loading '61746.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-61746-3d5d76ac.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 20 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.125s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.902
    Average CPU Frequency: 2.982 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 2.2% (0.804 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.9% (0.643 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.110s (88.3%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.035s
        [Loop@0x4035c1 in main]     srad1                               0.005s
        func@0x7efe0                libittnotify_collector.so           0.005s
    Parallel Region Time: 0.015s (11.7%)
        Estimated Ideal Time: 0.011s (9.1%)
        OpenMP Potential Gain: 0.003s (2.6%)
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 23.2% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "256" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:29:56 22/04/2021 UTC
    Collection stop time: 20:29:56 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_128_256 > srad1-log/vtune/4_128_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_128_512 --  srad1 100 0.5 128 512 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.001862906036 % : READ COMMAND LINE PARAMETERS
0.000048000002 s, 0.012774212286 % : READ IMAGE FROM FILE
0.000425000006 s, 0.113105013967 % : RESIZE IMAGE
0.000024999999 s, 0.006653236225 % : SETUP, MEMORY ALLOCATION
0.000100999998 s, 0.026879072189 % : EXTRACT IMAGE
0.357015013695 s, 95.012199401855 % : COMPUTE
0.000821000023 s, 0.218492284417 % : COMPRESS IMAGE
0.017036000267 s, 4.533781051636 % : SAVE IMAGE INTO FILE
0.000279000000 s, 0.074250109494 % : FREE MEMORY
Total time:
0.375757008791 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-61830-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-61830-quartz1453.sc' filvtune: Executing actions 12 % Loading '61830-61835.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-61835-ddcc89a6.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.736s
    Paused Time: 0s
Effective CPU Utilization: 0.3% (0.232 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.736
        Serial Time (outside parallel regions): 0.706s (95.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad1                 0.020s
            _IO_fprintf                     libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.030s (4.1%)
            Estimated Ideal Time: 0.018s (2.4%)
            OpenMP Potential Gain: 0.012s (1.6%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 3.715s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 3.711s                        100.0%          32
        Mutex 0x6cb3026d                                              0.002s                        100.0%           4
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 4.540s (96.4% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  4.450s                 94.5%
        __kmp_join_barrier                                                             libiomp5.so                  0.030s                  0.6%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  0.6%
        __kmp_join_call                                                                libiomp5.so                  0.010s                  0.2%
        __kmp_fork_call                                                                libiomp5.so                  0.010s                  0.2%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_enter  libiomp5.so                  0.010s                  0.2%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "512" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:30:16 22/04/2021 UTC
    Collection stop time: 20:30:17 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_128_512 > srad1-log/vtune/36_128_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_128_512 --  srad1 100 0.5 128 512 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.003288561944 % : READ COMMAND LINE PARAMETERS
0.000799999980 s, 0.375835657120 % : READ IMAGE FROM FILE
0.000511999999 s, 0.240534827113 % : RESIZE IMAGE
0.000367000001 s, 0.172414600849 % : SETUP, MEMORY ALLOCATION
0.000090000001 s, 0.042281508446 % : EXTRACT IMAGE
0.182787001133 s, 85.872337341309 % : COMPUTE
0.001372999977 s, 0.645027935505 % : COMPRESS IMAGE
0.026628000662 s, 12.509690284729 % : SAVE IMAGE INTO FILE
0.000295000005 s, 0.138589397073 % : FREE MEMORY
Total time:
0.212859004736 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-61946-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-61946-quartz1453.sc' filvtune: Executing actions 12 % Loading '61961.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-61961-7ee4ef59.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.306s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.201
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.704 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 6.3% (2.274 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.4% (1.705 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.296s (96.7%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                                Module        Serial CPU Time
        --------------------------------------  ------------  ---------------
        [Outside any known module]              [Unknown]              0.175s
        _IO_vfprintf                            libc-2.17.so           0.010s
        __svml_log2_l9                          srad1                  0.005s
        _IO_file_xsputn                         libc-2.17.so           0.005s
        [Loop at line 1867 in __kmp_fork_call]  libiomp5.so            0.005s
    Parallel Region Time: 0.010s (3.3%)
        Estimated Ideal Time: 0.005s (1.6%)
        OpenMP Potential Gain: 0.005s (1.7%)
Memory Bound: 60.9% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 10.4% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "512" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:30:31 22/04/2021 UTC
    Collection stop time: 20:30:32 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_128_512 > srad1-log/vtune/36_128_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_128_512 --  srad1 100 0.5 128 512 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.005312038120 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.038069605827 % : READ IMAGE FROM FILE
0.000392999995 s, 0.347938477993 % : RESIZE IMAGE
0.000023000001 s, 0.020362813026 % : SETUP, MEMORY ALLOCATION
0.000096999996 s, 0.085877947509 % : EXTRACT IMAGE
0.093175999820 s, 82.492408752441 % : COMPUTE
0.000816999993 s, 0.723322510719 % : COMPRESS IMAGE
0.018098000437 s, 16.022876739502 % : SAVE IMAGE INTO FILE
0.000297999999 s, 0.263831228018 % : FREE MEMORY
Total time:
0.112951003015 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-62075-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-62075-quartz1453.sc' filvtune: Executing actions 12 % Loading '62075-62080.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-62080-9116d77b.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.295s
    Paused Time: 0s
Effective CPU Utilization: 0.3% (0.242 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.295
        Serial Time (outside parallel regions): 0.262s (88.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.010s
            main                            srad1                 0.010s
        Parallel Region Time: 0.033s (11.1%)
            Estimated Ideal Time: 0.023s (7.9%)
            OpenMP Potential Gain: 0.009s (3.2%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.300s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                                               0.297s                        100.0%          13
        Stream image_out.pgm 0xff4f6b54                                                             0.002s                        100.0%           1
        Stream 0x2e4a07a1                                                                           0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                                             0.000s                        100.0%           1
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0xf222eef6                               0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           4
    Spin and Overhead Time: 1.480s (95.5% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  1.420s                 91.6%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  1.9%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_enter  libiomp5.so                  0.010s                  0.6%
        __kmp_join_call                                                                libiomp5.so                  0.010s                  0.6%
        __kmp_fork_call                                                                libiomp5.so                  0.010s                  0.6%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "512" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:30:53 22/04/2021 UTC
    Collection stop time: 20:30:53 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_128_512 > srad1-log/vtune/18_128_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_128_512 --  srad1 100 0.5 128 512 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.006601912901 % : READ COMMAND LINE PARAMETERS
0.000748999999 s, 0.618104100227 % : READ IMAGE FROM FILE
0.000584000023 s, 0.481939643621 % : RESIZE IMAGE
0.000449000014 s, 0.370532363653 % : SETUP, MEMORY ALLOCATION
0.000125999999 s, 0.103980131447 % : EXTRACT IMAGE
0.099784001708 s, 82.345657348633 % : COMPUTE
0.000829999975 s, 0.684948444366 % : COMPRESS IMAGE
0.018402999267 s, 15.186876296997 % : SAVE IMAGE INTO FILE
0.000243999995 s, 0.201358348131 % : FREE MEMORY
Total time:
0.121177002788 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-62168-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-62168-quartz1453.sc' filvtune: Executing actions 12 % Loading '62182.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-62182-013b2d62.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.208s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.906
    Average CPU Frequency: 2.517 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 7.0% (2.531 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.0% (1.446 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.196s (94.4%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module        Serial CPU Time
        ----------------------------  ------------  ---------------
        [Outside any known module]    [Unknown]              0.095s
        [Loop@0x4035c1 in main]       srad1                  0.005s
        [Loop at line 194 in memcpy]  ld-2.17.so             0.005s
        mempcpy                       ld-2.17.so             0.005s
        _IO_vfprintf                  libc-2.17.so           0.005s
    Parallel Region Time: 0.012s (5.6%)
        Estimated Ideal Time: 0.006s (2.9%)
        OpenMP Potential Gain: 0.006s (2.7%)
Memory Bound: 89.4% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 19.8% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "512" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:31:08 22/04/2021 UTC
    Collection stop time: 20:31:08 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_128_512 > srad1-log/vtune/18_128_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_128_512 --  srad1 100 0.5 128 512 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.008805695921 % : READ COMMAND LINE PARAMETERS
0.000048999998 s, 0.061639871448 % : READ IMAGE FROM FILE
0.000446999999 s, 0.562306582928 % : RESIZE IMAGE
0.000024999999 s, 0.031448915601 % : SETUP, MEMORY ALLOCATION
0.000098999997 s, 0.124537698925 % : EXTRACT IMAGE
0.060081999749 s, 75.580551147461 % : COMPUTE
0.000709999993 s, 0.893149137497 % : COMPRESS IMAGE
0.017751999199 s, 22.331245422363 % : SAVE IMAGE INTO FILE
0.000322999986 s, 0.406319975853 % : FREE MEMORY
Total time:
0.079493999481 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-62275-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-62275-quartz1453.sc' filvtune: Executing actions 12 % Loading '62275-62280.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-62280-35e03750.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.319s
    Paused Time: 0s
Effective CPU Utilization: 0.3% (0.226 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.319
        Serial Time (outside parallel regions): 0.284s (89.0%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad1                 0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.035s (11.0%)
            Estimated Ideal Time: 0.025s (8.0%)
            OpenMP Potential Gain: 0.010s (3.0%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.025s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.022s                        100.0%           4
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 1.010s (93.5% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  0.920s                 85.2%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  2.8%
        __kmp_join_call                                                                libiomp5.so                  0.020s                  1.9%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_enter  libiomp5.so                  0.010s                  0.9%
        __kmp_join_barrier                                                             libiomp5.so                  0.010s                  0.9%
        [Others]                                                                       N/A                          0.020s                  1.9%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "512" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:31:26 22/04/2021 UTC
    Collection stop time: 20:31:26 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_128_512 > srad1-log/vtune/9_128_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_128_512 --  srad1 100 0.5 128 512 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.007750650402 % : READ COMMAND LINE PARAMETERS
0.000775999972 s, 0.859214901924 % : READ IMAGE FROM FILE
0.000548999989 s, 0.607872426510 % : RESIZE IMAGE
0.000364000007 s, 0.403033852577 % : SETUP, MEMORY ALLOCATION
0.000136000002 s, 0.150584071875 % : EXTRACT IMAGE
0.069058001041 s, 76.463493347168 % : COMPUTE
0.000814999978 s, 0.902397155762 % : COMPRESS IMAGE
0.018394000828 s, 20.366495132446 % : SAVE IMAGE INTO FILE
0.000216000000 s, 0.239162936807 % : FREE MEMORY
Total time:
0.090314999223 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-62359-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-62359-quartz1453.sc' filvtune: Executing actions 12 % Loading '62374.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-62374-8717cfa6.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.210s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.775 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 4.2% (1.501 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.4% (1.001 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.196s (93.0%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.065s
        _itoa_word                  libc-2.17.so           0.005s
        _IO_vfscanf                 libc-2.17.so           0.005s
    Parallel Region Time: 0.015s (7.0%)
        Estimated Ideal Time: 0.011s (5.2%)
        OpenMP Potential Gain: 0.004s (1.8%)
Memory Bound: 29.0% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 26.2% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "512" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:31:40 22/04/2021 UTC
    Collection stop time: 20:31:40 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_128_512 > srad1-log/vtune/9_128_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_128_512 --  srad1 100 0.5 128 512 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.005215532146 % : READ COMMAND LINE PARAMETERS
0.000053000000 s, 0.046070531011 % : READ IMAGE FROM FILE
0.000407999993 s, 0.354656159878 % : RESIZE IMAGE
0.000023000001 s, 0.019992871210 % : SETUP, MEMORY ALLOCATION
0.000099999997 s, 0.086925528944 % : EXTRACT IMAGE
0.074096001685 s, 64.408340454102 % : COMPUTE
0.000673000002 s, 0.585008859634 % : COMPRESS IMAGE
0.039390999824 s, 34.240837097168 % : SAVE IMAGE INTO FILE
0.000291000004 s, 0.252953290939 % : FREE MEMORY
Total time:
0.115041002631 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-62458-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-62458-quartz1453.sc' filvtune: Executing actions 12 % Loading '62458-62463.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-62463-9ff0241c.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.312s
    Paused Time: 0s
Effective CPU Utilization: 0.5% (0.327 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.312
        Serial Time (outside parallel regions): 0.249s (80.0%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.062s (20.0%)
            Estimated Ideal Time: 0.050s (15.9%)
            OpenMP Potential Gain: 0.013s (4.1%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.017s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                                                             0.016s                        100.0%           1
        Stream 0x2e4a07a1                                                                           0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                                             0.000s                        100.0%           1
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0xf222eef6                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                                                             0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           3
    Spin and Overhead Time: 0.280s (73.7% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                Module       Spin and Overhead Time  (% from CPU Time)(%)
        ----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                      libiomp5.so                  0.200s                 52.6%
        __kmp_get_global_thread_id_reg                                          libiomp5.so                  0.030s                  7.9%
        __kmp_join_call                                                         libiomp5.so                  0.030s                  7.9%
        _INTERNAL_23_______src_kmp_sched_cpp_20354e55::__kmp_itt_metadata_loop  libiomp5.so                  0.010s                  2.6%
        __kmp_fork_call                                                         libiomp5.so                  0.010s                  2.6%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "512" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:31:58 22/04/2021 UTC
    Collection stop time: 20:31:58 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_128_512 > srad1-log/vtune/4_128_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_128_512 --  srad1 100 0.5 128 512 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.009919510223 % : READ COMMAND LINE PARAMETERS
0.000820000016 s, 1.161999821663 % : READ IMAGE FROM FILE
0.000545000017 s, 0.772304713726 % : RESIZE IMAGE
0.000403999991 s, 0.572497427464 % : SETUP, MEMORY ALLOCATION
0.000123999998 s, 0.175717040896 % : EXTRACT IMAGE
0.050204999745 s, 71.144142150879 % : COMPUTE
0.000633999996 s, 0.898424267769 % : COMPRESS IMAGE
0.017501000315 s, 24.800193786621 % : SAVE IMAGE INTO FILE
0.000327999995 s, 0.464799910784 % : FREE MEMORY
Total time:
0.070568002760 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-62537-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-62537-quartz1453.sc' filvtune: Executing actions 12 % Loading '62552.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-62552-3d3909a2.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.154s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.877
    Average CPU Frequency: 3.062 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 4.2% (1.513 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.4% (1.008 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.130s (84.3%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.030s
        [Loop@0x4035c1 in main]     srad1                               0.005s
        func@0x7efe0                libittnotify_collector.so           0.005s
        _IO_vfprintf                libc-2.17.so                        0.005s
        free                        libc-2.17.so                        0.005s
    Parallel Region Time: 0.024s (15.7%)
        Estimated Ideal Time: 0.020s (13.2%)
        OpenMP Potential Gain: 0.004s (2.5%)
Memory Bound: 87.5% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 15.0% of Clockticks
    DRAM Bound: 15.0% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "128" "512" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:32:13 22/04/2021 UTC
    Collection stop time: 20:32:13 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_128_512 > srad1-log/vtune/4_128_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_256_64 --  srad1 100 0.5 256 64 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.003880832344 % : READ COMMAND LINE PARAMETERS
0.000044000000 s, 0.028459439054 % : READ IMAGE FROM FILE
0.000072000003 s, 0.046569991857 % : RESIZE IMAGE
0.000026000000 s, 0.016816942021 % : SETUP, MEMORY ALLOCATION
0.000037999998 s, 0.024578606710 % : EXTRACT IMAGE
0.148219004273 s, 95.868858337402 % : COMPUTE
0.000218000001 s, 0.141003593802 % : COMPRESS IMAGE
0.005954000168 s, 3.851079463959 % : SAVE IMAGE INTO FILE
0.000029000001 s, 0.018757358193 % : FREE MEMORY
Total time:
0.154605999589 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-62632-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-62632-quartz1453.sc' filvtune: Executing actions 12 % Loading '62632-62637.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-62637-81c79ec2.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.390s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.026 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.390
        Serial Time (outside parallel regions): 0.359s (92.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_join_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.031s (7.9%)
            Estimated Ideal Time: 0.021s (5.3%)
            OpenMP Potential Gain: 0.010s (2.6%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.697s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.695s                        100.0%          31
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Mutex 0x6cb3026d                                              0.000s                        100.0%           5
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 3.570s (99.7% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  3.470s                 96.9%
        __kmp_join_barrier              libiomp5.so                  0.040s                  1.1%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.8%
        __kmp_join_call                 libiomp5.so                  0.020s                  0.6%
        __kmp_fork_call                 libiomp5.so                  0.010s                  0.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "64" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:32:31 22/04/2021 UTC
    Collection stop time: 20:32:32 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_256_64 > srad1-log/vtune/36_256_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_256_64 --  srad1 100 0.5 256 64 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.003345760284 % : READ COMMAND LINE PARAMETERS
0.000855999999 s, 0.409138709307 % : READ IMAGE FROM FILE
0.000079999998 s, 0.038237262517 % : RESIZE IMAGE
0.000216999993 s, 0.103718578815 % : SETUP, MEMORY ALLOCATION
0.000044000000 s, 0.021030494943 % : EXTRACT IMAGE
0.196539998055 s, 93.939392089844 % : COMPUTE
0.000358999998 s, 0.171589717269 % : COMPRESS IMAGE
0.011086000130 s, 5.298728466034 % : SAVE IMAGE INTO FILE
0.000031000000 s, 0.014816938899 % : FREE MEMORY
Total time:
0.209220007062 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-62743-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-62743-quartz1453.sc' filvtune: Executing actions 12 % Loading '62758.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-62758-09962978.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.352s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.179
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.769 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 5.1% (1.849 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.3% (0.925 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.342s (97.2%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.185s
        [Loop@0x402006 in main]     srad1                  0.005s
        _IO_old_init                libc-2.17.so           0.005s
        strchrnul                   libc-2.17.so           0.005s
    Parallel Region Time: 0.010s (2.8%)
        Estimated Ideal Time: 0.003s (0.8%)
        OpenMP Potential Gain: 0.007s (2.0%)
Memory Bound: 64.4% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 14.9% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "64" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:32:47 22/04/2021 UTC
    Collection stop time: 20:32:47 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_256_64 > srad1-log/vtune/36_256_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_256_64 --  srad1 100 0.5 256 64 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.007152820006 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.053646147251 % : READ IMAGE FROM FILE
0.000080999998 s, 0.096563071012 % : RESIZE IMAGE
0.000022000000 s, 0.026227006689 % : SETUP, MEMORY ALLOCATION
0.000043000000 s, 0.051261875778 % : EXTRACT IMAGE
0.076996996999 s, 91.790946960449 % : COMPUTE
0.000218000001 s, 0.259885787964 % : COMPRESS IMAGE
0.006448000204 s, 7.686897277832 % : SAVE IMAGE INTO FILE
0.000023000001 s, 0.027419144288 % : FREE MEMORY
Total time:
0.083883002400 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-62870-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-62870-quartz1453.sc' filvtune: Executing actions 12 % Loading '62870-62875.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-62875-7731af8e.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.255s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.120 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.255
        Serial Time (outside parallel regions): 0.233s (91.4%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.022s (8.6%)
            Estimated Ideal Time: 0.013s (5.3%)
            OpenMP Potential Gain: 0.008s (3.3%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.253s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.251s                        100.0%          13
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 1.260s (97.7% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  1.200s                 93.0%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  2.3%
        __kmp_fork_call                                                                libiomp5.so                  0.020s                  1.6%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_leave  libiomp5.so                  0.010s                  0.8%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "64" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:33:06 22/04/2021 UTC
    Collection stop time: 20:33:06 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_256_64 > srad1-log/vtune/18_256_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_256_64 --  srad1 100 0.5 256 64 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.006667389069 % : READ COMMAND LINE PARAMETERS
0.000943000021 s, 0.785918414593 % : READ IMAGE FROM FILE
0.000178999995 s, 0.149182826281 % : RESIZE IMAGE
0.000182999996 s, 0.152516528964 % : SETUP, MEMORY ALLOCATION
0.000048000002 s, 0.040004331619 % : EXTRACT IMAGE
0.111775003374 s, 93.155929565430 % : COMPUTE
0.000246999989 s, 0.205855637789 % : COMPRESS IMAGE
0.006583999842 s, 5.487260818481 % : SAVE IMAGE INTO FILE
0.000019999999 s, 0.016668472439 % : FREE MEMORY
Total time:
0.119987003505 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-62963-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-62963-quartz1453.sc' filvtune: Executing actions 12 % Loading '62977.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-62977-c5362978.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.225s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 3.125 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization
    Effective Logical Core Utilization: 1.0% (0.736 out of 72)
    Serial Time (outside parallel regions): 0.219s (97.4%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.110s
        func@0x7efe0                libittnotify_collector.so           0.005s
        [Loop@0x4035c1 in main]     srad1                               0.005s
        _IO_vfprintf                libc-2.17.so                        0.005s
    Parallel Region Time: 0.006s (2.6%)
        Estimated Ideal Time: 0.003s (1.2%)
        OpenMP Potential Gain: 0.003s (1.4%)
Memory Bound
    Cache Bound: 19.5% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "64" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:33:20 22/04/2021 UTC
    Collection stop time: 20:33:20 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_256_64 > srad1-log/vtune/18_256_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_256_64 --  srad1 100 0.5 256 64 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000009000000 s, 0.012144765817 % : READ COMMAND LINE PARAMETERS
0.000053000000 s, 0.071519173682 % : READ IMAGE FROM FILE
0.000066000001 s, 0.089061617851 % : RESIZE IMAGE
0.000018000001 s, 0.024289531633 % : SETUP, MEMORY ALLOCATION
0.000045000001 s, 0.060723826289 % : EXTRACT IMAGE
0.067896001041 s, 91.620109558105 % : COMPUTE
0.000195000001 s, 0.263136565685 % : COMPRESS IMAGE
0.005799999926 s, 7.826627254486 % : SAVE IMAGE INTO FILE
0.000024000001 s, 0.032386042178 % : FREE MEMORY
Total time:
0.074106000364 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-63071-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-63071-quartz1453.sc' filvtune: Executing actions 12 % Loading '63071-63076.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-63076-c76073fa.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 42 % Precomputing frequently used data                vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 43 % Updating precomputed scalar metrics              vtune: Executing actions 43 % Discarding redundant overtime data               vtune: Executing actions 45 % Discarding redundant overtime data               vtune: Executing actions 45 % Saving the result                                vtune: Executing actions 47 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.185s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.110 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.185
        Serial Time (outside parallel regions): 0.162s (87.5%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.023s (12.5%)
            Estimated Ideal Time: 0.014s (7.7%)
            OpenMP Potential Gain: 0.009s (4.8%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.024s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.023s                        100.0%           5
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 0.410s (95.4% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                         Module       Spin and Overhead Time  (% from CPU Time)(%)
        -------------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                               libiomp5.so                  0.319s                 74.2%
        __kmp_get_global_thread_id_reg                                                   libiomp5.so                  0.030s                  7.0%
        __kmp_fork_call                                                                  libiomp5.so                  0.030s                  7.0%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name          libiomp5.so                  0.011s                  2.5%
        _INTERNAL_23_______src_kmp_sched_cpp_20354e55::__kmp_for_static_init<long long>  libiomp5.so                  0.010s                  2.3%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_enter    libiomp5.so                  0.010s                  2.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "64" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:33:37 22/04/2021 UTC
    Collection stop time: 20:33:37 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_256_64 > srad1-log/vtune/9_256_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_256_64 --  srad1 100 0.5 256 64 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.011510507204 % : READ COMMAND LINE PARAMETERS
0.001407000003 s, 2.313611984253 % : READ IMAGE FROM FILE
0.000174000001 s, 0.286118328571 % : RESIZE IMAGE
0.000224000003 s, 0.368336230516 % : SETUP, MEMORY ALLOCATION
0.000038999999 s, 0.064129970968 % : EXTRACT IMAGE
0.051334001124 s, 84.411483764648 % : COMPUTE
0.000205999997 s, 0.338737785816 % : COMPRESS IMAGE
0.007408000063 s, 12.181406021118 % : SAVE IMAGE INTO FILE
0.000015000000 s, 0.024665374309 % : FREE MEMORY
Total time:
0.060814000666 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-63155-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-63155-quartz1453.sc' filvtune: Executing actions 12 % Loading '63169.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-63169-f7c7bcb0.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `srad1'                vtune: Executing actions 22 % Resolving information for `srad1'                vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.148s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.968 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 1.6% (0.577 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.8% (0.577 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.141s (95.3%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.055s
        func@0x7efe0                libittnotify_collector.so           0.005s
    Parallel Region Time: 0.007s (4.7%)
        Estimated Ideal Time: 0.004s (2.4%)
        OpenMP Potential Gain: 0.003s (2.3%)
Memory Bound: 47.9% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 33.6% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 16.8% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 0.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "64" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:33:51 22/04/2021 UTC
    Collection stop time: 20:33:51 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_256_64 > srad1-log/vtune/9_256_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_256_64 --  srad1 100 0.5 256 64 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.014710568823 % : READ COMMAND LINE PARAMETERS
0.000054000000 s, 0.132395133376 % : READ IMAGE FROM FILE
0.000081999999 s, 0.201044440269 % : RESIZE IMAGE
0.000022000000 s, 0.053938757628 % : SETUP, MEMORY ALLOCATION
0.000040999999 s, 0.100522220135 % : EXTRACT IMAGE
0.034095998853 s, 83.595260620117 % : COMPUTE
0.000182000003 s, 0.446220636368 % : COMPRESS IMAGE
0.006285999902 s, 15.411773681641 % : SAVE IMAGE INTO FILE
0.000018000001 s, 0.044131711125 % : FREE MEMORY
Total time:
0.040787000209 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-63253-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-63253-quartz1453.sc' filvtune: Executing actions 12 % Loading '63253-63258.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-63258-0789804a.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.146s
    Paused Time: 0s
Effective CPU Utilization: 0.4% (0.281 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.146
        Serial Time (outside parallel regions): 0.121s (82.7%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.012s
        Parallel Region Time: 0.025s (17.3%)
            Estimated Ideal Time: 0.020s (13.8%)
            OpenMP Potential Gain: 0.005s (3.5%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.002s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                     Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        ----------------------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                                              0.002s                        100.0%           1
        Stream 0x2e4a07a1                                                            0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                              0.000s                        100.0%           1
        Stream ../../../data/srad/image.pgm 0x5df7c973                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                                              0.000s                        100.0%           1
        [Others]                                                                     0.000s                        100.0%           3
    Spin and Overhead Time: 0.120s (75.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.070s                 43.7%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 18.8%
        __kmp_fork_call                 libiomp5.so                  0.012s                  7.5%
        __kmp_join_call                 libiomp5.so                  0.008s                  5.0%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "64" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:34:08 22/04/2021 UTC
    Collection stop time: 20:34:09 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_256_64 > srad1-log/vtune/4_256_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_256_64 --  srad1 100 0.5 256 64 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.019734987989 % : READ COMMAND LINE PARAMETERS
0.000855999999 s, 2.413306951523 % : READ IMAGE FROM FILE
0.000086000000 s, 0.242458418012 % : RESIZE IMAGE
0.000163999997 s, 0.462362527847 % : SETUP, MEMORY ALLOCATION
0.000045000001 s, 0.126867771149 % : EXTRACT IMAGE
0.027646999806 s, 77.944740295410 % : COMPUTE
0.000186000005 s, 0.524386823177 % : COMPRESS IMAGE
0.006465000100 s, 18.226669311523 % : SAVE IMAGE INTO FILE
0.000014000000 s, 0.039469975978 % : FREE MEMORY
Total time:
0.035470001400 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-63331-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-63331-quartz1453.sc' filvtune: Executing actions 12 % Loading '63346.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-63346-5d1c8426.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.105s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.893
    Average CPU Frequency: 3.274 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 1.7% (0.622 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.9% (0.622 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.097s (92.7%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.035s
        func@0x7efe0                libittnotify_collector.so           0.005s
        [Loop@0x4035c1 in main]     srad1                               0.005s
    Parallel Region Time: 0.008s (7.3%)
        Estimated Ideal Time: 0.005s (4.8%)
        OpenMP Potential Gain: 0.003s (2.4%)
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 34.3% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "64" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:34:23 22/04/2021 UTC
    Collection stop time: 20:34:23 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_256_64 > srad1-log/vtune/4_256_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_256_128 --  srad1 100 0.5 256 128 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.003667010926 % : READ COMMAND LINE PARAMETERS
0.000058000001 s, 0.035447772592 % : READ IMAGE FROM FILE
0.000188999998 s, 0.115510843694 % : RESIZE IMAGE
0.000024000001 s, 0.014668043703 % : SETUP, MEMORY ALLOCATION
0.000068000001 s, 0.041559457779 % : EXTRACT IMAGE
0.152928993106 s, 93.465385437012 % : COMPUTE
0.000418999989 s, 0.256079584360 % : COMPRESS IMAGE
0.009704000317 s, 5.930778980255 % : SAVE IMAGE INTO FILE
0.000224000003 s, 0.136901736259 % : FREE MEMORY
Total time:
0.163620993495 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-63426-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-63426-quartz1453.sc' filvtune: Executing actions 12 % Loading '63426-63431.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-63431-9498d8f4.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' 
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 20 % Resolving information for `libpthread.so.0'      vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.397s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.127 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.397
        Serial Time (outside parallel regions): 0.367s (92.4%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.040s
            main                            srad1                 0.010s
        Parallel Region Time: 0.030s (7.6%)
            Estimated Ideal Time: 0.017s (4.2%)
            OpenMP Potential Gain: 0.013s (3.3%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.663s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.659s                        100.0%          32
        Mutex 0x6cb3026d                                              0.002s                        100.0%           7
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 3.890s (98.7% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  3.800s                 96.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.040s                  1.0%
        __kmp_join_barrier              libiomp5.so                  0.030s                  0.8%
        __kmp_fork_call                 libiomp5.so                  0.010s                  0.3%
        __kmp_join_call                 libiomp5.so                  0.010s                  0.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "128" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:34:41 22/04/2021 UTC
    Collection stop time: 20:34:41 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_256_128 > srad1-log/vtune/36_256_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_256_128 --  srad1 100 0.5 256 128 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.003645415651 % : READ COMMAND LINE PARAMETERS
0.000974999974 s, 0.507754325867 % : READ IMAGE FROM FILE
0.000261000008 s, 0.135921925306 % : RESIZE IMAGE
0.000390000001 s, 0.203101739287 % : SETUP, MEMORY ALLOCATION
0.000077999997 s, 0.040620345622 % : EXTRACT IMAGE
0.179897993803 s, 93.686141967773 % : COMPUTE
0.000436000002 s, 0.227057307959 % : COMPRESS IMAGE
0.009806999937 s, 5.107227325439 % : SAVE IMAGE INTO FILE
0.000169999999 s, 0.088531523943 % : FREE MEMORY
Total time:
0.192021995783 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-63538-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-63538-quartz1453.sc' filvtune: Executing actions 12 % Loading '63553.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-63553-ff8dc866.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 21 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `srad1'                vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.286s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.016
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.877 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 4.4% (1.601 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.5% (1.068 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.280s (97.7%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module              Serial CPU Time
        --------------------------  ------------------  ---------------
        [Outside any known module]  [Unknown]                    0.170s
        __read                      libpthread-2.17.so           0.005s
        strchrnul                   libc-2.17.so                 0.005s
    Parallel Region Time: 0.007s (2.3%)
        Estimated Ideal Time: 0.003s (1.1%)
        OpenMP Potential Gain: 0.003s (1.2%)
Memory Bound: 40.5% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 8.8% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "128" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:34:56 22/04/2021 UTC
    Collection stop time: 20:34:56 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_256_128 > srad1-log/vtune/36_256_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_256_128 --  srad1 100 0.5 256 128 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.001778273145 % : READ COMMAND LINE PARAMETERS
0.000049999999 s, 0.014818943106 % : READ IMAGE FROM FILE
0.000167999999 s, 0.049791648984 % : RESIZE IMAGE
0.000023000001 s, 0.006816713605 % : SETUP, MEMORY ALLOCATION
0.000061999999 s, 0.018375487998 % : EXTRACT IMAGE
0.313093990088 s, 92.794433593750 % : COMPUTE
0.000381999998 s, 0.113216720521 % : COMPRESS IMAGE
0.023414999247 s, 6.939710617065 % : SAVE IMAGE INTO FILE
0.000205999997 s, 0.061054039747 % : FREE MEMORY
Total time:
0.337406009436 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-63667-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-63667-quartz1453.sc' filvtune: Executing actions 12 % Loading '63667-63672.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-63672-c9dcd9a0.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' 
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.932s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.068 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.932
        Serial Time (outside parallel regions): 0.851s (91.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.010s
            _intel_fast_memset              libiomp5.so           0.010s
        Parallel Region Time: 0.081s (8.7%)
            Estimated Ideal Time: 0.055s (5.9%)
            OpenMP Potential Gain: 0.026s (2.8%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 2.338s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 2.324s                        100.0%          23
        Stream image_out.pgm 0xff4f6b54                               0.011s                        100.0%           1
        Mutex 0x6cb3026d                                              0.002s                        100.0%           2
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 3.520s (98.3% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  3.400s                 95.0%
        __kmp_join_barrier                                                             libiomp5.so                  0.040s                  1.1%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  0.8%
        __kmp_join_call                                                                libiomp5.so                  0.030s                  0.8%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_leave  libiomp5.so                  0.010s                  0.3%
        __kmp_fork_call                                                                libiomp5.so                  0.010s                  0.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "128" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:35:16 22/04/2021 UTC
    Collection stop time: 20:35:17 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_256_128 > srad1-log/vtune/18_256_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_256_128 --  srad1 100 0.5 256 128 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.007104227319 % : READ COMMAND LINE PARAMETERS
0.000985000050 s, 0.874708056450 % : READ IMAGE FROM FILE
0.000307999988 s, 0.273512780666 % : RESIZE IMAGE
0.000421000004 s, 0.373859971762 % : SETUP, MEMORY ALLOCATION
0.000061999999 s, 0.055057764053 % : EXTRACT IMAGE
0.099706999958 s, 88.542655944824 % : COMPUTE
0.000417000003 s, 0.370307862759 % : COMPRESS IMAGE
0.010549999774 s, 9.368700981140 % : SAVE IMAGE INTO FILE
0.000151000000 s, 0.134092301130 % : FREE MEMORY
Total time:
0.112608999014 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-63760-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-63760-quartz1453.sc' filvtune: Executing actions 12 % Loading '63774.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-63774-5109e96f.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.204s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.960
    Average CPU Frequency: 2.833 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 3.8% (1.364 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.3% (0.909 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.196s (96.2%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.105s
        _IO_vfprintf                libc-2.17.so           0.005s
    Parallel Region Time: 0.008s (3.8%)
        Estimated Ideal Time: 0.004s (1.9%)
        OpenMP Potential Gain: 0.004s (1.9%)
Memory Bound: 38.0% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 14.4% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "128" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:35:31 22/04/2021 UTC
    Collection stop time: 20:35:31 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_256_128 > srad1-log/vtune/18_256_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_256_128 --  srad1 100 0.5 256 128 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.008086362854 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.060647718608 % : READ IMAGE FROM FILE
0.000161999997 s, 0.218331784010 % : RESIZE IMAGE
0.000021000000 s, 0.028302267194 % : SETUP, MEMORY ALLOCATION
0.000060999999 s, 0.082211345434 % : EXTRACT IMAGE
0.062834002078 s, 84.683082580566 % : COMPUTE
0.000367000001 s, 0.494615823030 % : COMPRESS IMAGE
0.010520000011 s, 14.178088188171 % : SAVE IMAGE INTO FILE
0.000182999996 s, 0.246634051204 % : FREE MEMORY
Total time:
0.074198998511 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-63868-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-63868-quartz1453.sc' filvtune: Executing actions 12 % Loading '63868-63874.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-63874-51e58b92.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.237s
    Paused Time: 0s
Effective CPU Utilization: 0.6% (0.430 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.237
        Serial Time (outside parallel regions): 0.207s (87.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad1                 0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.030s (12.7%)
            Estimated Ideal Time: 0.020s (8.3%)
            OpenMP Potential Gain: 0.011s (4.5%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.034s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                                               0.031s                        100.0%           5
        Stream image_out.pgm 0xff4f6b54                                                             0.002s                        100.0%           1
        Stream 0x2e4a07a1                                                                           0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                                             0.000s                        100.0%           2
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0xf222eef6                               0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           4
    Spin and Overhead Time: 0.490s (83.1% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.410s                 69.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  5.1%
        __kmp_fork_call                 libiomp5.so                  0.020s                  3.4%
        __kmp_join_barrier              libiomp5.so                  0.020s                  3.4%
        __kmp_join_call                 libiomp5.so                  0.010s                  1.7%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "128" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:35:48 22/04/2021 UTC
    Collection stop time: 20:35:49 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_256_128 > srad1-log/vtune/9_256_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_256_128 --  srad1 100 0.5 256 128 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.009699320421 % : READ COMMAND LINE PARAMETERS
0.000868999981 s, 1.204101443291 % : READ IMAGE FROM FILE
0.000237000000 s, 0.328391313553 % : RESIZE IMAGE
0.000357999990 s, 0.496050983667 % : SETUP, MEMORY ALLOCATION
0.000060999999 s, 0.084522657096 % : EXTRACT IMAGE
0.059454999864 s, 82.381874084473 % : COMPUTE
0.000429999985 s, 0.595815420151 % : COMPRESS IMAGE
0.010618999600 s, 14.713870048523 % : SAVE IMAGE INTO FILE
0.000134000002 s, 0.185672715306 % : FREE MEMORY
Total time:
0.072169996798 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-63953-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-63953-quartz1453.sc' filvtune: Executing actions 12 % Loading '63967.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-63967-c494bf46.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.158s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.913
    Average CPU Frequency: 2.750 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 2.8% (1.014 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.4% (1.014 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.148s (93.6%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module        Serial CPU Time
        ----------------------------  ------------  ---------------
        [Outside any known module]    [Unknown]              0.060s
        [Loop@0x402ec0 in main]       srad1                  0.005s
        [Loop@0x48360 in _itoa_word]  libc-2.17.so           0.005s
        __vsnprintf                   libc-2.17.so           0.005s
    Parallel Region Time: 0.010s (6.4%)
        Estimated Ideal Time: 0.006s (3.9%)
        OpenMP Potential Gain: 0.004s (2.5%)
Memory Bound: 13.9% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 13.6% of Clockticks
    DRAM Bound: 13.6% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "128" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:36:03 22/04/2021 UTC
    Collection stop time: 20:36:03 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_256_128 > srad1-log/vtune/9_256_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_256_128 --  srad1 100 0.5 256 128 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.011362991296 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.081434763968 % : READ IMAGE FROM FILE
0.000167999999 s, 0.318163752556 % : RESIZE IMAGE
0.000022000000 s, 0.041664298624 % : SETUP, MEMORY ALLOCATION
0.000059000002 s, 0.111736074090 % : EXTRACT IMAGE
0.042135000229 s, 79.796600341797 % : COMPUTE
0.000342999992 s, 0.649584293365 % : COMPRESS IMAGE
0.009875999764 s, 18.703483581543 % : SAVE IMAGE INTO FILE
0.000151000000 s, 0.285968601704 % : FREE MEMORY
Total time:
0.052802998573 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-64051-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-64051-quartz1453.sc' filvtune: Executing actions 12 % Loading '64051-64056.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-64056-f5241c48.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.163s
    Paused Time: 0s
Effective CPU Utilization: 0.3% (0.251 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.163
        Serial Time (outside parallel regions): 0.130s (80.2%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.010s
        Parallel Region Time: 0.032s (19.8%)
            Estimated Ideal Time: 0.026s (16.0%)
            OpenMP Potential Gain: 0.006s (3.8%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.003s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x6de01cba                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 0.150s (79.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.090s                 47.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 15.8%
        __kmp_fork_call                 libiomp5.so                  0.020s                 10.5%
        __kmp_join_call                 libiomp5.so                  0.010s                  5.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "128" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:36:21 22/04/2021 UTC
    Collection stop time: 20:36:21 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_256_128 > srad1-log/vtune/4_256_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_256_128 --  srad1 100 0.5 256 128 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.013252053410 % : READ COMMAND LINE PARAMETERS
0.000760999974 s, 1.440687537193 % : READ IMAGE FROM FILE
0.000269999990 s, 0.511150658131 % : RESIZE IMAGE
0.000384000014 s, 0.726969838142 % : SETUP, MEMORY ALLOCATION
0.000068000001 s, 0.128734245896 % : EXTRACT IMAGE
0.041143000126 s, 77.889892578125 % : COMPUTE
0.000360000005 s, 0.681534230709 % : COMPRESS IMAGE
0.009633000009 s, 18.236719131470 % : SAVE IMAGE INTO FILE
0.000195999994 s, 0.371057510376 % : FREE MEMORY
Total time:
0.052822001278 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-64129-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-64129-quartz1453.sc' filvtune: Executing actions 12 % Loading '64144.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-64144-3ca6d1b9.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 21 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `srad1'                vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.138s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 3.223 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 2.4% (0.874 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.8% (0.583 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.123s (89.4%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.030s
        func@0x7efe0                libittnotify_collector.so           0.005s
        __close                     libpthread-2.17.so                  0.005s
        [Loop@0x4035c1 in main]     srad1                               0.005s
        _IO_vfprintf                libc-2.17.so                        0.005s
    Parallel Region Time: 0.015s (10.6%)
        Estimated Ideal Time: 0.011s (8.3%)
        OpenMP Potential Gain: 0.003s (2.3%)
Memory Bound: 85.7% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 21.4% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 21.4% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "128" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:36:35 22/04/2021 UTC
    Collection stop time: 20:36:35 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_256_128 > srad1-log/vtune/4_256_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_256_256 --  srad1 100 0.5 256 256 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.003100727219 % : READ COMMAND LINE PARAMETERS
0.000044000000 s, 0.022738665342 % : READ IMAGE FROM FILE
0.000322000007 s, 0.166405692697 % : RESIZE IMAGE
0.000022000000 s, 0.011369332671 % : SETUP, MEMORY ALLOCATION
0.000098999997 s, 0.051161997020 % : EXTRACT IMAGE
0.174115002155 s, 89.980522155762 % : COMPUTE
0.000812000013 s, 0.419631749392 % : COMPRESS IMAGE
0.017796000466 s, 9.196756362915 % : SAVE IMAGE INTO FILE
0.000287000003 s, 0.148318111897 % : FREE MEMORY
Total time:
0.193503007293 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-64224-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-64224-quartz1453.sc' filvtune: Executing actions 12 % Loading '64224-64229.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-64229-ac0c24dc.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libdl.so.2'           
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libdl.so.2'           vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.447s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.113 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.447
        Serial Time (outside parallel regions): 0.411s (91.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.036s (8.1%)
            Estimated Ideal Time: 0.025s (5.5%)
            OpenMP Potential Gain: 0.012s (2.6%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 2.081s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 2.076s                        100.0%          30
        Mutex 0x6cb3026d                                              0.003s                        100.0%           6
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           6
    Spin and Overhead Time: 4.590s (98.9% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  4.470s                 96.3%
        __kmp_join_barrier              libiomp5.so                  0.040s                  0.9%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.6%
        __kmp_fork_call                 libiomp5.so                  0.020s                  0.4%
        __kmp_join_call                 libiomp5.so                  0.020s                  0.4%
        __kmp_affinity_set_init_mask    libiomp5.so                  0.010s                  0.2%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "256" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:36:54 22/04/2021 UTC
    Collection stop time: 20:36:55 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_256_256 > srad1-log/vtune/36_256_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_256_256 --  srad1 100 0.5 256 256 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.003000737401 % : READ COMMAND LINE PARAMETERS
0.000775000022 s, 0.332224488258 % : READ IMAGE FROM FILE
0.000437000010 s, 0.187331736088 % : RESIZE IMAGE
0.000383000006 s, 0.164183199406 % : SETUP, MEMORY ALLOCATION
0.000123000005 s, 0.052727241069 % : EXTRACT IMAGE
0.201584994793 s, 86.414802551270 % : COMPUTE
0.001365000033 s, 0.585143804550 % : COMPRESS IMAGE
0.028272999451 s, 12.119977951050 % : SAVE IMAGE INTO FILE
0.000327999995 s, 0.140605971217 % : FREE MEMORY
Total time:
0.233275994658 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-64335-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-64335-quartz1453.sc' filvtune: Executing actions 12 % Loading '64350.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-64350-27b521e2.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.336s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.172
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.819 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 8.2% (2.956 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.2% (1.612 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.321s (95.8%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.185s
        [Loop@0x402006 in main]     srad1                  0.010s
        _IO_vfprintf                libc-2.17.so           0.010s
        __GI___mempcpy              libc-2.17.so           0.005s
        _IO_vfscanf                 libc-2.17.so           0.005s
    Parallel Region Time: 0.014s (4.2%)
        Estimated Ideal Time: 0.005s (1.6%)
        OpenMP Potential Gain: 0.009s (2.7%)
Memory Bound: 36.1% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 7.9% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "256" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:37:09 22/04/2021 UTC
    Collection stop time: 20:37:10 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_256_256 > srad1-log/vtune/36_256_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_256_256 --  srad1 100 0.5 256 256 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000009000000 s, 0.007197984960 % : READ COMMAND LINE PARAMETERS
0.000053000000 s, 0.042388129979 % : READ IMAGE FROM FILE
0.000283000001 s, 0.226336628199 % : RESIZE IMAGE
0.000018000001 s, 0.014395969920 % : SETUP, MEMORY ALLOCATION
0.000106000000 s, 0.084776259959 % : EXTRACT IMAGE
0.103554002941 s, 82.820007324219 % : COMPUTE
0.000739999989 s, 0.591834306717 % : COMPRESS IMAGE
0.019991999492 s, 15.989123344421 % : SAVE IMAGE INTO FILE
0.000280000007 s, 0.223937302828 % : FREE MEMORY
Total time:
0.125035002828 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-64461-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-64461-quartz1453.sc' filvtune: Executing actions 12 % Loading '64461-64466.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-64466-701c888b.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.318s
    Paused Time: 0s
Effective CPU Utilization: 0.5% (0.381 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.318
        Serial Time (outside parallel regions): 0.276s (86.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad1                 0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
            __svml_dlog_cout_rare_internal  srad1                 0.010s
        Parallel Region Time: 0.042s (13.1%)
            Estimated Ideal Time: 0.023s (7.3%)
            OpenMP Potential Gain: 0.018s (5.8%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.287s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.283s                        100.0%          13
        Stream image_out.pgm 0xff4f6b54                               0.004s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 1.710s (93.4% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  1.620s                 88.5%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  1.6%
        __kmp_fork_call                                                                libiomp5.so                  0.020s                  1.1%
        __kmp_join_call                                                                libiomp5.so                  0.020s                  1.1%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_enter  libiomp5.so                  0.020s                  1.1%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "256" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:37:27 22/04/2021 UTC
    Collection stop time: 20:37:28 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_256_256 > srad1-log/vtune/18_256_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_256_256 --  srad1 100 0.5 256 256 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.005908020306 % : READ COMMAND LINE PARAMETERS
0.000922999985 s, 0.779014706612 % : READ IMAGE FROM FILE
0.000407999993 s, 0.344353199005 % : RESIZE IMAGE
0.000438999996 s, 0.370517283678 % : SETUP, MEMORY ALLOCATION
0.000128000000 s, 0.108032368124 % : EXTRACT IMAGE
0.097165003419 s, 82.007545471191 % : COMPUTE
0.000838999986 s, 0.708118438721 % : COMPRESS IMAGE
0.018347000703 s, 15.484921455383 % : SAVE IMAGE INTO FILE
0.000226999997 s, 0.191588670015 % : FREE MEMORY
Total time:
0.118482999504 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-64554-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-64554-quartz1453.sc' filvtune: Executing actions 12 % Loading '64569.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-64569-f48ac513.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.206s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.929
    Average CPU Frequency: 2.843 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 6.2% (2.231 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.9% (1.338 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.196s (95.3%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.100s
        func@0x7efe0                libittnotify_collector.so           0.005s
        [Loop@0x402ec0 in main]     srad1                               0.005s
        _IO_vfprintf                libc-2.17.so                        0.005s
    Parallel Region Time: 0.010s (4.7%)
        Estimated Ideal Time: 0.006s (2.9%)
        OpenMP Potential Gain: 0.004s (1.9%)
Memory Bound: 85.7% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 35.1% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "256" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:37:43 22/04/2021 UTC
    Collection stop time: 20:37:43 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_256_256 > srad1-log/vtune/18_256_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_256_256 --  srad1 100 0.5 256 256 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.007222910877 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.054171834141 % : READ IMAGE FROM FILE
0.000322000007 s, 0.387629568577 % : RESIZE IMAGE
0.000022000000 s, 0.026484008878 % : SETUP, MEMORY ALLOCATION
0.000097999997 s, 0.117974214256 % : EXTRACT IMAGE
0.063582003117 s, 76.541191101074 % : COMPUTE
0.000707999978 s, 0.852303504944 % : COMPRESS IMAGE
0.017980000004 s, 21.644657135010 % : SAVE IMAGE INTO FILE
0.000306000002 s, 0.368368476629 % : FREE MEMORY
Total time:
0.083068996668 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-64662-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-64662-quartz1453.sc' filvtune: Executing actions 12 % Loading '64662-64667.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-64667-150d2fc4.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 20 % Resolving information for `libpthread.so.0'      vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.213s
    Paused Time: 0s
Effective CPU Utilization: 0.3% (0.239 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.213
        Serial Time (outside parallel regions): 0.181s (84.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
            __svml_log2_l9                  srad1                 0.010s
        Parallel Region Time: 0.032s (15.2%)
            Estimated Ideal Time: 0.024s (11.4%)
            OpenMP Potential Gain: 0.008s (3.8%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.028s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.025s                        100.0%           5
        Stream image_out.pgm 0xff4f6b54                               0.003s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 0.620s (92.5% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  0.530s                 79.1%
        __kmp_fork_call                                                                libiomp5.so                  0.030s                  4.5%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  4.5%
        __kmp_finish_implicit_task                                                     libiomp5.so                  0.010s                  1.5%
        __kmp_join_call                                                                libiomp5.so                  0.010s                  1.5%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_enter  libiomp5.so                  0.010s                  1.5%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "256" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:38:00 22/04/2021 UTC
    Collection stop time: 20:38:01 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_256_256 > srad1-log/vtune/9_256_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_256_256 --  srad1 100 0.5 256 256 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.008120273240 % : READ COMMAND LINE PARAMETERS
0.000944999978 s, 1.096236824989 % : READ IMAGE FROM FILE
0.000469999999 s, 0.545218288898 % : RESIZE IMAGE
0.000478000002 s, 0.554498612881 % : SETUP, MEMORY ALLOCATION
0.000123999998 s, 0.143844828010 % : EXTRACT IMAGE
0.064983002841 s, 75.382812500000 % : COMPUTE
0.000797000015 s, 0.924551010132 % : COMPRESS IMAGE
0.018169999123 s, 21.077909469604 % : SAVE IMAGE INTO FILE
0.000230000005 s, 0.266808956861 % : FREE MEMORY
Total time:
0.086203999817 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-64745-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-64745-quartz1453.sc' filvtune: Executing actions 12 % Loading '64759.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-64759-6142ef01.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.179s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.892
    Average CPU Frequency: 2.803 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 2.8% (1.012 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.5% (1.089 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.165s (92.0%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.075s
        _IO_vfprintf                libc-2.17.so           0.005s
    Parallel Region Time: 0.014s (8.0%)
        Estimated Ideal Time: 0.011s (5.9%)
        OpenMP Potential Gain: 0.004s (2.1%)
Memory Bound: 44.6% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 17.3% of Clockticks
    DRAM Bound: 8.7% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "256" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:38:15 22/04/2021 UTC
    Collection stop time: 20:38:15 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_256_256 > srad1-log/vtune/9_256_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_256_256 --  srad1 100 0.5 256 256 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.008898512460 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.063772670925 % : READ IMAGE FROM FILE
0.000306000002 s, 0.453824132681 % : RESIZE IMAGE
0.000021000000 s, 0.031144794077 % : SETUP, MEMORY ALLOCATION
0.000097999997 s, 0.145342379808 % : EXTRACT IMAGE
0.049329999834 s, 73.160598754883 % : COMPUTE
0.000622000021 s, 0.922479093075 % : COMPRESS IMAGE
0.016733000055 s, 24.816469192505 % : SAVE IMAGE INTO FILE
0.000268000003 s, 0.397466868162 % : FREE MEMORY
Total time:
0.067427001894 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-64844-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-64844-quartz1453.sc' filvtune: Executing actions 12 % Loading '64844-64849.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-64849-8e275f97.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.173s
    Paused Time: 0s
Effective CPU Utilization: 0.7% (0.471 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.173
        Serial Time (outside parallel regions): 0.135s (77.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
            _IO_fprintf                     libc.so.6             0.010s
            main                            srad1                 0.010s
        Parallel Region Time: 0.038s (22.1%)
            Estimated Ideal Time: 0.032s (18.5%)
            OpenMP Potential Gain: 0.006s (3.6%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.003s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x6de01cba                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 0.180s (69.2% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.120s                 46.1%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 11.5%
        __kmp_fork_call                 libiomp5.so                  0.020s                  7.7%
        __kmp_join_call                 libiomp5.so                  0.010s                  3.8%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "256" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:38:32 22/04/2021 UTC
    Collection stop time: 20:38:33 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_256_256 > srad1-log/vtune/4_256_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_256_256 --  srad1 100 0.5 256 256 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000001000000 s, 0.001444982248 % : SETUP VARIABLES
0.000008000000 s, 0.011559857987 % : READ COMMAND LINE PARAMETERS
0.001019999967 s, 1.473881959915 % : READ IMAGE FROM FILE
0.000549999997 s, 0.794740319252 % : RESIZE IMAGE
0.000456999987 s, 0.660356938839 % : SETUP, MEMORY ALLOCATION
0.000128000000 s, 0.184957727790 % : EXTRACT IMAGE
0.049469001591 s, 71.481826782227 % : COMPUTE
0.000653999974 s, 0.945018410683 % : COMPRESS IMAGE
0.016695000231 s, 24.123979568481 % : SAVE IMAGE INTO FILE
0.000222999995 s, 0.322231054306 % : FREE MEMORY
Total time:
0.069205000997 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-64923-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-64923-quartz1453.sc' filvtune: Executing actions 12 % Loading '64937.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-64937-e6f5f002.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.154s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.896
    Average CPU Frequency: 3.143 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 8.1% (2.931 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.4% (0.977 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.130s (84.2%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module        Serial CPU Time
        ----------------------------  ------------  ---------------
        [Outside any known module]    [Unknown]              0.045s
        [Loop@0x48360 in _itoa_word]  libc-2.17.so           0.005s
    Parallel Region Time: 0.024s (15.8%)
        Estimated Ideal Time: 0.020s (12.9%)
        OpenMP Potential Gain: 0.005s (3.0%)
Memory Bound: 94.0% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 14.3% of Clockticks
    DRAM Bound: 14.3% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "256" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:38:47 22/04/2021 UTC
    Collection stop time: 20:38:47 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_256_256 > srad1-log/vtune/4_256_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_256_512 --  srad1 100 0.5 256 512 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.002897347091 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.020764319226 % : READ IMAGE FROM FILE
0.000609999988 s, 0.294563621283 % : RESIZE IMAGE
0.000024999999 s, 0.012072279118 % : SETUP, MEMORY ALLOCATION
0.000172999993 s, 0.083540171385 % : EXTRACT IMAGE
0.170714005828 s, 82.436279296875 % : COMPUTE
0.001590000000 s, 0.767796933651 % : COMPRESS IMAGE
0.033468998969 s, 16.161884307861 % : SAVE IMAGE INTO FILE
0.000456000009 s, 0.220198363066 % : FREE MEMORY
Total time:
0.207085996866 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-65019-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-65019-quartz1453.sc' filvtune: Executing actions 12 % Loading '65019-65024.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-65024-f252c0a0.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' 
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.449s
    Paused Time: 0s
Effective CPU Utilization: 0.4% (0.313 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.449
        Serial Time (outside parallel regions): 0.412s (91.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.020s
            main                            srad1                 0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.036s (8.1%)
            Estimated Ideal Time: 0.026s (5.8%)
            OpenMP Potential Gain: 0.010s (2.3%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.906s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.903s                        100.0%          31
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%           5
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 5.161s (97.4% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                Module       Spin and Overhead Time  (% from CPU Time)(%)
        ----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                      libiomp5.so                  5.071s                 95.7%
        __kmp_get_global_thread_id_reg                                          libiomp5.so                  0.030s                  0.6%
        __kmp_join_barrier                                                      libiomp5.so                  0.020s                  0.4%
        __kmp_join_call                                                         libiomp5.so                  0.020s                  0.4%
        __kmp_fork_call                                                         libiomp5.so                  0.010s                  0.2%
        _INTERNAL_23_______src_kmp_sched_cpp_20354e55::__kmp_itt_metadata_loop  libiomp5.so                  0.010s                  0.2%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "512" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:39:04 22/04/2021 UTC
    Collection stop time: 20:39:05 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_256_512 > srad1-log/vtune/36_256_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_256_512 --  srad1 100 0.5 256 512 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000001000000 s, 0.000383478211 % : SETUP VARIABLES
0.000007000000 s, 0.002684347564 % : READ COMMAND LINE PARAMETERS
0.000714999973 s, 0.274186939001 % : READ IMAGE FROM FILE
0.000798000023 s, 0.306015610695 % : RESIZE IMAGE
0.000427999999 s, 0.164128676057 % : SETUP, MEMORY ALLOCATION
0.000209000005 s, 0.080146946013 % : EXTRACT IMAGE
0.205745995045 s, 78.899108886719 % : COMPUTE
0.002737999894 s, 1.049963355064 % : COMPRESS IMAGE
0.049539998174 s, 18.997510910034 % : SAVE IMAGE INTO FILE
0.000589000003 s, 0.225868687034 % : FREE MEMORY
Total time:
0.260771006346 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-65130-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-65130-quartz1453.sc' filvtune: Executing actions 12 % Loading '65145.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-65145-57677476.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.349s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.145
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.730 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 4.2% (1.521 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.5% (2.510 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.321s (91.8%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.180s
        _IO_vfprintf                libc-2.17.so                        0.015s
        [Loop@0x4035c1 in main]     srad1                               0.005s
        func@0x7efe0                libittnotify_collector.so           0.005s
        __svml_log2_l9              srad1                               0.005s
        [Others]                    N/A                                 0.015s
    Parallel Region Time: 0.029s (8.2%)
        Estimated Ideal Time: 0.009s (2.6%)
        OpenMP Potential Gain: 0.020s (5.6%)
Memory Bound: 5.8% of Pipeline Slots
    Cache Bound: 2.3% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "512" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:39:19 22/04/2021 UTC
    Collection stop time: 20:39:19 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_256_512 > srad1-log/vtune/36_256_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_256_512 --  srad1 100 0.5 256 512 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.004293043166 % : READ COMMAND LINE PARAMETERS
0.000044000000 s, 0.031482316554 % : READ IMAGE FROM FILE
0.000598000013 s, 0.427873283625 % : RESIZE IMAGE
0.000035000001 s, 0.025042751804 % : SETUP, MEMORY ALLOCATION
0.000172999993 s, 0.123782746494 % : EXTRACT IMAGE
0.101689003408 s, 72.759208679199 % : COMPUTE
0.001583999954 s, 1.133363366127 % : COMPRESS IMAGE
0.035160001367 s, 25.157234191895 % : SAVE IMAGE INTO FILE
0.000472000014 s, 0.337719380856 % : FREE MEMORY
Total time:
0.139761000872 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-65256-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-65256-quartz1453.sc' filvtune: Executing actions 12 % Loading '65256-65261.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-65261-8726e001.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.303s
    Paused Time: 0s
Effective CPU Utilization: 0.8% (0.600 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.303
        Serial Time (outside parallel regions): 0.265s (87.5%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad1                 0.020s
            __kmp_create_worker             libiomp5.so           0.010s
            _IO_fprintf                     libc.so.6             0.010s
        Parallel Region Time: 0.038s (12.5%)
            Estimated Ideal Time: 0.027s (8.8%)
            OpenMP Potential Gain: 0.011s (3.7%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.305s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.302s                        100.0%          13
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x6de01cba                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           6
    Spin and Overhead Time: 1.910s (91.4% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  1.800s                 86.1%
        __kmp_join_barrier              libiomp5.so                  0.030s                  1.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  1.4%
        __kmp_join_call                 libiomp5.so                  0.020s                  1.0%
        __kmp_fork_call                 libiomp5.so                  0.010s                  0.5%
        [Others]                        N/A                          0.020s                  1.0%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "512" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:39:37 22/04/2021 UTC
    Collection stop time: 20:39:37 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_256_512 > srad1-log/vtune/18_256_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_256_512 --  srad1 100 0.5 256 512 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.004716885742 % : READ COMMAND LINE PARAMETERS
0.000837999978 s, 0.564678609371 % : READ IMAGE FROM FILE
0.000721000019 s, 0.485839217901 % : RESIZE IMAGE
0.000413000002 s, 0.278296262026 % : SETUP, MEMORY ALLOCATION
0.000209999998 s, 0.141506567597 % : EXTRACT IMAGE
0.109875001013 s, 74.038261413574 % : COMPUTE
0.001616999973 s, 1.089600682259 % : COMPRESS IMAGE
0.034301001579 s, 23.113414764404 % : SAVE IMAGE INTO FILE
0.000421000004 s, 0.283686965704 % : FREE MEMORY
Total time:
0.148403003812 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-65352-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-65352-quartz1453.sc' filvtune: Executing actions 12 % Loading '65367.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-65367-d829079e.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.233s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.859
    Average CPU Frequency: 2.751 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 15.4% (5.550 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.7% (1.914 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.218s (93.7%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                                   Module        Serial CPU Time
        -----------------------------------------  ------------  ---------------
        [Outside any known module]                 [Unknown]              0.095s
        _IO_vfprintf                               libc-2.17.so           0.010s
        [Loop@0x402006 in main]                    srad1                  0.005s
        [Loop@0x4025b5 in main]                    srad1                  0.005s
        [Loop@0x146c21 in __intel_avx_rep_memset]  libiomp5.so            0.005s
        [Others]                                   N/A                    0.005s
    Parallel Region Time: 0.015s (6.3%)
        Estimated Ideal Time: 0.010s (4.5%)
        OpenMP Potential Gain: 0.004s (1.8%)
Memory Bound: 12.9% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 18.3% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "512" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:39:51 22/04/2021 UTC
    Collection stop time: 20:39:51 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_256_512 > srad1-log/vtune/18_256_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_256_512 --  srad1 100 0.5 256 512 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000001000000 s, 0.000917321828 % : SETUP VARIABLES
0.000006000000 s, 0.005503931083 % : READ COMMAND LINE PARAMETERS
0.000053000000 s, 0.048618052155 % : READ IMAGE FROM FILE
0.000663999992 s, 0.609101653099 % : RESIZE IMAGE
0.000029999999 s, 0.027519654483 % : SETUP, MEMORY ALLOCATION
0.000203999996 s, 0.187133654952 % : EXTRACT IMAGE
0.070254996419 s, 64.446441650391 % : COMPUTE
0.001403999981 s, 1.287919759750 % : COMPRESS IMAGE
0.035946000367 s, 32.974048614502 % : SAVE IMAGE INTO FILE
0.000449999992 s, 0.412794798613 % : FREE MEMORY
Total time:
0.109012998641 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-65465-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-65465-quartz1453.sc' filvtune: Executing actions 12 % Loading '65465-65471.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-65471-f1fcf492.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.242s
    Paused Time: 0s
Effective CPU Utilization: 1.3% (0.923 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.242
        Serial Time (outside parallel regions): 0.198s (81.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.040s
            main                            srad1                 0.020s
            _IO_fprintf                     libc.so.6             0.010s
        Parallel Region Time: 0.044s (18.1%)
            Estimated Ideal Time: 0.033s (13.6%)
            OpenMP Potential Gain: 0.011s (4.5%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.035s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.033s                        100.0%           4
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 0.770s (77.8% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.710s                 71.7%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.040s                  4.0%
        __kmp_join_barrier              libiomp5.so                  0.010s                  1.0%
        __kmp_join_call                 libiomp5.so                  0.010s                  1.0%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "512" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:40:09 22/04/2021 UTC
    Collection stop time: 20:40:09 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_256_512 > srad1-log/vtune/9_256_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_256_512 --  srad1 100 0.5 256 512 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.007361127995 % : READ COMMAND LINE PARAMETERS
0.000836000021 s, 0.769237875938 % : READ IMAGE FROM FILE
0.000905000023 s, 0.832727551460 % : RESIZE IMAGE
0.000415999995 s, 0.382778644562 % : SETUP, MEMORY ALLOCATION
0.000235000000 s, 0.216233119369 % : EXTRACT IMAGE
0.071152999997 s, 65.470794677734 % : COMPUTE
0.001604999998 s, 1.476826190948 % : COMPRESS IMAGE
0.033128000796 s, 30.482429504395 % : SAVE IMAGE INTO FILE
0.000392999995 s, 0.361615389585 % : FREE MEMORY
Total time:
0.108678996563 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-65549-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-65549-quartz1453.sc' filvtune: Executing actions 12 % Loading '65564.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-65564-15135533.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.186s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.818
    Average CPU Frequency: 2.740 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 14.4% (5.187 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.6% (1.886 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.163s (87.5%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module                     Serial CPU Time
        ----------------------------  -------------------------  ---------------
        [Outside any known module]    [Unknown]                           0.055s
        func@0x7efe0                  libittnotify_collector.so           0.005s
        _IO_vfprintf                  libc-2.17.so                        0.005s
        _IO_file_xsputn               libc-2.17.so                        0.005s
        [Loop@0x48360 in _itoa_word]  libc-2.17.so                        0.005s
    Parallel Region Time: 0.023s (12.5%)
        Estimated Ideal Time: 0.019s (10.4%)
        OpenMP Potential Gain: 0.004s (2.0%)
Memory Bound: 7.5% of Pipeline Slots
    Cache Bound: 11.2% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "512" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:40:22 22/04/2021 UTC
    Collection stop time: 20:40:22 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_256_512 > srad1-log/vtune/9_256_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_256_512 --  srad1 100 0.5 256 512 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.006250223145 % : READ COMMAND LINE PARAMETERS
0.000046000001 s, 0.041072893888 % : READ IMAGE FROM FILE
0.000652000017 s, 0.582163631916 % : RESIZE IMAGE
0.000029999999 s, 0.026786670089 % : SETUP, MEMORY ALLOCATION
0.000197999994 s, 0.176792025566 % : EXTRACT IMAGE
0.079570002854 s, 71.047180175781 % : COMPUTE
0.001218999969 s, 1.088431715965 % : COMPRESS IMAGE
0.029844999313 s, 26.648273468018 % : SAVE IMAGE INTO FILE
0.000429000007 s, 0.383049398661 % : FREE MEMORY
Total time:
0.111996002495 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-65650-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-65650-quartz1453.sc' filvtune: Executing actions 12 % Loading '65650-65656.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-65656-507f7eb7.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.214s
    Paused Time: 0s
Effective CPU Utilization: 1.1% (0.805 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.214
        Serial Time (outside parallel regions): 0.148s (69.0%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad1                 0.020s
            __kmp_fork_call                 libiomp5.so           0.011s
            _IO_fprintf                     libc.so.6             0.010s
        Parallel Region Time: 0.067s (31.0%)
            Estimated Ideal Time: 0.054s (25.2%)
            OpenMP Potential Gain: 0.012s (5.8%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.003s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                                                             0.002s                        100.0%           1
        Stream 0x2e4a07a1                                                                           0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                                             0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                                                             0.000s                        100.0%           1
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0xf222eef6                               0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           3
    Spin and Overhead Time: 0.260s (60.5% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.180s                 41.8%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  7.0%
        __kmp_fork_call                 libiomp5.so                  0.021s                  4.9%
        __kmp_join_call                 libiomp5.so                  0.019s                  4.4%
        __kmp_join_barrier              libiomp5.so                  0.010s                  2.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "512" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:40:40 22/04/2021 UTC
    Collection stop time: 20:40:41 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_256_512 > srad1-log/vtune/4_256_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_256_512 --  srad1 100 0.5 256 512 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.007488953881 % : READ COMMAND LINE PARAMETERS
0.000805000018 s, 0.753575980663 % : READ IMAGE FROM FILE
0.000849000004 s, 0.794765233994 % : RESIZE IMAGE
0.000391000009 s, 0.366022616625 % : SETUP, MEMORY ALLOCATION
0.000220000002 s, 0.205946221948 % : EXTRACT IMAGE
0.071654997766 s, 67.077621459961 % : COMPUTE
0.001266999985 s, 1.186063051224 % : COMPRESS IMAGE
0.031097000465 s, 29.110500335693 % : SAVE IMAGE INTO FILE
0.000531999976 s, 0.498015433550 % : FREE MEMORY
Total time:
0.106824003160 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-65729-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-65729-quartz1453.sc' filvtune: Executing actions 12 % Loading '65743.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-65743-9786f6bc.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.188s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.835
    Average CPU Frequency: 3.002 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 3.9% (1.408 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.8% (1.280 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.145s (77.4%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module        Serial CPU Time
        ----------------------------  ------------  ---------------
        [Outside any known module]    [Unknown]              0.045s
        [Loop@0x4025b5 in main]       srad1                  0.005s
        [Loop@0x48360 in _itoa_word]  libc-2.17.so           0.005s
        __vsscanf                     libc-2.17.so           0.005s
    Parallel Region Time: 0.042s (22.6%)
        Estimated Ideal Time: 0.038s (20.2%)
        OpenMP Potential Gain: 0.005s (2.4%)
Memory Bound: 19.9% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 8.9% of Clockticks
    DRAM Bound: 8.9% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "256" "512" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:40:55 22/04/2021 UTC
    Collection stop time: 20:40:55 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_256_512 > srad1-log/vtune/4_256_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_512_64 --  srad1 100 0.5 512 64 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.003678814741 % : READ COMMAND LINE PARAMETERS
0.000044000000 s, 0.026977976784 % : READ IMAGE FROM FILE
0.000134999995 s, 0.082773335278 % : RESIZE IMAGE
0.000028000000 s, 0.017167802900 % : SETUP, MEMORY ALLOCATION
0.000059000002 s, 0.036175012589 % : EXTRACT IMAGE
0.152061998844 s, 93.234657287598 % : COMPUTE
0.000425000006 s, 0.260582715273 % : COMPRESS IMAGE
0.010107000358 s, 6.196963787079 % : SAVE IMAGE INTO FILE
0.000230000005 s, 0.141021236777 % : FREE MEMORY
Total time:
0.163095995784 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-65822-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-65822-quartz1453.sc' filvtune: Executing actions 12 % Loading '65822-65827.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-65827-ae136ae8.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.387s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.157 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.387
        Serial Time (outside parallel regions): 0.354s (91.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.032s (8.4%)
            Estimated Ideal Time: 0.017s (4.4%)
            OpenMP Potential Gain: 0.015s (4.0%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.683s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.681s                        100.0%          32
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%           4
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 3.950s (98.5% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  3.840s                 95.8%
        __kmp_join_barrier                                                             libiomp5.so                  0.030s                  0.7%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  0.7%
        __kmp_fork_call                                                                libiomp5.so                  0.020s                  0.5%
        __kmp_join_call                                                                libiomp5.so                  0.020s                  0.5%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_leave  libiomp5.so                  0.010s                  0.2%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "64" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:41:12 22/04/2021 UTC
    Collection stop time: 20:41:13 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_512_64 > srad1-log/vtune/36_512_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_512_64 --  srad1 100 0.5 512 64 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.004093097523 % : READ COMMAND LINE PARAMETERS
0.000595999998 s, 0.304935753345 % : READ IMAGE FROM FILE
0.000226000004 s, 0.115630008280 % : RESIZE IMAGE
0.000387000007 s, 0.198003605008 % : SETUP, MEMORY ALLOCATION
0.000072000003 s, 0.036837875843 % : EXTRACT IMAGE
0.179137006402 s, 91.653152465820 % : COMPUTE
0.000688000000 s, 0.352006375790 % : COMPRESS IMAGE
0.014113999903 s, 7.221247196198 % : SAVE IMAGE INTO FILE
0.000222999995 s, 0.114095091820 % : FREE MEMORY
Total time:
0.195451006293 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-65932-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-65932-quartz1453.sc' filvtune: Executing actions 12 % Loading '65947.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-65947-f58b8e21.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.290s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.161
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.814 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 4.0% (1.451 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.0% (1.451 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.279s (96.2%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                                                                                                     Module                     Serial CPU Time
        -----------------------------------------------------------------------------------------------------------  -------------------------  ---------------
        [Outside any known module]                                                                                   [Unknown]                           0.165s
        func@0x7efe0                                                                                                 libittnotify_collector.so           0.010s
        _IO_file_xsputn                                                                                              libc-2.17.so                        0.010s
        _INTERNAL_25_______src_kmp_barrier_cpp_ddfed41b::__kmp_wait_template<kmp_flag_64, (int)0, (bool)0, (bool)1>  libiomp5.so                         0.005s
    Parallel Region Time: 0.011s (3.8%)
        Estimated Ideal Time: 0.004s (1.2%)
        OpenMP Potential Gain: 0.008s (2.6%)
Memory Bound: 38.5% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "64" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:41:26 22/04/2021 UTC
    Collection stop time: 20:41:26 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_512_64 > srad1-log/vtune/36_512_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_512_64 --  srad1 100 0.5 512 64 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.004798771814 % : READ COMMAND LINE PARAMETERS
0.000046000001 s, 0.036790583283 % : READ IMAGE FROM FILE
0.000140000004 s, 0.111971333623 % : RESIZE IMAGE
0.000026000000 s, 0.020794676617 % : SETUP, MEMORY ALLOCATION
0.000059999998 s, 0.047987714410 % : EXTRACT IMAGE
0.114051997662 s, 91.218254089355 % : COMPUTE
0.000395000010 s, 0.315919131041 % : COMPRESS IMAGE
0.010088999756 s, 8.069134712219 % : SAVE IMAGE INTO FILE
0.000218000001 s, 0.174355372787 % : FREE MEMORY
Total time:
0.125031992793 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-66057-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-66057-quartz1453.sc' filvtune: Executing actions 12 % Loading '66057-66063.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-66063-fd9e8a1e.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libpthread.so.0'      vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.375s
    Paused Time: 0s
Effective CPU Utilization: 0.3% (0.242 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.375
        Serial Time (outside parallel regions): 0.339s (90.4%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.036s (9.6%)
            Estimated Ideal Time: 0.027s (7.1%)
            OpenMP Potential Gain: 0.010s (2.6%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.454s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.452s                        100.0%          13
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Mutex 0x6cb3026d                                              0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 1.680s (94.9% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  1.590s                 89.8%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  1.7%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_enter  libiomp5.so                  0.020s                  1.1%
        __kmp_join_barrier                                                             libiomp5.so                  0.010s                  0.6%
        __kmp_fork_call                                                                libiomp5.so                  0.010s                  0.6%
        [Others]                                                                       N/A                          0.020s                  1.1%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "64" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:41:43 22/04/2021 UTC
    Collection stop time: 20:41:44 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_512_64 > srad1-log/vtune/18_512_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_512_64 --  srad1 100 0.5 512 64 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.006353009492 % : READ COMMAND LINE PARAMETERS
0.000936000026 s, 0.849488079548 % : READ IMAGE FROM FILE
0.000285999995 s, 0.259565830231 % : RESIZE IMAGE
0.000406000006 s, 0.368474543095 % : SETUP, MEMORY ALLOCATION
0.000070000002 s, 0.063530094922 % : EXTRACT IMAGE
0.097512997687 s, 88.500144958496 % : COMPUTE
0.000430999993 s, 0.391163855791 % : COMPRESS IMAGE
0.010378999636 s, 9.419698715210 % : SAVE IMAGE INTO FILE
0.000155999995 s, 0.141581356525 % : FREE MEMORY
Total time:
0.110183998942 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-66150-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-66150-quartz1453.sc' filvtune: Executing actions 12 % Loading '66165.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-66165-4c54654a.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.195s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.992
    Average CPU Frequency: 2.833 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 5.2% (1.855 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.3% (0.927 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.187s (96.0%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.100s
        func@0x7efe0                libittnotify_collector.so           0.005s
        [Loop@0x402006 in main]     srad1                               0.005s
        _IO_vfprintf                libc-2.17.so                        0.005s
    Parallel Region Time: 0.008s (4.0%)
        Estimated Ideal Time: 0.004s (2.0%)
        OpenMP Potential Gain: 0.004s (2.0%)
Memory Bound: 56.5% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 28.8% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "64" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:41:58 22/04/2021 UTC
    Collection stop time: 20:41:58 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_512_64 > srad1-log/vtune/18_512_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_512_64 --  srad1 100 0.5 512 64 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.011609393172 % : READ COMMAND LINE PARAMETERS
0.000062999999 s, 0.104484543204 % : READ IMAGE FROM FILE
0.000153999994 s, 0.255406677723 % : RESIZE IMAGE
0.000024999999 s, 0.041462119669 % : SETUP, MEMORY ALLOCATION
0.000061999999 s, 0.102826058865 % : EXTRACT IMAGE
0.049825999886 s, 82.635665893555 % : COMPUTE
0.000353999989 s, 0.587103605270 % : COMPRESS IMAGE
0.009631000459 s, 15.972867965698 % : SAVE IMAGE INTO FILE
0.000174000001 s, 0.288576364517 % : FREE MEMORY
Total time:
0.060295999050 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-66257-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-66257-quartz1453.sc' filvtune: Executing actions 12 % Loading '66257-66263.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-66263-59257236.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.183s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.168 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.183
        Serial Time (outside parallel regions): 0.156s (85.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.039s
            _IO_fprintf                     libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
            __kmp_join_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.026s (14.4%)
            Estimated Ideal Time: 0.019s (10.4%)
            OpenMP Potential Gain: 0.007s (4.0%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.023s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.021s                        100.0%           4
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x6de01cba                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 0.470s (94.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                                                     Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                                                           libiomp5.so                  0.350s                 70.0%
        _INTERNAL_25_______src_kmp_barrier_cpp_ddfed41b::__kmp_wait_template<kmp_flag_64, (int)1, (bool)0, (bool)1>  libiomp5.so                  0.040s                  8.0%
        __kmp_get_global_thread_id_reg                                                                               libiomp5.so                  0.039s                  7.8%
        __kmp_join_call                                                                                              libiomp5.so                  0.021s                  4.2%
        __kmp_fork_call                                                                                              libiomp5.so                  0.010s                  2.0%
        sched_yield                                                                                                  libc.so.6                    0.010s                  2.0%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "64" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:42:15 22/04/2021 UTC
    Collection stop time: 20:42:15 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_512_64 > srad1-log/vtune/9_512_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_512_64 --  srad1 100 0.5 512 64 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.008977581747 % : READ COMMAND LINE PARAMETERS
0.000720000011 s, 0.923408389091 % : READ IMAGE FROM FILE
0.000222000002 s, 0.284717589617 % : RESIZE IMAGE
0.000381999998 s, 0.489919453859 % : SETUP, MEMORY ALLOCATION
0.000074000003 s, 0.094905860722 % : EXTRACT IMAGE
0.065591000021 s, 84.121223449707 % : COMPUTE
0.000433999987 s, 0.556610047817 % : COMPRESS IMAGE
0.010366999544 s, 13.295798301697 % : SAVE IMAGE INTO FILE
0.000174999994 s, 0.224439546466 % : FREE MEMORY
Total time:
0.077972002327 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-66340-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-66340-quartz1453.sc' filvtune: Executing actions 12 % Loading '66355.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-66355-832141b9.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.160s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.878
    Average CPU Frequency: 2.779 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 8.8% (3.170 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.3% (0.906 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.150s (93.4%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.060s
        func@0x7efe0                libittnotify_collector.so           0.005s
        [Loop@0x402006 in main]     srad1                               0.005s
        _IO_vfprintf                libc-2.17.so                        0.005s
    Parallel Region Time: 0.011s (6.6%)
        Estimated Ideal Time: 0.006s (3.9%)
        OpenMP Potential Gain: 0.004s (2.6%)
Memory Bound: 100.0% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 52.7% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 39.6% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "64" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:42:29 22/04/2021 UTC
    Collection stop time: 20:42:29 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_512_64 > srad1-log/vtune/9_512_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_512_64 --  srad1 100 0.5 512 64 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.012367563322 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.088634207845 % : READ IMAGE FROM FILE
0.000132000001 s, 0.272086411715 % : RESIZE IMAGE
0.000027000000 s, 0.055654037744 % : SETUP, MEMORY ALLOCATION
0.000059000002 s, 0.121614381671 % : EXTRACT IMAGE
0.038067001849 s, 78.466011047363 % : COMPUTE
0.000338000013 s, 0.696706116199 % : COMPRESS IMAGE
0.009646999650 s, 19.884981155396 % : SAVE IMAGE INTO FILE
0.000195000001 s, 0.401945829391 % : FREE MEMORY
Total time:
0.048514001071 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-66439-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-66439-quartz1453.sc' filvtune: Executing actions 12 % Loading '66439-66444.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-66444-7784fe29.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.149s
    Paused Time: 0s
Effective CPU Utilization: 0.3% (0.206 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.149
        Serial Time (outside parallel regions): 0.120s (80.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_create_worker             libiomp5.so           0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.029s (19.4%)
            Estimated Ideal Time: 0.022s (14.6%)
            OpenMP Potential Gain: 0.007s (4.9%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.002s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                                                             0.002s                        100.0%           1
        Stream 0x2e4a07a1                                                                           0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                                             0.000s                        100.0%           2
        Stream /proc/meminfo 0x1efd06c1                                                             0.000s                        100.0%           1
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0xf222eef6                               0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           3
    Spin and Overhead Time: 0.160s (84.2% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.090s                 47.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 15.8%
        __kmp_fork_call                 libiomp5.so                  0.020s                 10.5%
        __kmp_create_worker             libiomp5.so                  0.010s                  5.3%
        __kmp_join_call                 libiomp5.so                  0.010s                  5.2%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "64" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:42:45 22/04/2021 UTC
    Collection stop time: 20:42:46 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_512_64 > srad1-log/vtune/4_512_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_512_64 --  srad1 100 0.5 512 64 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_64 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.010978152975 % : READ COMMAND LINE PARAMETERS
0.000832999998 s, 1.524133563042 % : READ IMAGE FROM FILE
0.000254999992 s, 0.466571509838 % : RESIZE IMAGE
0.000357999990 s, 0.655029833317 % : SETUP, MEMORY ALLOCATION
0.000076999997 s, 0.140886306763 % : EXTRACT IMAGE
0.042665001005 s, 78.063819885254 % : COMPUTE
0.000371000002 s, 0.678815841675 % : COMPRESS IMAGE
0.009918999858 s, 18.148717880249 % : SAVE IMAGE INTO FILE
0.000169999999 s, 0.311047673225 % : FREE MEMORY
Total time:
0.054653998464 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-66519-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-66519-quartz1453.sc' filvtune: Executing actions 12 % Loading '66533.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-66533-ad8bd5d4.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.124s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.929
    Average CPU Frequency: 3.026 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 3.0% (1.087 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.0% (0.725 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.111s (88.9%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.040s
        [Loop@0x4035c1 in main]     srad1                  0.005s
        [Loop@0x402432 in main]     srad1                  0.005s
        _IO_setb                    libc-2.17.so           0.005s
    Parallel Region Time: 0.014s (11.1%)
        Estimated Ideal Time: 0.011s (9.0%)
        OpenMP Potential Gain: 0.003s (2.2%)
Memory Bound: 85.3% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 22.0% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: 44.0% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "64" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:42:59 22/04/2021 UTC
    Collection stop time: 20:43:00 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_512_64 > srad1-log/vtune/4_512_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_512_128 --  srad1 100 0.5 512 128 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.004169495776 % : READ COMMAND LINE PARAMETERS
0.000047000001 s, 0.027995187789 % : READ IMAGE FROM FILE
0.000285999995 s, 0.170353695750 % : RESIZE IMAGE
0.000028000000 s, 0.016677983105 % : SETUP, MEMORY ALLOCATION
0.000103999999 s, 0.061946798116 % : EXTRACT IMAGE
0.148960992694 s, 88.727470397949 % : COMPUTE
0.000801999995 s, 0.477705091238 % : COMPRESS IMAGE
0.017356999218 s, 10.338562965393 % : SAVE IMAGE INTO FILE
0.000293999998 s, 0.175118833780 % : FREE MEMORY
Total time:
0.167886003852 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-66611-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-66611-quartz1453.sc' filvtune: Executing actions 12 % Loading '66611-66616.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-66616-71417dfe.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.396s
    Paused Time: 0s
Effective CPU Utilization: 0.3% (0.229 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.396
        Serial Time (outside parallel regions): 0.369s (93.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
            main                            srad1                 0.010s
        Parallel Region Time: 0.026s (6.7%)
            Estimated Ideal Time: 0.016s (4.0%)
            OpenMP Potential Gain: 0.010s (2.6%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.531s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.526s                        100.0%          32
        Mutex 0x6cb3026d                                              0.002s                        100.0%           8
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 4.100s (97.9% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  4.000s                 95.5%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  0.7%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_enter  libiomp5.so                  0.020s                  0.5%
        __kmp_join_barrier                                                             libiomp5.so                  0.020s                  0.5%
        __kmp_join_call                                                                libiomp5.so                  0.010s                  0.2%
        [Others]                                                                       N/A                          0.020s                  0.5%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "128" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:43:15 22/04/2021 UTC
    Collection stop time: 20:43:16 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_512_128 > srad1-log/vtune/36_512_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_512_128 --  srad1 100 0.5 512 128 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.003620008007 % : READ COMMAND LINE PARAMETERS
0.000774000015 s, 0.350235760212 % : READ IMAGE FROM FILE
0.000429000007 s, 0.194122925401 % : RESIZE IMAGE
0.000517999986 s, 0.234395503998 % : SETUP, MEMORY ALLOCATION
0.000117000003 s, 0.052942615002 % : EXTRACT IMAGE
0.191141992807 s, 86.491943359375 % : COMPUTE
0.001387999975 s, 0.628071367741 % : COMPRESS IMAGE
0.026278000325 s, 11.890820503235 % : SAVE IMAGE INTO FILE
0.000339999999 s, 0.153850331903 % : FREE MEMORY
Total time:
0.220993995667 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-66721-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-66721-quartz1453.sc' filvtune: Executing actions 12 % Loading '66736.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-66736-d818fb91.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.312s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.180
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.652 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 8.2% (2.969 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.5% (1.781 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.297s (95.2%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.185s
        [Loop@0x402006 in main]     srad1                               0.010s
        _IO_vfprintf                libc-2.17.so                        0.010s
        func@0x16c10                libittnotify_collector.so           0.005s
        strchrnul                   libc-2.17.so                        0.005s
    Parallel Region Time: 0.015s (4.8%)
        Estimated Ideal Time: 0.005s (1.7%)
        OpenMP Potential Gain: 0.010s (3.1%)
Memory Bound: 50.7% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 6.1% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "128" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:43:30 22/04/2021 UTC
    Collection stop time: 20:43:31 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_512_128 > srad1-log/vtune/36_512_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_512_128 --  srad1 100 0.5 512 128 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.007248478010 % : READ COMMAND LINE PARAMETERS
0.000067000001 s, 0.060706004500 % : READ IMAGE FROM FILE
0.000232000006 s, 0.210205867887 % : RESIZE IMAGE
0.000023000001 s, 0.020839374512 % : SETUP, MEMORY ALLOCATION
0.000095000003 s, 0.086075671017 % : EXTRACT IMAGE
0.091126002371 s, 82.565597534180 % : COMPUTE
0.000823999988 s, 0.746593177319 % : COMPRESS IMAGE
0.017690999433 s, 16.029102325439 % : SAVE IMAGE INTO FILE
0.000302000000 s, 0.273630052805 % : FREE MEMORY
Total time:
0.110367998481 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-66848-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-66848-quartz1453.sc' filvtune: Executing actions 12 % Loading '66848-66853.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-66853-fb44eed5.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.268s
    Paused Time: 0s
Effective CPU Utilization: 0.7% (0.529 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.268
        Serial Time (outside parallel regions): 0.235s (87.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad1                 0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.033s (12.4%)
            Estimated Ideal Time: 0.022s (8.2%)
            OpenMP Potential Gain: 0.011s (4.2%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.283s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.280s                        100.0%          13
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%           3
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 1.420s (91.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  1.350s                 86.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  1.9%
        __kmp_join_call                 libiomp5.so                  0.030s                  1.9%
        __kmp_fork_call                 libiomp5.so                  0.010s                  0.6%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "128" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:43:48 22/04/2021 UTC
    Collection stop time: 20:43:48 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_512_128 > srad1-log/vtune/18_512_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_512_128 --  srad1 100 0.5 512 128 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000001000000 s, 0.000847414485 % : SETUP VARIABLES
0.000007000000 s, 0.005931901745 % : READ COMMAND LINE PARAMETERS
0.000734000001 s, 0.622002243996 % : READ IMAGE FROM FILE
0.000441999990 s, 0.374557226896 % : RESIZE IMAGE
0.000381999998 s, 0.323712348938 % : SETUP, MEMORY ALLOCATION
0.000136000002 s, 0.115248374641 % : EXTRACT IMAGE
0.097678996623 s, 82.774604797363 % : COMPUTE
0.000832999998 s, 0.705896317959 % : COMPRESS IMAGE
0.017521999776 s, 14.848397254944 % : SAVE IMAGE INTO FILE
0.000269999990 s, 0.228801935911 % : FREE MEMORY
Total time:
0.118005998433 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-66940-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-66940-quartz1453.sc' filvtune: Executing actions 12 % Loading '66955.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-66955-5292cbc0.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `srad1'                vtune: Executing actions 22 % Resolving information for `srad1'                vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.194s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.934
    Average CPU Frequency: 2.833 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 5.3% (1.902 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.8% (1.268 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.184s (95.2%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module                     Serial CPU Time
        ----------------------------  -------------------------  ---------------
        [Outside any known module]    [Unknown]                           0.085s
        [Loop@0x4035c1 in main]       srad1                               0.005s
        func@0x7efe0                  libittnotify_collector.so           0.005s
        [Loop@0x48360 in _itoa_word]  libc-2.17.so                        0.005s
        _IO_vfscanf                   libc-2.17.so                        0.005s
        [Others]                      N/A                                 0.010s
    Parallel Region Time: 0.009s (4.8%)
        Estimated Ideal Time: 0.006s (3.1%)
        OpenMP Potential Gain: 0.003s (1.7%)
Memory Bound: 36.0% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 10.1% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "128" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:44:02 22/04/2021 UTC
    Collection stop time: 20:44:03 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_512_128 > srad1-log/vtune/18_512_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_512_128 --  srad1 100 0.5 512 128 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.007503470406 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.056276027113 % : READ IMAGE FROM FILE
0.000274999999 s, 0.343909054995 % : RESIZE IMAGE
0.000023000001 s, 0.028763303533 % : SETUP, MEMORY ALLOCATION
0.000107000000 s, 0.133811891079 % : EXTRACT IMAGE
0.061905000359 s, 77.417060852051 % : COMPUTE
0.000717999996 s, 0.897915303707 % : COMPRESS IMAGE
0.016559999436 s, 20.709579467773 % : SAVE IMAGE INTO FILE
0.000323999993 s, 0.405187398195 % : FREE MEMORY
Total time:
0.079962998629 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-67049-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-67049-quartz1453.sc' filvtune: Executing actions 12 % Loading '67049-67054.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-67054-995d2a58.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 20 % Resolving information for `libpthread.so.0'      vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.213s
    Paused Time: 0s
Effective CPU Utilization: 0.5% (0.335 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.213
        Serial Time (outside parallel regions): 0.177s (83.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.036s (16.9%)
            Estimated Ideal Time: 0.026s (12.0%)
            OpenMP Potential Gain: 0.011s (4.9%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.028s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.026s                        100.0%           3
        Stream image_out.pgm 0xff4f6b54                               0.001s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 0.580s (89.2% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.510s                 78.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  4.6%
        __kmp_fork_call                 libiomp5.so                  0.030s                  4.6%
        __kmp_join_call                 libiomp5.so                  0.010s                  1.5%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "128" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:44:20 22/04/2021 UTC
    Collection stop time: 20:44:21 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_512_128 > srad1-log/vtune/9_512_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_512_128 --  srad1 100 0.5 512 128 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.009960407391 % : READ COMMAND LINE PARAMETERS
0.000980000012 s, 1.220149874687 % : READ IMAGE FROM FILE
0.000399000011 s, 0.496775329113 % : RESIZE IMAGE
0.000414000009 s, 0.515451073647 % : SETUP, MEMORY ALLOCATION
0.000125999999 s, 0.156876415014 % : EXTRACT IMAGE
0.059427000582 s, 73.989639282227 % : COMPUTE
0.000803000003 s, 0.999775886536 % : COMPRESS IMAGE
0.017938999459 s, 22.334968566895 % : SAVE IMAGE INTO FILE
0.000222000002 s, 0.276401311159 % : FREE MEMORY
Total time:
0.080317996442 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-67132-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-67132-quartz1453.sc' filvtune: Executing actions 12 % Loading '67146.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-67146-bc42c815.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.167s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.906
    Average CPU Frequency: 2.755 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 4.0% (1.427 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.6% (1.142 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.153s (91.6%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module        Serial CPU Time
        --------------------------  ------------  ---------------
        [Outside any known module]  [Unknown]              0.055s
        _itoa_word                  libc-2.17.so           0.005s
        strchrnul                   libc-2.17.so           0.005s
        _IO_old_init                libc-2.17.so           0.005s
    Parallel Region Time: 0.014s (8.4%)
        Estimated Ideal Time: 0.011s (6.3%)
        OpenMP Potential Gain: 0.003s (2.1%)
Memory Bound: 40.2% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 8.9% of Clockticks
    DRAM Bound: 8.9% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "128" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:44:34 22/04/2021 UTC
    Collection stop time: 20:44:34 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_512_128 > srad1-log/vtune/9_512_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_512_128 --  srad1 100 0.5 512 128 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000005000000 s, 0.006925975438 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.062333773822 % : READ IMAGE FROM FILE
0.000266999996 s, 0.369847089052 % : RESIZE IMAGE
0.000028000000 s, 0.038785461336 % : SETUP, MEMORY ALLOCATION
0.000125000006 s, 0.173149377108 % : EXTRACT IMAGE
0.053996000439 s, 74.794990539551 % : COMPUTE
0.000630000024 s, 0.872672915459 % : COMPRESS IMAGE
0.016807999462 s, 23.282358169556 % : SAVE IMAGE INTO FILE
0.000288000010 s, 0.398936182261 % : FREE MEMORY
Total time:
0.072191998363 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-67232-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-67232-quartz1453.sc' filvtune: Executing actions 12 % Loading '67232-67237.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-67237-d3e245bd.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.172s
    Paused Time: 0s
Effective CPU Utilization: 0.8% (0.594 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.172
        Serial Time (outside parallel regions): 0.130s (75.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
        Parallel Region Time: 0.042s (24.4%)
            Estimated Ideal Time: 0.036s (20.9%)
            OpenMP Potential Gain: 0.006s (3.5%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.002s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                                                             0.002s                        100.0%           1
        Stream 0x2e4a07a1                                                                           0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                                             0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                                                             0.000s                        100.0%           1
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0xf222eef6                               0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           3
    Spin and Overhead Time: 0.160s (61.6% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.110s                 42.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                 11.5%
        __kmp_fork_call                 libiomp5.so                  0.010s                  3.9%
        __kmp_join_call                 libiomp5.so                  0.010s                  3.8%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "128" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:44:52 22/04/2021 UTC
    Collection stop time: 20:44:52 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_512_128 > srad1-log/vtune/4_512_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_512_128 --  srad1 100 0.5 512 128 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_128 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.011415199377 % : READ COMMAND LINE PARAMETERS
0.000898000028 s, 1.281356215477 % : READ IMAGE FROM FILE
0.000386000000 s, 0.550783395767 % : RESIZE IMAGE
0.000413000002 s, 0.589309692383 % : SETUP, MEMORY ALLOCATION
0.000123999998 s, 0.176935583353 % : EXTRACT IMAGE
0.050383999944 s, 71.892921447754 % : COMPUTE
0.000686999992 s, 0.980280220509 % : COMPRESS IMAGE
0.016927000135 s, 24.153133392334 % : SAVE IMAGE INTO FILE
0.000254999992 s, 0.363859474659 % : FREE MEMORY
Total time:
0.070082001388 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-67311-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-67311-quartz1453.sc' filvtune: Executing actions 12 % Loading '67325.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-67325-f77d0c17.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.155s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.906
    Average CPU Frequency: 3.116 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 5.0% (1.810 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.3% (0.905 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.131s (84.3%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module                     Serial CPU Time
        ----------------------------  -------------------------  ---------------
        [Outside any known module]    [Unknown]                           0.025s
        func@0x7efe0                  libittnotify_collector.so           0.010s
        [Loop@0x402006 in main]       srad1                               0.005s
        [Loop@0x48360 in _itoa_word]  libc-2.17.so                        0.005s
        free                          libc-2.17.so                        0.005s
    Parallel Region Time: 0.024s (15.7%)
        Estimated Ideal Time: 0.021s (13.4%)
        OpenMP Potential Gain: 0.004s (2.3%)
Memory Bound: 87.1% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 14.8% of Clockticks
    DRAM Bound: 14.8% of Clockticks
     | The metric value is high. This indicates that a significant fraction of
     | cycles could be stalled on the main memory (DRAM) because of demand loads
     | or stores.
     |
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "128" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:45:05 22/04/2021 UTC
    Collection stop time: 20:45:05 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_512_128 > srad1-log/vtune/4_512_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_512_256 --  srad1 100 0.5 512 256 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.002900568536 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.020787408575 % : READ IMAGE FROM FILE
0.000530000019 s, 0.256216883659 % : RESIZE IMAGE
0.000029000001 s, 0.014019413851 % : SETUP, MEMORY ALLOCATION
0.000172999993 s, 0.083633057773 % : EXTRACT IMAGE
0.170595005155 s, 82.470413208008 % : COMPUTE
0.001581000048 s, 0.764299809933 % : COMPRESS IMAGE
0.033431001008 s, 16.161485671997 % : SAVE IMAGE INTO FILE
0.000468000013 s, 0.226244360209 % : FREE MEMORY
Total time:
0.206855997443 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-67404-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-67404-quartz1453.sc' filvtune: Executing actions 12 % Loading '67404-67409.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-67409-1089f03d.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libpthread.so.0'      vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.444s
    Paused Time: 0s
Effective CPU Utilization: 0.5% (0.386 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.444
        Serial Time (outside parallel regions): 0.405s (91.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.020s
            __kmp_join_call                 libiomp5.so           0.020s
            main                            srad1                 0.010s
            _IO_fprintf                     libc.so.6             0.010s
        Parallel Region Time: 0.040s (8.9%)
            Estimated Ideal Time: 0.027s (6.1%)
            OpenMP Potential Gain: 0.012s (2.8%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.880s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.808s                        100.0%          30
        Condition Variable                                            0.070s                        100.0%           1
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%           9
        [Others]                                                      0.000s                        100.0%           8
    Spin and Overhead Time: 5.160s (96.8% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  5.050s                 94.7%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.6%
        __kmp_fork_call                 libiomp5.so                  0.030s                  0.6%
        __kmp_join_call                 libiomp5.so                  0.030s                  0.6%
        __kmp_join_barrier              libiomp5.so                  0.020s                  0.4%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "256" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:45:23 22/04/2021 UTC
    Collection stop time: 20:45:23 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_512_256 > srad1-log/vtune/36_512_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_512_256 --  srad1 100 0.5 512 256 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.002995382762 % : READ COMMAND LINE PARAMETERS
0.000798000023 s, 0.341473639011 % : READ IMAGE FROM FILE
0.000646999979 s, 0.276858955622 % : RESIZE IMAGE
0.000362999999 s, 0.155331999063 % : SETUP, MEMORY ALLOCATION
0.000174000001 s, 0.074456661940 % : EXTRACT IMAGE
0.198690995574 s, 85.022232055664 % : COMPUTE
0.001307000057 s, 0.559280753136 % : COMPRESS IMAGE
0.031169999391 s, 13.338011741638 % : SAVE IMAGE INTO FILE
0.000536000007 s, 0.229360744357 % : FREE MEMORY
Total time:
0.233693003654 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-67516-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-67516-quartz1453.sc' filvtune: Executing actions 12 % Loading '67530.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-67530-a1a9e867.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.316s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.164
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.703 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 9.0% (3.239 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.0% (2.159 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.294s (93.3%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                                                                                                     Module        Serial CPU Time
        -----------------------------------------------------------------------------------------------------------  ------------  ---------------
        [Outside any known module]                                                                                   [Unknown]              0.160s
        _IO_vfprintf                                                                                                 libc-2.17.so           0.010s
        [Loop@0x401951 in main]                                                                                      srad1                  0.005s
        _INTERNAL_25_______src_kmp_barrier_cpp_ddfed41b::__kmp_wait_template<kmp_flag_64, (int)0, (bool)0, (bool)1>  libiomp5.so            0.005s
        _IO_vfscanf                                                                                                  libc-2.17.so           0.005s
    Parallel Region Time: 0.021s (6.7%)
        Estimated Ideal Time: 0.009s (2.9%)
        OpenMP Potential Gain: 0.012s (3.8%)
Memory Bound: 20.6% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 4.7% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "256" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:45:38 22/04/2021 UTC
    Collection stop time: 20:45:38 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_512_256 > srad1-log/vtune/36_512_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_512_256 --  srad1 100 0.5 512 256 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.004352872726 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.031195590273 % : READ IMAGE FROM FILE
0.000464999990 s, 0.337347656488 % : RESIZE IMAGE
0.000018999999 s, 0.013784097508 % : SETUP, MEMORY ALLOCATION
0.000171000007 s, 0.124056883156 % : EXTRACT IMAGE
0.099304996431 s, 72.043678283691 % : COMPUTE
0.001575000002 s, 1.142629146576 % : COMPRESS IMAGE
0.035790000111 s, 25.964885711670 % : SAVE IMAGE INTO FILE
0.000465999998 s, 0.338073134422 % : FREE MEMORY
Total time:
0.137840002775 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-67642-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-67642-quartz1453.sc' filvtune: Executing actions 12 % Loading '67642-67647.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-67647-f3a90bda.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.346s
    Paused Time: 0s
Effective CPU Utilization: 1.2% (0.848 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.346
        Serial Time (outside parallel regions): 0.310s (89.5%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.020s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.036s (10.5%)
            Estimated Ideal Time: 0.024s (7.0%)
            OpenMP Potential Gain: 0.012s (3.4%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.258s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.255s                        100.0%          14
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%           4
        [Others]                                                      0.000s                        100.0%           5
    Spin and Overhead Time: 2.170s (88.2% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  2.090s                 85.0%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  1.2%
        __kmp_fork_call                 libiomp5.so                  0.020s                  0.8%
        __kmp_join_call                 libiomp5.so                  0.020s                  0.8%
        __kmp_join_barrier              libiomp5.so                  0.010s                  0.4%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "256" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:45:56 22/04/2021 UTC
    Collection stop time: 20:45:57 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_512_256 > srad1-log/vtune/18_512_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_512_256 --  srad1 100 0.5 512 256 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.004728867207 % : READ COMMAND LINE PARAMETERS
0.000701999990 s, 0.474237799644 % : READ IMAGE FROM FILE
0.000612000003 s, 0.413438081741 % : RESIZE IMAGE
0.000379000005 s, 0.256034374237 % : SETUP, MEMORY ALLOCATION
0.000182000003 s, 0.122950538993 % : EXTRACT IMAGE
0.110546998680 s, 74.680290222168 % : COMPUTE
0.001621000003 s, 1.095070481300 % : COMPRESS IMAGE
0.033530998975 s, 22.651948928833 % : SAVE IMAGE INTO FILE
0.000445999991 s, 0.301296383142 % : FREE MEMORY
Total time:
0.148027002811 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-67734-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-67734-quartz1453.sc' filvtune: Executing actions 12 % Loading '67749.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-67749-54ded422.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.230s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.862
    Average CPU Frequency: 2.751 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 26.7% (9.620 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.5% (1.832 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.215s (93.7%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                     Module                     Serial CPU Time
        ---------------------------  -------------------------  ---------------
        [Outside any known module]   [Unknown]                           0.100s
        func@0x80c79                 libittnotify_collector.so           0.005s
        [Loop@0x4035c1 in main]      srad1                               0.005s
        _pthread_cleanup_push_defer  libpthread-2.17.so                  0.005s
        _IO_vfprintf                 libc-2.17.so                        0.005s
        [Others]                     N/A                                 0.010s
    Parallel Region Time: 0.015s (6.3%)
        Estimated Ideal Time: 0.011s (4.6%)
        OpenMP Potential Gain: 0.004s (1.7%)
Memory Bound: 13.5% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 12.2% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "256" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:46:11 22/04/2021 UTC
    Collection stop time: 20:46:11 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_512_256 > srad1-log/vtune/18_512_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_512_256 --  srad1 100 0.5 512 256 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.005769951735 % : READ COMMAND LINE PARAMETERS
0.000043000000 s, 0.041351322085 % : READ IMAGE FROM FILE
0.000508999976 s, 0.489484250546 % : RESIZE IMAGE
0.000023000001 s, 0.022118149325 % : SETUP, MEMORY ALLOCATION
0.000176000001 s, 0.169251933694 % : EXTRACT IMAGE
0.069743998349 s, 67.069923400879 % : COMPUTE
0.001357999980 s, 1.305932402611 % : COMPRESS IMAGE
0.031677998602 s, 30.463424682617 % : SAVE IMAGE INTO FILE
0.000449999992 s, 0.432746380568 % : FREE MEMORY
Total time:
0.103987000883 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-67842-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-67842-quartz1453.sc' filvtune: Executing actions 12 % Loading '67842-67847.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-67847-79f4c65f.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.227s
    Paused Time: 0s
Effective CPU Utilization: 1.5% (1.074 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.227
        Serial Time (outside parallel regions): 0.187s (82.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad1                 0.020s
            __kmp_fork_call                 libiomp5.so           0.010s
            __kmp_join_call                 libiomp5.so           0.010s
            _IO_fprintf                     libc.so.6             0.010s
        Parallel Region Time: 0.040s (17.7%)
            Estimated Ideal Time: 0.030s (13.4%)
            OpenMP Potential Gain: 0.010s (4.3%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.029s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.027s                        100.0%           5
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 0.610s (71.8% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  0.550s                 64.7%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  3.5%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_leave  libiomp5.so                  0.010s                  1.2%
        __kmp_fork_call                                                                libiomp5.so                  0.010s                  1.2%
        __kmp_join_call                                                                libiomp5.so                  0.010s                  1.2%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "256" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:46:29 22/04/2021 UTC
    Collection stop time: 20:46:29 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_512_256 > srad1-log/vtune/9_512_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_512_256 --  srad1 100 0.5 512 256 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.007340122946 % : READ COMMAND LINE PARAMETERS
0.000697000010 s, 0.639508187771 % : READ IMAGE FROM FILE
0.000686999992 s, 0.630333065987 % : RESIZE IMAGE
0.000387000007 s, 0.355078428984 % : SETUP, MEMORY ALLOCATION
0.000249000004 s, 0.228461325169 % : EXTRACT IMAGE
0.071466997266 s, 65.572067260742 % : COMPUTE
0.001610000036 s, 1.477199673653 % : COMPRESS IMAGE
0.033445999026 s, 30.687219619751 % : SAVE IMAGE INTO FILE
0.000438999996 s, 0.402789235115 % : FREE MEMORY
Total time:
0.108989998698 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-67924-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-67924-quartz1453.sc' filvtune: Executing actions 12 % Loading '67939.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-67939-8edb3c38.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.191s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.856
    Average CPU Frequency: 2.682 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 14.9% (5.353 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.5% (1.784 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.167s (87.5%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module              Serial CPU Time
        --------------------------  ------------------  ---------------
        [Outside any known module]  [Unknown]                    0.055s
        [Loop@0x4035c1 in main]     srad1                        0.005s
        __svml_log2_l9              srad1                        0.005s
        __GI___pthread_mutex_lock   libpthread-2.17.so           0.005s
        [Loop@0x4025b5 in main]     srad1                        0.005s
        [Others]                    N/A                          0.010s
    Parallel Region Time: 0.024s (12.5%)
        Estimated Ideal Time: 0.020s (10.2%)
        OpenMP Potential Gain: 0.004s (2.2%)
Memory Bound: 9.2% of Pipeline Slots
    Cache Bound: 10.7% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "256" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:46:42 22/04/2021 UTC
    Collection stop time: 20:46:42 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_512_256 > srad1-log/vtune/9_512_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_512_256 --  srad1 100 0.5 512 256 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.006710058544 % : READ COMMAND LINE PARAMETERS
0.000042000000 s, 0.040260348469 % : READ IMAGE FROM FILE
0.000445999991 s, 0.427526563406 % : RESIZE IMAGE
0.000021000000 s, 0.020130174235 % : SETUP, MEMORY ALLOCATION
0.000172999993 s, 0.165834307671 % : EXTRACT IMAGE
0.070794999599 s, 67.862655639648 % : COMPUTE
0.001289000036 s, 1.235609292984 % : COMPRESS IMAGE
0.031140999869 s, 29.851133346558 % : SAVE IMAGE INTO FILE
0.000407000014 s, 0.390141963959 % : FREE MEMORY
Total time:
0.104321002960 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-68022-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-68022-quartz1453.sc' filvtune: Executing actions 12 % Loading '68022-68027.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-68027-988ea4eb.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.195s
    Paused Time: 0s
Effective CPU Utilization: 0.9% (0.676 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.195
        Serial Time (outside parallel regions): 0.138s (70.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            _IO_fprintf                     libc.so.6             0.020s
            __kmp_fork_call                 libiomp5.so           0.011s
            __kmp_join_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.057s (29.4%)
            Estimated Ideal Time: 0.050s (25.7%)
            OpenMP Potential Gain: 0.007s (3.7%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.003s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                                                             0.002s                        100.0%           1
        Stream 0x2e4a07a1                                                                           0.001s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                                                             0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                                                             0.000s                        100.0%           1
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0xf222eef6                               0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           3
    Spin and Overhead Time: 0.260s (66.7% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |
     | A significant portion of CPU time is spent in synchronization or
     | threading overhead. Consider increasing task granularity or the scope of
     | data synchronization.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.170s                 43.6%
        __kmp_fork_call                 libiomp5.so                  0.031s                  8.0%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  7.7%
        __kmp_join_call                 libiomp5.so                  0.029s                  7.4%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "256" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:46:59 22/04/2021 UTC
    Collection stop time: 20:47:00 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_512_256 > srad1-log/vtune/4_512_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_512_256 --  srad1 100 0.5 512 256 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_256 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.007561865728 % : READ COMMAND LINE PARAMETERS
0.000918000005 s, 0.867724061012 % : READ IMAGE FROM FILE
0.000744000019 s, 0.703253507614 % : RESIZE IMAGE
0.000475000008 s, 0.448985755444 % : SETUP, MEMORY ALLOCATION
0.000243000002 s, 0.229691669345 % : EXTRACT IMAGE
0.071052998304 s, 67.161651611328 % : COMPUTE
0.001276000054 s, 1.206117630005 % : COMPRESS IMAGE
0.030634000897 s, 28.956274032593 % : SAVE IMAGE INTO FILE
0.000442999997 s, 0.418738335371 % : FREE MEMORY
Total time:
0.105793997645 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-68100-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-68100-quartz1453.sc' filvtune: Executing actions 12 % Loading '68114.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-68114-ab7cc26c.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `[vdso]'               vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.188s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.861
    Average CPU Frequency: 3.096 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 3.4% (1.227 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 1.5% (1.090 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.146s (77.2%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module     Serial CPU Time
        --------------------------  ---------  ---------------
        [Outside any known module]  [Unknown]           0.050s
        [Loop@0x4035c1 in main]     srad1               0.010s
        [Loop@0x4025b5 in main]     srad1               0.005s
    Parallel Region Time: 0.043s (22.8%)
        Estimated Ideal Time: 0.039s (20.5%)
        OpenMP Potential Gain: 0.004s (2.3%)
Memory Bound: 16.5% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 8.7% of Clockticks
    DRAM Bound: 8.7% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "256" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:47:13 22/04/2021 UTC
    Collection stop time: 20:47:13 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_512_256 > srad1-log/vtune/4_512_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_36_512_512 --  srad1 100 0.5 512 512 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000001000000 s, 0.000404144928 % : SETUP VARIABLES
0.000006000000 s, 0.002424869454 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.018186520785 % : READ IMAGE FROM FILE
0.001012000022 s, 0.408994644880 % : RESIZE IMAGE
0.000029000001 s, 0.011720202863 % : SETUP, MEMORY ALLOCATION
0.000334999990 s, 0.135388538241 % : EXTRACT IMAGE
0.178374007344 s, 72.088943481445 % : COMPUTE
0.003134999890 s, 1.266994357109 % : COMPRESS IMAGE
0.063667997718 s, 25.731098175049 % : SAVE IMAGE INTO FILE
0.000830999983 s, 0.335844427347 % : FREE MEMORY
Total time:
0.247436001897 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-68193-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-68193-quartz1453.sc' filvtune: Executing actions 12 % Loading '68193-68198.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-68198-b316c3e6.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.545s
    Paused Time: 0s
Effective CPU Utilization: 0.8% (0.585 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.545
        Serial Time (outside parallel regions): 0.496s (91.0%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad1                 0.030s
            _IO_fprintf                     libc.so.6             0.010s
            _IO_fclose                      libc.so.6             0.010s
        Parallel Region Time: 0.049s (9.0%)
            Estimated Ideal Time: 0.034s (6.2%)
            OpenMP Potential Gain: 0.015s (2.8%)
    Total Thread Count: 36
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 1.843s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 1.841s                        100.0%          34
        Stream image_out.pgm 0xff4f6b54                               0.002s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream 0xdc537a37                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           8
    Spin and Overhead Time: 6.580s (95.9% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                  6.448s                 94.0%
        __kmp_join_barrier                                                       libiomp5.so                  0.050s                  0.7%
        __kmp_get_global_thread_id_reg                                           libiomp5.so                  0.030s                  0.4%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.012s                  0.2%
        __kmp_fork_call                                                          libiomp5.so                  0.010s                  0.1%
        [Others]                                                                 N/A                          0.030s                  0.4%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "512" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:47:30 22/04/2021 UTC
    Collection stop time: 20:47:31 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_36_512_512 > srad1-log/vtune/36_512_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_36_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_36_512_512 --  srad1 100 0.5 512 512 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.002505143406 % : READ COMMAND LINE PARAMETERS
0.000847999996 s, 0.265545189381 % : READ IMAGE FROM FILE
0.001242000028 s, 0.388923496008 % : RESIZE IMAGE
0.000487999991 s, 0.152813747525 % : SETUP, MEMORY ALLOCATION
0.000423999998 s, 0.132772594690 % : EXTRACT IMAGE
0.213844001293 s, 66.963729858398 % : COMPUTE
0.005429000128 s, 1.700052976608 % : COMPRESS IMAGE
0.096138998866 s, 30.105247497559 % : SAVE IMAGE INTO FILE
0.000921000028 s, 0.288404643536 % : FREE MEMORY
Total time:
0.319343000650 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-68303-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-68303-quartz1453.sc' filvtune: Executing actions 12 % Loading '68317.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-68317-0290be4b.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.410s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.122
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 2.652 GHz 
    Total Thread Count: 36
Effective Physical Core Utilization: 5.9% (2.117 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 5.0% (3.621 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.375s (91.6%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module                     Serial CPU Time
        ----------------------------  -------------------------  ---------------
        [Outside any known module]    [Unknown]                           0.185s
        [Loop@0x48360 in _itoa_word]  libc-2.17.so                        0.020s
        _IO_vfprintf                  libc-2.17.so                        0.020s
        _IO_file_xsputn               libc-2.17.so                        0.010s
        func@0x7efe0                  libittnotify_collector.so           0.005s
        [Others]                      N/A                                 0.015s
    Parallel Region Time: 0.034s (8.4%)
        Estimated Ideal Time: 0.014s (3.4%)
        OpenMP Potential Gain: 0.020s (5.0%)
Memory Bound: 3.4% of Pipeline Slots
    Cache Bound: 1.3% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "512" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 20:47:44 22/04/2021 UTC
    Collection stop time: 20:47:45 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_36_512_512 > srad1-log/vtune/36_512_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_36_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_18_512_512 --  srad1 100 0.5 512 512 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000006000000 s, 0.003095847555 % : READ COMMAND LINE PARAMETERS
0.000045000001 s, 0.023218855262 % : READ IMAGE FROM FILE
0.001006999984 s, 0.519586384296 % : RESIZE IMAGE
0.000024000001 s, 0.012383390218 % : SETUP, MEMORY ALLOCATION
0.000323999993 s, 0.167175769806 % : EXTRACT IMAGE
0.119915001094 s, 61.873088836670 % : COMPUTE
0.003131000092 s, 1.615516424179 % : COMPRESS IMAGE
0.068544000387 s, 35.366962432861 % : SAVE IMAGE INTO FILE
0.000812000013 s, 0.418971329927 % : FREE MEMORY
Total time:
0.193808004260 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-68428-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-68428-quartz1453.sc' filvtune: Executing actions 12 % Loading '68428-68433.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-68433-16a05af5.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.370s
    Paused Time: 0s
Effective CPU Utilization: 1.6% (1.162 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.370
        Serial Time (outside parallel regions): 0.318s (86.0%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            _IO_fprintf                     libc.so.6             0.040s
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad1                 0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.052s (14.0%)
            Estimated Ideal Time: 0.038s (10.2%)
            OpenMP Potential Gain: 0.014s (3.8%)
    Total Thread Count: 18
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.283s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.280s                        100.0%          13
        Stream image_out.pgm 0xff4f6b54                               0.003s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           2
        Stream 0xdc537a37                                             0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           7
    Spin and Overhead Time: 2.620s (86.2% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                  2.510s                 82.6%
        __kmp_fork_call                                                                libiomp5.so                  0.040s                  1.3%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  1.0%
        __kmp_join_call                                                                libiomp5.so                  0.020s                  0.7%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_enter  libiomp5.so                  0.010s                  0.3%
        __kmp_join_barrier                                                             libiomp5.so                  0.010s                  0.3%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "512" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:48:02 22/04/2021 UTC
    Collection stop time: 20:48:02 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_18_512_512 > srad1-log/vtune/18_512_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_18_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_18_512_512 --  srad1 100 0.5 512 512 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000001000000 s, 0.000510342070 % : SETUP VARIABLES
0.000007000000 s, 0.003572394373 % : READ COMMAND LINE PARAMETERS
0.000713000016 s, 0.363873898983 % : READ IMAGE FROM FILE
0.001248999964 s, 0.637417256832 % : RESIZE IMAGE
0.000414000009 s, 0.211281627417 % : SETUP, MEMORY ALLOCATION
0.000422999990 s, 0.215874701738 % : EXTRACT IMAGE
0.125901997089 s, 64.253089904785 % : COMPUTE
0.003174999962 s, 1.620336055756 % : COMPRESS IMAGE
0.063320003450 s, 32.314861297607 % : SAVE IMAGE INTO FILE
0.000743000011 s, 0.379184156656 % : FREE MEMORY
Total time:
0.195947006345 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-68520-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-68520-quartz1453.sc' filvtune: Executing actions 12 % Loading '68535.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-68535-59e65bdd.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad1'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.283s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.866
    Average CPU Frequency: 2.628 GHz 
    Total Thread Count: 18
Effective Physical Core Utilization: 6.9% (2.468 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.6% (2.586 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.255s (90.0%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                    Module                     Serial CPU Time
        --------------------------  -------------------------  ---------------
        [Outside any known module]  [Unknown]                           0.110s
        _IO_vfprintf                libc-2.17.so                        0.015s
        _IO_file_xsputn             libc-2.17.so                        0.010s
        func@0xe230                 libittnotify_collector.so           0.005s
        [Loop@0x4035c1 in main]     srad1                               0.005s
        [Others]                    N/A                                 0.020s
    Parallel Region Time: 0.028s (10.0%)
        Estimated Ideal Time: 0.020s (7.2%)
        OpenMP Potential Gain: 0.008s (2.8%)
Memory Bound: 15.6% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 1.7% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "512" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:48:16 22/04/2021 UTC
    Collection stop time: 20:48:16 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_18_512_512 > srad1-log/vtune/18_512_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_18_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_9_512_512 --  srad1 100 0.5 512 512 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.004205972422 % : READ COMMAND LINE PARAMETERS
0.000048000002 s, 0.028840953484 % : READ IMAGE FROM FILE
0.001121000038 s, 0.673556447029 % : RESIZE IMAGE
0.000035000001 s, 0.021029861644 % : SETUP, MEMORY ALLOCATION
0.000394000002 s, 0.236736163497 % : EXTRACT IMAGE
0.099890999496 s, 60.019828796387 % : COMPUTE
0.002656999975 s, 1.596467018127 % : COMPRESS IMAGE
0.061457000673 s, 36.926635742188 % : SAVE IMAGE INTO FILE
0.000820000016 s, 0.492699623108 % : FREE MEMORY
Total time:
0.166429996490 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-68628-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-68628-quartz1453.sc' filvtune: Executing actions 12 % Loading '68628-68634.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-68634-7df69551.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.278s
    Paused Time: 0s
Effective CPU Utilization: 1.8% (1.275 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.278
        Serial Time (outside parallel regions): 0.209s (75.4%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.050s
            _IO_fprintf                     libc.so.6             0.030s
            __kmp_join_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.068s (24.6%)
            Estimated Ideal Time: 0.051s (18.2%)
            OpenMP Potential Gain: 0.018s (6.3%)
    Total Thread Count: 9
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.021s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                 0.018s                        100.0%           5
        Stream image_out.pgm 0xff4f6b54                               0.003s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 1.020s (74.5% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.920s                 67.2%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.050s                  3.6%
        __kmp_join_call                 libiomp5.so                  0.030s                  2.2%
        __kmp_fork_call                 libiomp5.so                  0.010s                  0.7%
        __kmp_join_barrier              libiomp5.so                  0.010s                  0.7%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "512" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:48:33 22/04/2021 UTC
    Collection stop time: 20:48:34 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_9_512_512 > srad1-log/vtune/9_512_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_9_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_9_512_512 --  srad1 100 0.5 512 512 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.004174867179 % : READ COMMAND LINE PARAMETERS
0.000774000015 s, 0.461621016264 % : READ IMAGE FROM FILE
0.001147000003 s, 0.684081792831 % : RESIZE IMAGE
0.000364000007 s, 0.217093110085 % : SETUP, MEMORY ALLOCATION
0.000357999990 s, 0.213514640927 % : EXTRACT IMAGE
0.097726002336 s, 58.284725189209 % : COMPUTE
0.003141999943 s, 1.873919010162 % : COMPRESS IMAGE
0.063415996730 s, 37.821914672852 % : SAVE IMAGE INTO FILE
0.000736000016 s, 0.438957482576 % : FREE MEMORY
Total time:
0.167669996619 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-68711-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-68711-quartz1453.sc' filvtune: Executing actions 12 % Loading '68727.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-68727-a3c0b68e.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.245s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.827
    Average CPU Frequency: 2.725 GHz 
    Total Thread Count: 9
Effective Physical Core Utilization: 6.5% (2.328 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 3.2% (2.328 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.204s (83.2%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                      Module              Serial CPU Time
        ----------------------------  ------------------  ---------------
        [Outside any known module]    [Unknown]                    0.060s
        _IO_vfprintf                  libc-2.17.so                 0.015s
        [Loop@0x4035c1 in main]       srad1                        0.005s
        _pthread_cleanup_pop_restore  libpthread-2.17.so           0.005s
        __svml_log2_l9                srad1                        0.005s
        [Others]                      N/A                          0.020s
    Parallel Region Time: 0.041s (16.8%)
        Estimated Ideal Time: 0.037s (15.2%)
        OpenMP Potential Gain: 0.004s (1.6%)
Memory Bound: 7.8% of Pipeline Slots
    Cache Bound: 6.2% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "512" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:48:47 22/04/2021 UTC
    Collection stop time: 20:48:47 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_9_512_512 > srad1-log/vtune/9_512_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_9_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad1-log/vtune/srad_tr_4_512_512 --  srad1 100 0.5 512 512 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000007000000 s, 0.003935502842 % : READ COMMAND LINE PARAMETERS
0.000044000000 s, 0.024737447500 % : READ IMAGE FROM FILE
0.001020999975 s, 0.574021160603 % : RESIZE IMAGE
0.000027000000 s, 0.015179797076 % : SETUP, MEMORY ALLOCATION
0.000323999993 s, 0.182157561183 % : EXTRACT IMAGE
0.114835001528 s, 64.561920166016 % : COMPUTE
0.002392000053 s, 1.344817519188 % : COMPRESS IMAGE
0.058485001326 s, 32.881126403809 % : SAVE IMAGE INTO FILE
0.000732999993 s, 0.412103354931 % : FREE MEMORY
Total time:
0.177867993712 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-68812-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-68812-quartz1453.sc' filvtune: Executing actions 12 % Loading '68812-68817.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-68817-ec5d64dd.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad1'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.280s
    Paused Time: 0s
Effective CPU Utilization: 1.6% (1.157 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 0.280
        Serial Time (outside parallel regions): 0.184s (65.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            main                            srad1                 0.030s
            _IO_fprintf                     libc.so.6             0.030s
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.096s (34.2%)
            Estimated Ideal Time: 0.084s (30.2%)
            OpenMP Potential Gain: 0.011s (4.1%)
    Total Thread Count: 4
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 0.003s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Stream image_out.pgm 0xff4f6b54                               0.003s                        100.0%           1
        Stream 0x2e4a07a1                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0xcffaa93e                               0.000s                        100.0%           1
        Stream 0x803fa179                                             0.000s                        100.0%           1
        Stream /proc/meminfo 0x1efd06c1                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 0.360s (52.9% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                  0.300s                 44.1%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  4.4%
        __kmp_join_call                 libiomp5.so                  0.020s                  2.9%
        __kmp_fork_call                 libiomp5.so                  0.010s                  1.5%
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "512" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:49:05 22/04/2021 UTC
    Collection stop time: 20:49:06 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_tr_4_512_512 > srad1-log/vtune/4_512_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_tr_4_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad1-log/vtune/srad_hpc_4_512_512 --  srad1 100 0.5 512 512 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_512 -command stop.
The file was not opened for reading
Time spent in different stages of the application:
0.000000000000 s, 0.000000000000 % : SETUP VARIABLES
0.000008000000 s, 0.004439634737 % : READ COMMAND LINE PARAMETERS
0.001118000015 s, 0.620438933372 % : READ IMAGE FROM FILE
0.001430999953 s, 0.794139683247 % : RESIZE IMAGE
0.000533999992 s, 0.296345621347 % : SETUP, MEMORY ALLOCATION
0.000441000011 s, 0.244734883308 % : EXTRACT IMAGE
0.115129001439 s, 63.891338348389 % : COMPUTE
0.002434999915 s, 1.351313829422 % : COMPRESS IMAGE
0.058189000934 s, 32.292236328125 % : SAVE IMAGE INTO FILE
0.000910000002 s, 0.505008459091 % : FREE MEMORY
Total time:
0.180195003748 s
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-68890-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-68890-quartz1453.sc' filvtune: Executing actions 12 % Loading '68905.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-68905-3f22f92b.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `srad1'                vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 33 % Setting data model parameters                    vtune: Executing actions 34 % Setting data model parameters                    vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 39 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 41 % Discarding redundant overtime data               vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.269s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.822
    Average CPU Frequency: 3.005 GHz 
    Total Thread Count: 4
Effective Physical Core Utilization: 4.4% (1.585 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 2.1% (1.492 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
    Serial Time (outside parallel regions): 0.187s (69.6%)
     | Serial Time of your application is high. It directly impacts application
     | Elapsed Time and scalability. Explore options for parallelization,
     | algorithm or microarchitecture tuning of the serial part of the
     | application.
     |

        Top Serial Hotspots (outside parallel regions)
        Function                                                                                                     Module                     Serial CPU Time
        -----------------------------------------------------------------------------------------------------------  -------------------------  ---------------
        [Outside any known module]                                                                                   [Unknown]                           0.045s
        _IO_vfprintf                                                                                                 libc-2.17.so                        0.015s
        _INTERNAL_25_______src_kmp_barrier_cpp_ddfed41b::__kmp_wait_template<kmp_flag_64, (int)0, (bool)0, (bool)1>  libiomp5.so                         0.010s
        func@0x7efe0                                                                                                 libittnotify_collector.so           0.005s
        [Loop@0x402ec0 in main]                                                                                      srad1                               0.005s
        [Others]                                                                                                     N/A                                 0.015s
    Parallel Region Time: 0.082s (30.4%)
        Estimated Ideal Time: 0.074s (27.7%)
        OpenMP Potential Gain: 0.007s (2.7%)
Memory Bound: 9.6% of Pipeline Slots
    Cache Bound: 4.9% of Clockticks
    DRAM Bound: 4.9% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad1 "100" "0.5" "512" "512" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:49:20 22/04/2021 UTC
    Collection stop time: 20:49:20 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad1-log/vtune/srad_hpc_4_512_512 > srad1-log/vtune/4_512_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad1-log/vtune/srad_hpc_4_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_64_64 --  srad2 64 64 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-68996-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-68996-quartz1453.sc' filvtune: Executing actions 12 % Loading '68996-69001.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-69001-79dc5ef4.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.330s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.027 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.330
        Serial Time (outside parallel regions): 1.234s (92.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.095s (7.2%)
            Estimated Ideal Time: 0.035s (2.7%)
            OpenMP Potential Gain: 0.060s (4.5%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.550s (99.6% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 34.468s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                34.466s                        100.0%         141
        Mutex 0x6cb3026d                                              0.001s                        100.0%          18
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 15.590s (99.8% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 15.380s                 98.5%
        __kmp_join_barrier              libiomp5.so                  0.110s                  0.7%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                 libiomp5.so                  0.020s                  0.1%
        __kmp_join_call                 libiomp5.so                  0.020s                  0.1%
        [Others]                        N/A                          0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "64" "64" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 20:49:38 22/04/2021 UTC
    Collection stop time: 20:49:39 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_64_64 > srad2-log/vtune/36_64_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_64_64 --  srad2 100 0.5 64 64 36 srad2 64 64 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-69175-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-69175-quartz1453.sc' filvtune: Executing actions 12 % Loading '69189.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-69189-7963fd68.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.087s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.143
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 3.352 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.144 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.289 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "64" "64" "64" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:49:55 22/04/2021 UTC
    Collection stop time: 20:49:55 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_64_64 > srad2-log/vtune/36_64_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_64_64 --  srad2 64 64 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-69266-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-69266-quartz1453.sc' filvtune: Executing actions 12 % Loading '69266-69271.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-69271-cfca5230.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.242s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.009 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.242
        Serial Time (outside parallel regions): 1.177s (94.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
        Parallel Region Time: 0.065s (5.2%)
            Estimated Ideal Time: 0.021s (1.7%)
            OpenMP Potential Gain: 0.044s (3.5%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.280s (99.5% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 32.807s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                32.544s                        100.0%         138
        Condition Variable                                            0.261s                        100.0%           2
        Mutex 0x6cb3026d                                              0.001s                        100.0%          25
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 14.340s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module                Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  --------------------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                          14.000s                 97.6%
        __kmp_join_barrier              libiomp5.so                           0.140s                  1.0%
        sched_yield                     libc.so.6                             0.120s                  0.8%
        __kmp_join_call                 libiomp5.so                           0.040s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                           0.030s                  0.2%
        __tls_get_addr                  ld-linux-x86-64.so.2                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "64" "64" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 20:50:09 22/04/2021 UTC
    Collection stop time: 20:50:11 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_64_64 > srad2-log/vtune/18_64_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_64_64 --  srad2 100 0.5 64 64 18 srad2 64 64 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-69445-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-69445-quartz1453.sc' filvtune: Executing actions 12 % Loading '69459.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-69459-bfeb5b01.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libc-2.17.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.082s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.183 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.366 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "64" "64" "64" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:50:26 22/04/2021 UTC
    Collection stop time: 20:50:27 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_64_64 > srad2-log/vtune/18_64_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_64_64 --  srad2 64 64 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-69533-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-69533-quartz1453.sc' filvtune: Executing actions 12 % Loading '69533-69538.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-69538-065f252f.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.315s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.028 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.315
        Serial Time (outside parallel regions): 1.237s (94.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __kmp_fork_call                 libiomp5.so               0.020s
            __pthread_create_2_1            libpthread.so.0           0.010s
            __kmp_join_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.077s (5.9%)
            Estimated Ideal Time: 0.025s (1.9%)
            OpenMP Potential Gain: 0.052s (4.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.410s (99.0% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 33.627s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                33.625s                        100.0%         139
        Mutex 0x6cb3026d                                              0.001s                        100.0%          21
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.520s (99.8% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.330s                 98.4%
        __kmp_join_barrier              libiomp5.so                  0.050s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                 libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                 libiomp5.so                  0.020s                  0.1%
        [Others]                        N/A                          0.060s                  0.4%
Collection and Platform Info
    Application Command Line: srad2 "64" "64" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 20:50:40 22/04/2021 UTC
    Collection stop time: 20:50:42 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_64_64 > srad2-log/vtune/9_64_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_64_64 --  srad2 100 0.5 64 64 9 srad2 64 64 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-69710-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-69710-quartz1453.sc' filvtune: Executing actions 12 % Loading '69724.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-69724-042dc655.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.082s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.184 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.368 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "64" "64" "64" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:50:58 22/04/2021 UTC
    Collection stop time: 20:50:58 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_64_64 > srad2-log/vtune/9_64_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_64_64 --  srad2 64 64 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-69797-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-69797-quartz1453.sc' filvtune: Executing actions 12 % Loading '69797-69802.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-69802-45dcbb45.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.172s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.000 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.172
        Serial Time (outside parallel regions): 1.073s (91.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.020s
        Parallel Region Time: 0.099s (8.4%)
            Estimated Ideal Time: 0.017s (1.4%)
            OpenMP Potential Gain: 0.082s (7.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.960s (99.5% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 29.332s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                29.321s                        100.0%         127
        Mutex 0x6cb3026d                                              0.010s                        100.0%          26
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 16.039s (100.0% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 15.340s                 95.6%
        sched_yield                     libc.so.6                    0.450s                  2.8%
        __kmp_join_barrier              libiomp5.so                  0.100s                  0.6%
        __kmp_join_call                 libiomp5.so                  0.080s                  0.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.039s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "64" "64" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:51:11 22/04/2021 UTC
    Collection stop time: 20:51:13 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_64_64 > srad2-log/vtune/4_64_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_64_64 --  srad2 100 0.5 64 64 4 srad2 64 64 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-69973-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-69973-quartz1453.sc' filvtune: Executing actions 12 % Loading '69987.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-69987-1d131d7b.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libc-2.17.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.083s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.181 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.363 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "64" "64" "64" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:51:28 22/04/2021 UTC
    Collection stop time: 20:51:28 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_64_64 > srad2-log/vtune/4_64_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_64_128 --  srad2 64 128 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-70060-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-70060-quartz1453.sc' filvtune: Executing actions 12 % Loading '70060-70065.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-70065-3caa1eae.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `srad2'                
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.341s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.043 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.341
        Serial Time (outside parallel regions): 1.264s (94.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.076s (5.7%)
            Estimated Ideal Time: 0.033s (2.5%)
            OpenMP Potential Gain: 0.043s (3.2%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.960s (99.5% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 34.708s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                                              34.707s                        100.0%         150
        Mutex 0x6cb3026d                                                                            0.000s                        100.0%          26
        Stream 0x61a5d4cb                                                                           0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                                                             0.000s                        100.0%           2
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0x7f55e560                               0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           3
    Spin and Overhead Time: 14.980s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                 14.780s                 98.3%
        __kmp_join_barrier                                                       libiomp5.so                  0.100s                  0.7%
        __kmp_get_global_thread_id_reg                                           libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                                                          libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                                                          libiomp5.so                  0.030s                  0.2%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "64" "128" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 20:51:41 22/04/2021 UTC
    Collection stop time: 20:51:43 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_64_128 > srad2-log/vtune/36_64_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_64_128 --  srad2 100 0.5 64 128 36 srad2 64 128 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-70240-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-70240-quartz1453.sc' filvtune: Executing actions 12 % Loading '70254.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-70254-3d25fa13.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.078s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.192 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.383 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "128" "64" "128" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:51:59 22/04/2021 UTC
    Collection stop time: 20:51:59 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_64_128 > srad2-log/vtune/36_64_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_64_128 --  srad2 64 128 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-70328-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-70328-quartz1453.sc' filvtune: Executing actions 12 % Loading '70328-70333.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-70333-673f0295.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.246s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.029 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.246
        Serial Time (outside parallel regions): 1.182s (94.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.020s
            __kmp_fork_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.064s (5.1%)
            Estimated Ideal Time: 0.020s (1.6%)
            OpenMP Potential Gain: 0.044s (3.5%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.799s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 32.370s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                32.367s                        100.0%         134
        Mutex 0x6cb3026d                                              0.002s                        100.0%          26
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.880s (99.8% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.511s                 97.1%
        __kmp_join_barrier              libiomp5.so                  0.149s                  1.1%
        sched_yield                     libc.so.6                    0.120s                  0.9%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                 libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.040s                  0.3%
Collection and Platform Info
    Application Command Line: srad2 "64" "128" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:52:12 22/04/2021 UTC
    Collection stop time: 20:52:14 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_64_128 > srad2-log/vtune/18_64_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_64_128 --  srad2 100 0.5 64 128 18 srad2 64 128 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-70503-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-70503-quartz1453.sc' filvtune: Executing actions 12 % Loading '70518.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-70518-334e6ffe.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.085s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.176 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.352 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "128" "64" "128" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:52:29 22/04/2021 UTC
    Collection stop time: 20:52:29 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_64_128 > srad2-log/vtune/18_64_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_64_128 --  srad2 64 128 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-70592-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-70592-quartz1453.sc' filvtune: Executing actions 12 % Loading '70592-70597.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-70597-8689fc70.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' 
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.264s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.019 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.264
        Serial Time (outside parallel regions): 1.200s (95.0%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.040s
            __pthread_create_2_1            libpthread.so.0           0.010s
        Parallel Region Time: 0.064s (5.0%)
            Estimated Ideal Time: 0.017s (1.4%)
            OpenMP Potential Gain: 0.046s (3.7%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.010s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 32.747s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                32.742s                        100.0%         139
        Mutex 0x6cb3026d                                              0.004s                        100.0%          23
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0xdf159424                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.100s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.680s                 96.9%
        sched_yield                     libc.so.6                    0.240s                  1.7%
        __kmp_join_barrier              libiomp5.so                  0.090s                  0.6%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.040s                  0.3%
        __kmp_join_call                 libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.020s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "64" "128" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:52:43 22/04/2021 UTC
    Collection stop time: 20:52:44 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_64_128 > srad2-log/vtune/9_64_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_64_128 --  srad2 100 0.5 64 128 9 srad2 64 128 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-70769-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-70769-quartz1453.sc' filvtune: Executing actions 12 % Loading '70783.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-70783-8c773d93.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `ld-2.17.so'           
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `ld-2.17.so'           
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `ld-2.17.so'           vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.086s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.394 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.6% (0.203 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.6% (0.406 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "128" "64" "128" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:53:00 22/04/2021 UTC
    Collection stop time: 20:53:00 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_64_128 > srad2-log/vtune/9_64_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_64_128 --  srad2 64 128 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-70856-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-70856-quartz1453.sc' filvtune: Executing actions 12 % Loading '70856-70862.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-70862-df3a74d3.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.370s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.034 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.370
        Serial Time (outside parallel regions): 1.284s (93.7%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.086s (6.3%)
            Estimated Ideal Time: 0.019s (1.4%)
            OpenMP Potential Gain: 0.067s (4.9%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.330s (99.4% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 36.771s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                36.768s                        100.0%         153
        Mutex 0x6cb3026d                                              0.002s                        100.0%          18
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 15.380s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 15.120s                 98.1%
        __kmp_join_barrier              libiomp5.so                  0.150s                  1.0%
        __kmp_join_call                 libiomp5.so                  0.070s                  0.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                 libiomp5.so                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "64" "128" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 20:53:14 22/04/2021 UTC
    Collection stop time: 20:53:16 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_64_128 > srad2-log/vtune/4_64_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_64_128 --  srad2 100 0.5 64 128 4 srad2 64 128 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-71034-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-71034-quartz1453.sc' filvtune: Executing actions 12 % Loading '71048.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-71048-d32abb6d.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.078s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.933 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.128 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.256 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 0.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "128" "64" "128" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:53:31 22/04/2021 UTC
    Collection stop time: 20:53:32 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_64_128 > srad2-log/vtune/4_64_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_64_256 --  srad2 64 256 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-71121-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-71121-quartz1453.sc' filvtune: Executing actions 12 % Loading '71121-71126.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-71126-13f20f17.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.460s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.050 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.460
        Serial Time (outside parallel regions): 0.939s (64.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.521s (35.7%)
            Estimated Ideal Time: 0.174s (11.9%)
            OpenMP Potential Gain: 0.347s (23.8%)
             | The time wasted on load imbalance or parallel work arrangement is
             | significant and negatively impacts the application performance
             | and scalability. Explore OpenMP regions with the highest metric
             | values. Make sure the workload of the regions is enough and the
             | loop schedule is optimal.
             |
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.190s (43.1% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 24.238s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                24.162s                        100.0%         167
        Condition Variable 0xc877a82d                                 0.074s                        100.0%           1
        Mutex 0x6cb3026d                                              0.001s                        100.0%          19
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 30.528s (99.8% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                 28.906s                 94.5%
        __kmp_join_barrier                                                       libiomp5.so                  1.097s                  3.6%
        __kmp_join_call                                                          libiomp5.so                  0.430s                  1.4%
        __kmp_get_global_thread_id_reg                                           libiomp5.so                  0.030s                  0.1%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.024s                  0.1%
        [Others]                                                                 N/A                          0.040s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "64" "256" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 20:53:45 22/04/2021 UTC
    Collection stop time: 20:53:47 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_64_256 > srad2-log/vtune/36_64_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_64_256 --  srad2 100 0.5 64 256 36 srad2 64 256 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-71298-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-71298-quartz1453.sc' filvtune: Executing actions 12 % Loading '71312.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-71312-122202e6.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libc-2.17.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.080s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.794 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.188 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.375 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "256" "64" "256" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:54:03 22/04/2021 UTC
    Collection stop time: 20:54:03 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_64_256 > srad2-log/vtune/36_64_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_64_256 --  srad2 64 256 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-71386-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-71386-quartz1453.sc' filvtune: Executing actions 12 % Loading '71386-71391.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-71391-589f59ed.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.378s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.052 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.378
        Serial Time (outside parallel regions): 1.305s (94.7%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
            __kmp_fork_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.072s (5.3%)
            Estimated Ideal Time: 0.029s (2.1%)
            OpenMP Potential Gain: 0.044s (3.2%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.500s (98.8% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 37.924s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                37.919s                        100.0%         141
        Mutex 0x6cb3026d                                              0.004s                        100.0%          22
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.610s (99.6% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                 14.050s                 95.8%
        sched_yield                                                              libc.so.6                    0.360s                  2.5%
        __kmp_join_barrier                                                       libiomp5.so                  0.070s                  0.5%
        __kmp_join_call                                                          libiomp5.so                  0.040s                  0.3%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.040s                  0.3%
        [Others]                                                                 N/A                          0.050s                  0.3%
Collection and Platform Info
    Application Command Line: srad2 "64" "256" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:54:16 22/04/2021 UTC
    Collection stop time: 20:54:18 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_64_256 > srad2-log/vtune/18_64_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_64_256 --  srad2 100 0.5 64 256 18 srad2 64 256 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-71564-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-71564-quartz1453.sc' filvtune: Executing actions 12 % Loading '71578.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-71578-581b2869.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.087s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.172 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.344 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "256" "64" "256" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:54:34 22/04/2021 UTC
    Collection stop time: 20:54:34 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_64_256 > srad2-log/vtune/18_64_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_64_256 --  srad2 64 256 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-71651-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-71651-quartz1453.sc' filvtune: Executing actions 12 % Loading '71651-71656.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-71656-a75ab4f7.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.191s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.020 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.191
        Serial Time (outside parallel regions): 1.103s (92.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.020s
            __kmp_join_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.088s (7.4%)
            Estimated Ideal Time: 0.019s (1.6%)
            OpenMP Potential Gain: 0.069s (5.8%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.200s (99.4% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 31.690s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                31.689s                        100.0%         131
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%          13
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0xdf159424                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 15.270s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                Module       Spin and Overhead Time  (% from CPU Time)(%)
        ----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                      libiomp5.so                 15.020s                 98.2%
        __kmp_join_barrier                                                      libiomp5.so                  0.160s                  1.0%
        __kmp_get_global_thread_id_reg                                          libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                                                         libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                                                         libiomp5.so                  0.020s                  0.1%
        _INTERNAL_23_______src_kmp_sched_cpp_20354e55::__kmp_itt_metadata_loop  libiomp5.so                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "64" "256" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 20:54:48 22/04/2021 UTC
    Collection stop time: 20:54:49 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_64_256 > srad2-log/vtune/9_64_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_64_256 --  srad2 100 0.5 64 256 9 srad2 64 256 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-71829-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-71829-quartz1453.sc' filvtune: Executing actions 12 % Loading '71844.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-71844-8bf03e4f.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.078s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.193 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.386 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "256" "64" "256" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:55:05 22/04/2021 UTC
    Collection stop time: 20:55:05 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_64_256 > srad2-log/vtune/9_64_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_64_256 --  srad2 64 256 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-71918-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-71918-quartz1453.sc' filvtune: Executing actions 12 % Loading '71918-71923.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-71923-ceb4e572.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.208s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.019 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.208
        Serial Time (outside parallel regions): 1.131s (93.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
            __kmp_fork_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.077s (6.4%)
            Estimated Ideal Time: 0.020s (1.7%)
            OpenMP Potential Gain: 0.057s (4.7%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.630s (99.6% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 34.601s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                34.600s                        100.0%         138
        Mutex 0x6cb3026d                                              0.001s                        100.0%          18
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0xdf159424                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.670s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.380s                 97.7%
        __kmp_join_barrier              libiomp5.so                  0.090s                  0.7%
        sched_yield                     libc.so.6                    0.090s                  0.7%
        __kmp_join_call                 libiomp5.so                  0.060s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.020s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "64" "256" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:55:18 22/04/2021 UTC
    Collection stop time: 20:55:20 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_64_256 > srad2-log/vtune/4_64_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_64_256 --  srad2 100 0.5 64 256 4 srad2 64 256 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-72096-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-72096-quartz1453.sc' filvtune: Executing actions 12 % Loading '72110.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-72110-a6fe0e3e.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.089s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.794 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.168 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.337 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "256" "64" "256" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:55:35 22/04/2021 UTC
    Collection stop time: 20:55:35 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_64_256 > srad2-log/vtune/4_64_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_64_512 --  srad2 64 512 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-72183-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-72183-quartz1453.sc' filvtune: Executing actions 12 % Loading '72183-72188.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-72188-e3fe2a9e.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.281s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.056 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.281
        Serial Time (outside parallel regions): 1.206s (94.2%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.029s
            __kmp_fork_call                 libiomp5.so               0.021s
            __kmp_join_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.074s (5.8%)
            Estimated Ideal Time: 0.027s (2.1%)
            OpenMP Potential Gain: 0.047s (3.7%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.170s (99.0% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 33.790s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                33.783s                        100.0%         139
        Mutex 0x6cb3026d                                              0.006s                        100.0%          21
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0xdf159424                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.260s (99.6% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.530s                 94.5%
        sched_yield                     libc.so.6                    0.500s                  3.5%
        __kmp_join_barrier              libiomp5.so                  0.090s                  0.6%
        __kmp_fork_call                 libiomp5.so                  0.031s                  0.2%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.079s                  0.6%
Collection and Platform Info
    Application Command Line: srad2 "64" "512" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:55:49 22/04/2021 UTC
    Collection stop time: 20:55:50 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_64_512 > srad2-log/vtune/36_64_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_64_512 --  srad2 100 0.5 64 512 36 srad2 64 512 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-72361-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-72361-quartz1453.sc' filvtune: Executing actions 12 % Loading '72375.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-72375-e2afd41c.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.084s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.933 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.150 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.300 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "512" "64" "512" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:56:06 22/04/2021 UTC
    Collection stop time: 20:56:06 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_64_512 > srad2-log/vtune/36_64_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_64_512 --  srad2 64 512 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-72448-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-72448-quartz1453.sc' filvtune: Executing actions 12 % Loading '72448-72453.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-72453-1b767ccd.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libc.so.6'            vtune: Executing actions 21 % Resolving information for `libc.so.6'            vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.321s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.009 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.321
        Serial Time (outside parallel regions): 1.244s (94.2%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.077s (5.8%)
            Estimated Ideal Time: 0.026s (2.0%)
            OpenMP Potential Gain: 0.051s (3.8%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.670s (99.5% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 34.520s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                34.187s                        100.0%         139
        Condition Variable                                            0.323s                        100.0%           2
        Mutex 0x6cb3026d                                              0.010s                        100.0%          21
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 14.740s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                   Module       Spin and Overhead Time  (% from CPU Time)(%)
        -------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                         libiomp5.so                 14.610s                 99.1%
        __kmp_join_barrier                                                         libiomp5.so                  0.060s                  0.4%
        __kmp_get_global_thread_id_reg                                             libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                                                            libiomp5.so                  0.020s                  0.1%
        __kmp_fork_call                                                            libiomp5.so                  0.010s                  0.1%
        _INTERNAL_23_______src_kmp_sched_cpp_20354e55::__kmp_for_static_init<int>  libiomp5.so                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "64" "512" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:56:20 22/04/2021 UTC
    Collection stop time: 20:56:22 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_64_512 > srad2-log/vtune/18_64_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_64_512 --  srad2 100 0.5 64 512 18 srad2 64 512 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-72624-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-72624-quartz1453.sc' filvtune: Executing actions 12 % Loading '72639.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-72639-0b52cf82.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.092s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.163 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.326 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "512" "64" "512" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:56:37 22/04/2021 UTC
    Collection stop time: 20:56:37 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_64_512 > srad2-log/vtune/18_64_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_64_512 --  srad2 64 512 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-72712-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-72712-quartz1453.sc' filvtune: Executing actions 12 % Loading '72712-72717.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-72717-49d09e92.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' 
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.358s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.026 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.358
        Serial Time (outside parallel regions): 1.304s (96.0%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.040s
            __pthread_create_2_1            libpthread.so.0           0.020s
        Parallel Region Time: 0.054s (4.0%)
            Estimated Ideal Time: 0.015s (1.1%)
            OpenMP Potential Gain: 0.039s (2.8%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.270s (99.4% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 37.173s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                37.172s                        100.0%         142
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%          15
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.320s (99.8% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module           Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  ---------------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                     13.000s                 97.4%
        sched_yield                     libc.so.6                        0.160s                  1.2%
        __kmp_join_barrier              libiomp5.so                      0.090s                  0.7%
        __kmp_get_global_thread_id_reg  libiomp5.so                      0.040s                  0.3%
        __pthread_create_2_1            libpthread.so.0                  0.020s                  0.1%
        __kmp_join_call                 libiomp5.so                      0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "64" "512" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:56:51 22/04/2021 UTC
    Collection stop time: 20:56:52 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_64_512 > srad2-log/vtune/9_64_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_64_512 --  srad2 100 0.5 64 512 9 srad2 64 512 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-72889-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-72889-quartz1453.sc' filvtune: Executing actions 12 % Loading '72904.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-72904-47860988.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libc-2.17.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.083s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.181 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.362 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "512" "64" "512" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:57:08 22/04/2021 UTC
    Collection stop time: 20:57:08 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_64_512 > srad2-log/vtune/9_64_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_64_512 --  srad2 64 512 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-72979-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-72979-quartz1453.sc' filvtune: Executing actions 12 % Loading '72979-72984.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-72984-aa49a225.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.332s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.040 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.332
        Serial Time (outside parallel regions): 1.254s (94.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            [Outside any known module]      [Unknown]             0.010s
            rand                            libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.078s (5.9%)
            Estimated Ideal Time: 0.024s (1.8%)
            OpenMP Potential Gain: 0.054s (4.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.660s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 36.541s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                36.525s                        100.0%         148
        Mutex 0x6cb3026d                                              0.016s                        100.0%          24
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.725s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.190s                 95.8%
        sched_yield                     libc.so.6                    0.250s                  1.8%
        __kmp_join_barrier              libiomp5.so                  0.130s                  0.9%
        __kmp_join_call                 libiomp5.so                  0.050s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.075s                  0.5%
Collection and Platform Info
    Application Command Line: srad2 "64" "512" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:57:22 22/04/2021 UTC
    Collection stop time: 20:57:24 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_64_512 > srad2-log/vtune/4_64_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_64_512 --  srad2 100 0.5 64 512 4 srad2 64 512 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-73158-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-73158-quartz1453.sc' filvtune: Executing actions 12 % Loading '73172.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-73172-a7659adf.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.079s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.191 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.382 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "64" "512" "64" "512" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:57:40 22/04/2021 UTC
    Collection stop time: 20:57:40 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_64_512 > srad2-log/vtune/4_64_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_64_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_128_64 --  srad2 128 64 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-73246-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-73246-quartz1453.sc' filvtune: Executing actions 12 % Loading '73246-73251.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-73251-1741ba03.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.251s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.019 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.251
        Serial Time (outside parallel regions): 1.169s (93.4%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.020s
        Parallel Region Time: 0.082s (6.6%)
            Estimated Ideal Time: 0.022s (1.7%)
            OpenMP Potential Gain: 0.061s (4.8%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.630s (99.6% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 32.598s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                32.587s                        100.0%         138
        Mutex 0x6cb3026d                                              0.010s                        100.0%          24
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.670s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 14.150s                 96.3%
        sched_yield                     libc.so.6                    0.260s                  1.8%
        __kmp_join_barrier              libiomp5.so                  0.140s                  1.0%
        __kmp_join_call                 libiomp5.so                  0.060s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "128" "64" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:57:54 22/04/2021 UTC
    Collection stop time: 20:57:56 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_128_64 > srad2-log/vtune/36_128_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_128_64 --  srad2 100 0.5 128 64 36 srad2 128 64 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-73423-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-73423-quartz1453.sc' filvtune: Executing actions 12 % Loading '73437.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-73437-f754b8b4.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.099s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.933 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.127 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.254 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "64" "128" "64" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:58:11 22/04/2021 UTC
    Collection stop time: 20:58:11 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_128_64 > srad2-log/vtune/36_128_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_128_64 --  srad2 128 64 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-73510-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-73510-quartz1453.sc' filvtune: Executing actions 12 % Loading '73510-73515.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-73515-4ab86d80.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.384s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.017 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.384
        Serial Time (outside parallel regions): 1.303s (94.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.082s (5.9%)
            Estimated Ideal Time: 0.028s (2.0%)
            OpenMP Potential Gain: 0.053s (3.9%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.840s (99.6% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 36.246s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                36.241s                        100.0%         135
        Mutex 0x6cb3026d                                              0.005s                        100.0%          20
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.870s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.680s                 98.5%
        __kmp_join_barrier              libiomp5.so                  0.100s                  0.7%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                 libiomp5.so                  0.020s                  0.1%
        __kmp_join_call                 libiomp5.so                  0.020s                  0.1%
        [Others]                        N/A                          0.020s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "128" "64" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:58:25 22/04/2021 UTC
    Collection stop time: 20:58:27 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_128_64 > srad2-log/vtune/18_128_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_128_64 --  srad2 100 0.5 128 64 18 srad2 128 64 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-73687-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-73687-quartz1453.sc' filvtune: Executing actions 12 % Loading '73702.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-73702-66ded00b.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.090s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.933 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.139 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.277 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 0.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "64" "128" "64" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:58:43 22/04/2021 UTC
    Collection stop time: 20:58:43 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_128_64 > srad2-log/vtune/18_128_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_128_64 --  srad2 128 64 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-413-quartz1453.sc' file vtune: Executing actions 12 % Loading 'systemcollector-413-quartz1453.sc' file vtune: Executing actions 12 % Loading '413-419.0.trace' file                   vtune: Executing actions 12 % Loading 'userapicollector-419-9885212a.trace' filvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.177s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.010 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.177
        Serial Time (outside parallel regions): 1.102s (93.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.040s
            __kmp_join_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.075s (6.4%)
            Estimated Ideal Time: 0.017s (1.5%)
            OpenMP Potential Gain: 0.058s (4.9%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.180s (99.6% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 29.748s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                29.743s                        100.0%         128
        Mutex 0x6cb3026d                                              0.004s                        100.0%          26
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0xdf159424                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.220s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                 13.970s                 98.2%
        __kmp_join_barrier                                                       libiomp5.so                  0.130s                  0.9%
        __kmp_join_call                                                          libiomp5.so                  0.060s                  0.4%
        __kmp_get_global_thread_id_reg                                           libiomp5.so                  0.040s                  0.3%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.020s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "128" "64" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:58:57 22/04/2021 UTC
    Collection stop time: 20:58:58 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_128_64 > srad2-log/vtune/9_128_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_128_64 --  srad2 100 0.5 128 64 9 srad2 128 64 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-621-quartz1453.sc' file vtune: Executing actions 12 % Loading 'systemcollector-621-quartz1453.sc' file vtune: Executing actions 12 % Loading '638.perf' file                          vtune: Executing actions 12 % Loading 'userapicollector-638-5a347b73.trace' filvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.077s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.750
    Average CPU Frequency: 2.514 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.163 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.325 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "64" "128" "64" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:59:13 22/04/2021 UTC
    Collection stop time: 20:59:13 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_128_64 > srad2-log/vtune/9_128_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_128_64 --  srad2 128 64 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-710-quartz1453.sc' file vtune: Executing actions 12 % Loading 'systemcollector-710-quartz1453.sc' file vtune: Executing actions 12 % Loading '710-717.0.trace' file                   vtune: Executing actions 12 % Loading 'userapicollector-717-83cc4793.trace' filvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.106s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.021 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.106
        Serial Time (outside parallel regions): 1.043s (94.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
            __kmp_create_worker             libiomp5.so           0.010s
        Parallel Region Time: 0.063s (5.7%)
            Estimated Ideal Time: 0.017s (1.5%)
            OpenMP Potential Gain: 0.047s (4.2%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 12.890s (99.4% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 28.547s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                28.544s                        100.0%         124
        Mutex 0x6cb3026d                                              0.002s                        100.0%          29
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 12.950s (99.8% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 12.780s                 98.5%
        __kmp_join_barrier              libiomp5.so                  0.070s                  0.5%
        __kmp_join_call                 libiomp5.so                  0.050s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                 libiomp5.so                  0.010s                  0.1%
        __kmp_create_worker             libiomp5.so                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "128" "64" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:59:26 22/04/2021 UTC
    Collection stop time: 20:59:28 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_128_64 > srad2-log/vtune/4_128_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_128_64 --  srad2 100 0.5 128 64 4 srad2 128 64 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-890-quartz1453.sc' file vtune: Executing actions 12 % Loading 'systemcollector-890-quartz1453.sc' file vtune: Executing actions 12 % Loading '905.perf' file                          vtune: Executing actions 12 % Loading 'userapicollector-905-3b0517f5.trace' filvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.090s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.168 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.335 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "64" "128" "64" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 20:59:43 22/04/2021 UTC
    Collection stop time: 20:59:43 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_128_64 > srad2-log/vtune/4_128_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_128_128 --  srad2 128 128 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-1000-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-1000-quartz1453.sc' filevtune: Executing actions 12 % Loading '1000-1006.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-1006-96cec5aa.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.313s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.049 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.313
        Serial Time (outside parallel regions): 1.241s (94.5%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_join_call                 libiomp5.so           0.020s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.072s (5.5%)
            Estimated Ideal Time: 0.023s (1.8%)
            OpenMP Potential Gain: 0.049s (3.7%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.240s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 35.437s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                35.433s                        100.0%         136
        Mutex 0x6cb3026d                                              0.003s                        100.0%          21
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.296s (99.6% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.780s                 96.0%
        sched_yield                     libc.so.6                    0.310s                  2.2%
        __kmp_join_barrier              libiomp5.so                  0.100s                  0.7%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                 libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.046s                  0.3%
Collection and Platform Info
    Application Command Line: srad2 "128" "128" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 20:59:57 22/04/2021 UTC
    Collection stop time: 20:59:58 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_128_128 > srad2-log/vtune/36_128_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_128_128 --  srad2 100 0.5 128 128 36 srad2 128 128 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-1255-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-1255-quartz1453.sc' filevtune: Executing actions 12 % Loading '1270.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-1270-6ab9083e.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.086s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.175 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.350 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "128" "128" "128" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:00:13 22/04/2021 UTC
    Collection stop time: 21:00:14 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_128_128 > srad2-log/vtune/36_128_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_128_128 --  srad2 128 128 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-1343-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-1343-quartz1453.sc' filevtune: Executing actions 12 % Loading '1343-1348.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-1348-a94827a2.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.409s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.017 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.409
        Serial Time (outside parallel regions): 1.319s (93.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.091s (6.4%)
            Estimated Ideal Time: 0.023s (1.6%)
            OpenMP Potential Gain: 0.068s (4.8%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.890s (99.4% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 36.425s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                36.040s                        100.0%         146
        Condition Variable                                            0.381s                        100.0%           1
        Mutex 0x6cb3026d                                              0.004s                        100.0%          30
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 15.970s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 15.410s                 96.4%
        sched_yield                     libc.so.6                    0.270s                  1.7%
        __kmp_join_barrier              libiomp5.so                  0.170s                  1.1%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                 libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.060s                  0.4%
Collection and Platform Info
    Application Command Line: srad2 "128" "128" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:00:27 22/04/2021 UTC
    Collection stop time: 21:00:29 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_128_128 > srad2-log/vtune/18_128_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_128_128 --  srad2 100 0.5 128 128 18 srad2 128 128 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-1529-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-1529-quartz1453.sc' filevtune: Executing actions 12 % Loading '1546.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-1546-b0cd3614.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.089s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.170 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.339 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "128" "128" "128" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:00:45 22/04/2021 UTC
    Collection stop time: 21:00:45 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_128_128 > srad2-log/vtune/18_128_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_128_128 --  srad2 128 128 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-1620-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-1620-quartz1453.sc' filevtune: Executing actions 12 % Loading '1620-1626.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-1626-0c1f1d5f.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.196s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.010 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.196
        Serial Time (outside parallel regions): 1.134s (94.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
            __kmp_fork_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.062s (5.2%)
            Estimated Ideal Time: 0.019s (1.6%)
            OpenMP Potential Gain: 0.043s (3.6%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.460s (99.3% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 30.750s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                30.739s                        100.0%         135
        Mutex 0x6cb3026d                                              0.010s                        100.0%          27
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.540s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.130s                 96.9%
        sched_yield                     libc.so.6                    0.240s                  1.8%
        __kmp_join_barrier              libiomp5.so                  0.050s                  0.4%
        __kmp_join_call                 libiomp5.so                  0.040s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.050s                  0.4%
Collection and Platform Info
    Application Command Line: srad2 "128" "128" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:00:59 22/04/2021 UTC
    Collection stop time: 21:01:00 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_128_128 > srad2-log/vtune/9_128_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_128_128 --  srad2 100 0.5 128 128 9 srad2 128 128 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-1815-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-1815-quartz1453.sc' filevtune: Executing actions 12 % Loading '1829.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-1829-f2992e1f.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.095s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.159 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.317 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "128" "128" "128" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:01:16 22/04/2021 UTC
    Collection stop time: 21:01:16 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_128_128 > srad2-log/vtune/9_128_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_128_128 --  srad2 128 128 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-1903-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-1903-quartz1453.sc' filevtune: Executing actions 12 % Loading '1903-1908.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-1908-65ee37eb.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libc.so.6'            vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.572s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.030 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.572
        Serial Time (outside parallel regions): 1.522s (96.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            [Import thunk sigaction]        libiomp5.so           0.010s
        Parallel Region Time: 0.049s (3.1%)
            Estimated Ideal Time: 0.012s (0.8%)
            OpenMP Potential Gain: 0.037s (2.4%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.130s (99.0% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 42.299s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                41.921s                        100.0%         153
        Condition Variable                                            0.371s                        100.0%           2
        Mutex 0x6cb3026d                                              0.006s                        100.0%          26
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 14.230s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                 13.659s                 95.7%
        sched_yield                                                              libc.so.6                    0.340s                  2.4%
        __kmp_join_barrier                                                       libiomp5.so                  0.091s                  0.6%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.050s                  0.3%
        __kmp_join_call                                                          libiomp5.so                  0.040s                  0.3%
        [Others]                                                                 N/A                          0.050s                  0.4%
Collection and Platform Info
    Application Command Line: srad2 "128" "128" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:01:30 22/04/2021 UTC
    Collection stop time: 21:01:32 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_128_128 > srad2-log/vtune/4_128_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_128_128 --  srad2 100 0.5 128 128 4 srad2 128 128 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-2080-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-2080-quartz1453.sc' filevtune: Executing actions 12 % Loading '2095.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-2095-61fe277d.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libdl-2.17.so'        vtune: Executing actions 20 % Resolving information for `libdl-2.17.so'        vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.092s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.136 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.271 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "128" "128" "128" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:01:48 22/04/2021 UTC
    Collection stop time: 21:01:48 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_128_128 > srad2-log/vtune/4_128_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_128_256 --  srad2 128 256 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-2168-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-2168-quartz1453.sc' filevtune: Executing actions 12 % Loading '2168-2173.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-2173-da3afdb0.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `pinbin'               vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libc-dynamic.so'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/bin64/pinbin'.
vtune: Executing actions 21 % Resolving information for `libc-dynamic.so'      
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/pinruntime/libc-dynamic.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.504s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.040 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.504
        Serial Time (outside parallel regions): 1.436s (95.5%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.068s (4.5%)
            Estimated Ideal Time: 0.029s (1.9%)
            OpenMP Potential Gain: 0.039s (2.6%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.370s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 39.250s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                39.249s                        100.0%         150
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%          20
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.430s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 14.230s                 98.3%
        __kmp_join_barrier              libiomp5.so                  0.070s                  0.5%
        __kmp_join_call                 libiomp5.so                  0.050s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_affinity_set_init_mask    libiomp5.so                  0.020s                  0.1%
        [Others]                        N/A                          0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "128" "256" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:02:02 22/04/2021 UTC
    Collection stop time: 21:02:04 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_128_256 > srad2-log/vtune/36_128_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_128_256 --  srad2 100 0.5 128 256 36 srad2 128 256 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-2346-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-2346-quartz1453.sc' filevtune: Executing actions 12 % Loading '2360.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-2360-ebb9837a.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libc-2.17.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.095s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.158 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.316 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "256" "128" "256" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:02:20 22/04/2021 UTC
    Collection stop time: 21:02:20 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_128_256 > srad2-log/vtune/36_128_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_128_256 --  srad2 128 256 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-2434-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-2434-quartz1453.sc' filevtune: Executing actions 12 % Loading '2434-2439.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-2439-72395d51.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.507s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.125 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.507
        Serial Time (outside parallel regions): 1.441s (95.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            random_matrix                   srad2                 0.010s
        Parallel Region Time: 0.067s (4.4%)
            Estimated Ideal Time: 0.022s (1.5%)
            OpenMP Potential Gain: 0.045s (3.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.130s (99.1% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 42.237s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                42.235s                        100.0%         160
        Mutex 0x6cb3026d                                              0.002s                        100.0%          23
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 15.100s (98.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 14.790s                 96.9%
        sched_yield                     libc.so.6                    0.120s                  0.8%
        __kmp_join_barrier              libiomp5.so                  0.090s                  0.6%
        __kmp_join_call                 libiomp5.so                  0.040s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "128" "256" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:02:35 22/04/2021 UTC
    Collection stop time: 21:02:37 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_128_256 > srad2-log/vtune/18_128_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_128_256 --  srad2 100 0.5 128 256 18 srad2 128 256 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-2611-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-2611-quartz1453.sc' filevtune: Executing actions 12 % Loading '2626.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-2626-7634f908.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.083s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.750
    Average CPU Frequency: 2.095 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.182 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.364 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "256" "128" "256" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:02:53 22/04/2021 UTC
    Collection stop time: 21:02:53 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_128_256 > srad2-log/vtune/18_128_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_128_256 --  srad2 128 256 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-2709-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-2709-quartz1453.sc' filevtune: Executing actions 12 % Loading '2709-2714.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-2714-b4fba557.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.073s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.077 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.073
        Serial Time (outside parallel regions): 1.020s (95.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
            __kmp_create_worker             libiomp5.so           0.010s
        Parallel Region Time: 0.053s (4.9%)
            Estimated Ideal Time: 0.016s (1.5%)
            OpenMP Potential Gain: 0.037s (3.5%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 11.660s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 27.834s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                27.820s                        100.0%         120
        Mutex 0x6cb3026d                                              0.014s                        100.0%          24
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 11.679s (99.4% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 11.270s                 95.9%
        sched_yield                     libc.so.6                    0.260s                  2.2%
        __kmp_join_barrier              libiomp5.so                  0.050s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.3%
        __kmp_join_call                 libiomp5.so                  0.020s                  0.2%
        [Others]                        N/A                          0.049s                  0.4%
Collection and Platform Info
    Application Command Line: srad2 "128" "256" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:03:06 22/04/2021 UTC
    Collection stop time: 21:03:08 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_128_256 > srad2-log/vtune/9_128_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_128_256 --  srad2 100 0.5 128 256 9 srad2 128 256 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-2889-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-2889-quartz1453.sc' filevtune: Executing actions 12 % Loading '2904.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-2904-96c0b1cc.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.092s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.164 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.328 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "256" "128" "256" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:03:23 22/04/2021 UTC
    Collection stop time: 21:03:23 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_128_256 > srad2-log/vtune/9_128_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_128_256 --  srad2 128 256 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-2977-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-2977-quartz1453.sc' filevtune: Executing actions 12 % Loading '2977-2982.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-2982-e66dea62.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.309s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.009 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.309
        Serial Time (outside parallel regions): 1.226s (93.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
        Parallel Region Time: 0.084s (6.4%)
            Estimated Ideal Time: 0.017s (1.3%)
            OpenMP Potential Gain: 0.067s (5.1%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.610s (99.6% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 34.450s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                34.440s                        100.0%         132
        Mutex 0x6cb3026d                                              0.009s                        100.0%          15
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.660s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 14.440s                 98.4%
        __kmp_join_barrier              libiomp5.so                  0.120s                  0.8%
        __kmp_join_call                 libiomp5.so                  0.070s                  0.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "128" "256" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:03:37 22/04/2021 UTC
    Collection stop time: 21:03:39 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_128_256 > srad2-log/vtune/4_128_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_128_256 --  srad2 100 0.5 128 256 4 srad2 128 256 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-3154-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-3154-quartz1453.sc' filevtune: Executing actions 12 % Loading '3169.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-3169-d7d5836b.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.085s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.178 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.355 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "256" "128" "256" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:03:54 22/04/2021 UTC
    Collection stop time: 21:03:54 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_128_256 > srad2-log/vtune/4_128_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_128_512 --  srad2 128 512 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-3251-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-3251-quartz1453.sc' filevtune: Executing actions 12 % Loading '3251-3264.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-3264-35a3c896.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.309s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.000 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.309
        Serial Time (outside parallel regions): 1.241s (94.7%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
            __kmp_fork_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.069s (5.3%)
            Estimated Ideal Time: 0.016s (1.2%)
            OpenMP Potential Gain: 0.053s (4.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.110s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 34.101s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                33.815s                        100.0%         140
        Condition Variable                                            0.282s                        100.0%           2
        Mutex 0x6cb3026d                                              0.003s                        100.0%          26
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 14.219s (100.0% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.820s                 97.2%
        sched_yield                     libc.so.6                    0.250s                  1.8%
        __kmp_join_barrier              libiomp5.so                  0.040s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                 libiomp5.so                  0.020s                  0.1%
        [Others]                        N/A                          0.059s                  0.4%
Collection and Platform Info
    Application Command Line: srad2 "128" "512" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:04:08 22/04/2021 UTC
    Collection stop time: 21:04:10 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_128_512 > srad2-log/vtune/36_128_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_128_512 --  srad2 100 0.5 128 512 36 srad2 128 512 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-3438-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-3438-quartz1453.sc' filevtune: Executing actions 12 % Loading '3452.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-3452-2d896df0.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.074s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.933 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.169 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.339 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "512" "128" "512" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:04:26 22/04/2021 UTC
    Collection stop time: 21:04:26 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_128_512 > srad2-log/vtune/36_128_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_128_512 --  srad2 128 512 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-3525-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-3525-quartz1453.sc' filevtune: Executing actions 12 % Loading '3525-3530.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-3530-6e520972.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.314s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.099 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.314
        Serial Time (outside parallel regions): 1.199s (91.2%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.115s (8.8%)
            Estimated Ideal Time: 0.030s (2.3%)
            OpenMP Potential Gain: 0.085s (6.5%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 16.740s (99.5% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 33.607s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                33.338s                        100.0%         141
        Condition Variable                                            0.267s                        100.0%           2
        Mutex 0x6cb3026d                                              0.001s                        100.0%          19
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 16.720s (99.3% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 16.350s                 97.1%
        __kmp_join_barrier              libiomp5.so                  0.160s                  1.0%
        sched_yield                     libc.so.6                    0.130s                  0.8%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                 libiomp5.so                  0.020s                  0.1%
        [Others]                        N/A                          0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "128" "512" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:04:39 22/04/2021 UTC
    Collection stop time: 21:04:41 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_128_512 > srad2-log/vtune/18_128_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_128_512 --  srad2 100 0.5 128 512 18 srad2 128 512 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-3703-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-3703-quartz1453.sc' filevtune: Executing actions 12 % Loading '3717.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-3717-747e797b.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 20 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.089s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.169 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.338 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "512" "128" "512" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:04:57 22/04/2021 UTC
    Collection stop time: 21:04:57 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_128_512 > srad2-log/vtune/18_128_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_128_512 --  srad2 128 512 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-3791-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-3791-quartz1453.sc' filevtune: Executing actions 12 % Loading '3791-3796.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-3796-db3f30c1.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.270s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.009 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.270
        Serial Time (outside parallel regions): 1.206s (94.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.030s
        Parallel Region Time: 0.064s (5.1%)
            Estimated Ideal Time: 0.019s (1.5%)
            OpenMP Potential Gain: 0.045s (3.6%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.160s (99.1% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 31.721s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                31.433s                        100.0%         138
        Condition Variable                                            0.284s                        100.0%           2
        Mutex 0x6cb3026d                                              0.004s                        100.0%          28
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 14.280s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.780s                 96.4%
        sched_yield                     libc.so.6                    0.220s                  1.5%
        __kmp_join_barrier              libiomp5.so                  0.120s                  0.8%
        __kmp_join_call                 libiomp5.so                  0.050s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.080s                  0.6%
Collection and Platform Info
    Application Command Line: srad2 "128" "512" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:05:11 22/04/2021 UTC
    Collection stop time: 21:05:13 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_128_512 > srad2-log/vtune/9_128_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_128_512 --  srad2 100 0.5 128 512 9 srad2 128 512 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-4047-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-4047-quartz1453.sc' filevtune: Executing actions 12 % Loading '4063.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-4063-c96b7080.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.073s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.857
    Average CPU Frequency: 2.514 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.171 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.342 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "512" "128" "512" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:05:29 22/04/2021 UTC
    Collection stop time: 21:05:29 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_128_512 > srad2-log/vtune/9_128_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_128_512 --  srad2 128 512 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-4139-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-4139-quartz1453.sc' filevtune: Executing actions 12 % Loading '4139-4144.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-4144-1b84fefc.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.174s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.020 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.174
        Serial Time (outside parallel regions): 1.095s (93.2%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __kmp_fork_call                 libiomp5.so               0.020s
            __pthread_create_2_1            libpthread.so.0           0.010s
        Parallel Region Time: 0.080s (6.8%)
            Estimated Ideal Time: 0.024s (2.0%)
            OpenMP Potential Gain: 0.056s (4.8%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.220s (99.3% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 30.427s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                30.421s                        100.0%         133
        Mutex 0x6cb3026d                                              0.005s                        100.0%          25
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.290s (99.8% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.030s                 97.9%
        __kmp_join_barrier              libiomp5.so                  0.150s                  1.1%
        __kmp_join_call                 libiomp5.so                  0.040s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                 libiomp5.so                  0.020s                  0.2%
        [Others]                        N/A                          0.020s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "128" "512" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:05:42 22/04/2021 UTC
    Collection stop time: 21:05:44 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_128_512 > srad2-log/vtune/4_128_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_128_512 --  srad2 100 0.5 128 512 4 srad2 128 512 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-4818-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-4818-quartz1453.sc' filevtune: Executing actions 12 % Loading '4832.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-4832-f35bbf23.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.089s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.143
     | The CPI may be too high. This could be caused by issues such as memory
     | stalls, instruction starvation, branch misprediction or long latency
     | instructions. Explore the other hardware-related metrics to identify what
     | is causing high CPI.
     |
    Average CPU Frequency: 3.352 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.141 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.281 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "128" "512" "128" "512" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:05:59 22/04/2021 UTC
    Collection stop time: 21:05:59 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_128_512 > srad2-log/vtune/4_128_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_128_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_256_64 --  srad2 256 64 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-4905-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-4905-quartz1453.sc' filevtune: Executing actions 12 % Loading '4905-4911.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-4911-4fd653aa.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.369s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.037 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.369
        Serial Time (outside parallel regions): 1.286s (93.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
            __kmp_fork_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.083s (6.1%)
            Estimated Ideal Time: 0.029s (2.1%)
            OpenMP Potential Gain: 0.054s (3.9%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.630s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 36.470s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                36.462s                        100.0%         145
        Mutex 0x6cb3026d                                              0.008s                        100.0%          20
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0xdf159424                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 15.717s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 15.480s                 98.2%
        __kmp_join_barrier              libiomp5.so                  0.110s                  0.7%
        __kmp_join_call                 libiomp5.so                  0.040s                  0.3%
        __kmp_fork_call                 libiomp5.so                  0.030s                  0.2%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.027s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "256" "64" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:06:13 22/04/2021 UTC
    Collection stop time: 21:06:15 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_256_64 > srad2-log/vtune/36_256_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_256_64 --  srad2 100 0.5 256 64 36 srad2 256 64 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-5086-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-5086-quartz1453.sc' filevtune: Executing actions 12 % Loading '5100.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-5100-84ed3b89.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libc-2.17.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.076s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.933 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.165 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.330 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "64" "256" "64" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:06:32 22/04/2021 UTC
    Collection stop time: 21:06:32 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_256_64 > srad2-log/vtune/36_256_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_256_64 --  srad2 256 64 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-5173-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-5173-quartz1453.sc' filevtune: Executing actions 12 % Loading '5173-5178.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-5178-ae570b3c.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.297s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.000 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.297
        Serial Time (outside parallel regions): 1.202s (92.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
            __kmp_fork_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.096s (7.4%)
            Estimated Ideal Time: 0.031s (2.4%)
            OpenMP Potential Gain: 0.065s (5.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.960s (99.5% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 33.604s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                33.368s                        100.0%         132
        Condition Variable                                            0.234s                        100.0%           2
        Mutex 0x6cb3026d                                              0.001s                        100.0%          21
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 15.030s (100.0% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 14.430s                 96.0%
        sched_yield                     libc.so.6                    0.330s                  2.2%
        __kmp_join_barrier              libiomp5.so                  0.110s                  0.7%
        __kmp_join_call                 libiomp5.so                  0.060s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.070s                  0.5%
Collection and Platform Info
    Application Command Line: srad2 "256" "64" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:06:45 22/04/2021 UTC
    Collection stop time: 21:06:47 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_256_64 > srad2-log/vtune/18_256_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_256_64 --  srad2 100 0.5 256 64 18 srad2 256 64 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-5351-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-5351-quartz1453.sc' filevtune: Executing actions 12 % Loading '5365.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-5365-ccc74935.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.100s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.857
    Average CPU Frequency: 2.514 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.3% (0.125 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.3% (0.250 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 0.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "64" "256" "64" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:07:03 22/04/2021 UTC
    Collection stop time: 21:07:03 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_256_64 > srad2-log/vtune/18_256_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_256_64 --  srad2 256 64 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-5440-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-5440-quartz1453.sc' filevtune: Executing actions 12 % Loading '5440-5445.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-5445-2c9f4222.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.343s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.009 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.343
        Serial Time (outside parallel regions): 1.263s (94.0%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.080s (6.0%)
            Estimated Ideal Time: 0.028s (2.1%)
            OpenMP Potential Gain: 0.052s (3.9%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.870s (99.4% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 35.788s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                35.437s                        100.0%         143
        Condition Variable                                            0.350s                        100.0%           2
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%          18
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 14.950s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 14.670s                 98.1%
        sched_yield                     libc.so.6                    0.130s                  0.9%
        __kmp_join_barrier              libiomp5.so                  0.070s                  0.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                 libiomp5.so                  0.020s                  0.1%
        [Others]                        N/A                          0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "256" "64" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:07:17 22/04/2021 UTC
    Collection stop time: 21:07:19 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_256_64 > srad2-log/vtune/9_256_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_256_64 --  srad2 100 0.5 256 64 9 srad2 256 64 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-5616-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-5616-quartz1453.sc' filevtune: Executing actions 12 % Loading '5631.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-5631-1fbeb794.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.083s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.182 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.364 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "64" "256" "64" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:07:35 22/04/2021 UTC
    Collection stop time: 21:07:35 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_256_64 > srad2-log/vtune/9_256_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_256_64 --  srad2 256 64 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-5704-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-5704-quartz1453.sc' filevtune: Executing actions 12 % Loading '5704-5709.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-5709-7b1b2aba.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.474s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.060 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.474
        Serial Time (outside parallel regions): 1.390s (94.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
        Parallel Region Time: 0.084s (5.7%)
            Estimated Ideal Time: 0.025s (1.7%)
            OpenMP Potential Gain: 0.059s (4.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.309s (98.1% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 40.959s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                                              40.955s                        100.0%         152
        Mutex 0x6cb3026d                                                                            0.003s                        100.0%          23
        Stream 0x61a5d4cb                                                                           0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                                                             0.000s                        100.0%           1
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0x7f55e560                               0.000s                        100.0%           1
        [Others]                                                                                    0.000s                        100.0%           4
    Spin and Overhead Time: 14.505s (99.5% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.650s                 93.6%
        sched_yield                     libc.so.6                    0.620s                  4.3%
        __kmp_join_barrier              libiomp5.so                  0.100s                  0.7%
        __kmp_join_call                 libiomp5.so                  0.060s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.045s                  0.3%
Collection and Platform Info
    Application Command Line: srad2 "256" "64" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:07:49 22/04/2021 UTC
    Collection stop time: 21:07:50 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_256_64 > srad2-log/vtune/4_256_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_256_64 --  srad2 100 0.5 256 64 4 srad2 256 64 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-5881-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-5881-quartz1453.sc' filevtune: Executing actions 12 % Loading '5896.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-5896-a87f087e.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.081s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.186 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.371 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "64" "256" "64" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:08:07 22/04/2021 UTC
    Collection stop time: 21:08:07 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_256_64 > srad2-log/vtune/4_256_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_256_128 --  srad2 256 128 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-5971-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-5971-quartz1453.sc' filevtune: Executing actions 12 % Loading '5971-5977.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-5977-ec0dae0d.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' 
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.206s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.028 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.206
        Serial Time (outside parallel regions): 1.106s (91.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.099s (8.2%)
            Estimated Ideal Time: 0.032s (2.7%)
            OpenMP Potential Gain: 0.067s (5.6%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 16.180s (99.5% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 30.809s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                30.801s                        100.0%         131
        Mutex 0x6cb3026d                                              0.007s                        100.0%          24
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 16.240s (99.8% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 15.750s                 96.8%
        sched_yield                     libc.so.6                    0.210s                  1.3%
        __kmp_join_barrier              libiomp5.so                  0.140s                  0.9%
        __kmp_join_call                 libiomp5.so                  0.060s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.050s                  0.3%
Collection and Platform Info
    Application Command Line: srad2 "256" "128" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:08:21 22/04/2021 UTC
    Collection stop time: 21:08:22 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_256_128 > srad2-log/vtune/36_256_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_256_128 --  srad2 100 0.5 256 128 36 srad2 256 128 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-6150-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-6150-quartz1453.sc' filevtune: Executing actions 12 % Loading '6164.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-6164-d418c9f2.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.099s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.394 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.177 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.354 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "128" "256" "128" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:08:38 22/04/2021 UTC
    Collection stop time: 21:08:38 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_256_128 > srad2-log/vtune/36_256_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_256_128 --  srad2 256 128 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-6239-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-6239-quartz1453.sc' filevtune: Executing actions 12 % Loading '6239-6245.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-6245-2a2a3d9c.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.343s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.028 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.343
        Serial Time (outside parallel regions): 1.271s (94.7%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.071s (5.3%)
            Estimated Ideal Time: 0.023s (1.7%)
            OpenMP Potential Gain: 0.048s (3.6%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.960s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 36.404s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                36.403s                        100.0%         140
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.001s                        100.0%          22
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.039s (99.8% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                 13.829s                 98.3%
        __kmp_join_barrier                                                       libiomp5.so                  0.100s                  0.7%
        __kmp_join_call                                                          libiomp5.so                  0.050s                  0.4%
        __kmp_get_global_thread_id_reg                                           libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                                                          libiomp5.so                  0.020s                  0.1%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "256" "128" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:08:52 22/04/2021 UTC
    Collection stop time: 21:08:53 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_256_128 > srad2-log/vtune/18_256_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_256_128 --  srad2 100 0.5 256 128 18 srad2 256 128 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-6418-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-6418-quartz1453.sc' filevtune: Executing actions 12 % Loading '6432.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-6432-4b31b0a4.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.085s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.178 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.356 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "128" "256" "128" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:09:10 22/04/2021 UTC
    Collection stop time: 21:09:10 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_256_128 > srad2-log/vtune/18_256_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_256_128 --  srad2 256 128 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-6506-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-6506-quartz1453.sc' filevtune: Executing actions 12 % Loading '6506-6511.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-6511-af7ec949.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.201s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.020 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.201
        Serial Time (outside parallel regions): 1.115s (92.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.040s
            __pthread_create_2_1            libpthread.so.0           0.020s
            __kmp_create_worker             libiomp5.so               0.010s
        Parallel Region Time: 0.086s (7.2%)
            Estimated Ideal Time: 0.039s (3.2%)
            OpenMP Potential Gain: 0.048s (4.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.690s (99.4% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 31.579s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                31.575s                        100.0%         131
        Mutex 0x6cb3026d                                              0.003s                        100.0%          21
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.750s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module           Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  ---------------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                     13.450s                 97.7%
        __kmp_join_barrier              libiomp5.so                      0.160s                  1.2%
        __kmp_join_call                 libiomp5.so                      0.050s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                      0.040s                  0.3%
        __pthread_create_2_1            libpthread.so.0                  0.020s                  0.1%
        [Others]                        N/A                              0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "256" "128" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:09:24 22/04/2021 UTC
    Collection stop time: 21:09:26 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_256_128 > srad2-log/vtune/9_256_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_256_128 --  srad2 100 0.5 256 128 9 srad2 256 128 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-6685-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-6685-quartz1453.sc' filevtune: Executing actions 12 % Loading '6700.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-6700-5fcf8bdd.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.079s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.857
    Average CPU Frequency: 2.514 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.158 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.316 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 0.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "128" "256" "128" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:09:44 22/04/2021 UTC
    Collection stop time: 21:09:45 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_256_128 > srad2-log/vtune/9_256_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_256_128 --  srad2 256 128 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-6773-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-6773-quartz1453.sc' filevtune: Executing actions 12 % Loading '6773-6778.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-6778-c1b8297c.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' 
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.291s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.028 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.291
        Serial Time (outside parallel regions): 1.223s (94.7%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.068s (5.3%)
            Estimated Ideal Time: 0.016s (1.3%)
            OpenMP Potential Gain: 0.051s (4.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.070s (99.4% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 33.223s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                32.895s                        100.0%         139
        Condition Variable                                            0.327s                        100.0%           1
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%          17
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 14.120s (99.8% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                 13.970s                 98.7%
        __kmp_join_barrier                                                       libiomp5.so                  0.060s                  0.4%
        __kmp_get_global_thread_id_reg                                           libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                                                          libiomp5.so                  0.030s                  0.2%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.020s                  0.1%
        __kmp_fork_call                                                          libiomp5.so                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "256" "128" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:09:59 22/04/2021 UTC
    Collection stop time: 21:10:00 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_256_128 > srad2-log/vtune/4_256_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_256_128 --  srad2 100 0.5 256 128 4 srad2 256 128 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-6954-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-6954-quartz1453.sc' filevtune: Executing actions 12 % Loading '6968.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-6968-d6c36b36.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.091s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.166 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.331 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "128" "256" "128" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:10:17 22/04/2021 UTC
    Collection stop time: 21:10:17 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_256_128 > srad2-log/vtune/4_256_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_256_256 --  srad2 256 256 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-7044-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-7044-quartz1453.sc' filevtune: Executing actions 12 % Loading '7044-7049.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-7049-38875544.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `pinbin'               vtune: Executing actions 20 % Resolving information for `libc-dynamic.so'      
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libc-dynamic.so'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/pinruntime/libc-dynamic.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/bin64/pinbin'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libc-dynamic.so'      vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.371s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.104 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.371
        Serial Time (outside parallel regions): 1.270s (92.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                              Module           Serial CPU Time
            ------------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg        libiomp5.so               0.030s
            __kmp_fork_call                       libiomp5.so               0.020s
            OS_BARESYSCALL_DoCallAsmIntel64Linux  libc-dynamic.so           0.010s
            __kmp_join_call                       libiomp5.so               0.010s
        Parallel Region Time: 0.101s (7.4%)
            Estimated Ideal Time: 0.033s (2.4%)
            OpenMP Potential Gain: 0.067s (4.9%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.780s (99.4% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 37.305s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                37.303s                        100.0%         141
        Mutex 0x6cb3026d                                              0.001s                        100.0%          22
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 15.760s (99.2% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 15.590s                 98.2%
        __kmp_join_barrier              libiomp5.so                  0.100s                  0.6%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                 libiomp5.so                  0.020s                  0.1%
        __kmp_join_call                 libiomp5.so                  0.020s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "256" "256" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:10:31 22/04/2021 UTC
    Collection stop time: 21:10:32 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_256_256 > srad2-log/vtune/36_256_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_256_256 --  srad2 100 0.5 256 256 36 srad2 256 256 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-7224-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-7224-quartz1453.sc' filevtune: Executing actions 12 % Loading '7238.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-7238-4edd09d2.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.090s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.394 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.194 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.388 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "256" "256" "256" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:10:49 22/04/2021 UTC
    Collection stop time: 21:10:49 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_256_256 > srad2-log/vtune/36_256_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_256_256 --  srad2 256 256 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-7311-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-7311-quartz1453.sc' filevtune: Executing actions 12 % Loading '7311-7316.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-7316-9988d946.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' 
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.195s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.115 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.195
        Serial Time (outside parallel regions): 1.144s (95.7%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.052s (4.3%)
            Estimated Ideal Time: 0.025s (2.1%)
            OpenMP Potential Gain: 0.027s (2.2%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 12.400s (99.3% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 32.817s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                32.811s                        100.0%         136
        Mutex 0x6cb3026d                                              0.005s                        100.0%          26
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 12.374s (99.1% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module                Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  --------------------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                          12.230s                 97.9%
        __kmp_join_barrier              libiomp5.so                           0.070s                  0.6%
        __kmp_get_global_thread_id_reg  libiomp5.so                           0.030s                  0.2%
        __kmp_join_call                 libiomp5.so                           0.030s                  0.2%
        __kmp_fork_call                 libiomp5.so                           0.010s                  0.1%
        __tls_get_addr                  ld-linux-x86-64.so.2                  0.004s                  0.0%
Collection and Platform Info
    Application Command Line: srad2 "256" "256" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:11:02 22/04/2021 UTC
    Collection stop time: 21:11:04 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_256_256 > srad2-log/vtune/18_256_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_256_256 --  srad2 100 0.5 256 256 18 srad2 256 256 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-7487-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-7487-quartz1453.sc' filevtune: Executing actions 12 % Loading '7502.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-7502-73df60ea.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.094s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.933 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.3% (0.107 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.3% (0.214 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "256" "256" "256" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:11:19 22/04/2021 UTC
    Collection stop time: 21:11:19 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_256_256 > srad2-log/vtune/18_256_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_256_256 --  srad2 256 256 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-7575-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-7575-quartz1453.sc' filevtune: Executing actions 12 % Loading '7575-7580.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-7580-d5e688fb.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.318s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.018 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.318
        Serial Time (outside parallel regions): 1.257s (95.4%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __kmp_fork_call                 libiomp5.so               0.020s
            __pthread_create_2_1            libpthread.so.0           0.010s
            __kmp_create_worker             libiomp5.so               0.010s
        Parallel Region Time: 0.060s (4.6%)
            Estimated Ideal Time: 0.013s (1.0%)
            OpenMP Potential Gain: 0.047s (3.6%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.720s (99.1% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 34.919s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                34.911s                        100.0%         145
        Mutex 0x6cb3026d                                              0.007s                        100.0%          24
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.820s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.430s                 97.0%
        sched_yield                     libc.so.6                    0.130s                  0.9%
        __kmp_join_barrier              libiomp5.so                  0.120s                  0.9%
        __kmp_join_call                 libiomp5.so                  0.050s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.060s                  0.4%
Collection and Platform Info
    Application Command Line: srad2 "256" "256" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:11:34 22/04/2021 UTC
    Collection stop time: 21:11:35 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_256_256 > srad2-log/vtune/9_256_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_256_256 --  srad2 100 0.5 256 256 9 srad2 256 256 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-7753-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-7753-quartz1453.sc' filevtune: Executing actions 12 % Loading '7767.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-7767-e8339499.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.079s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.933 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.160 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.319 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "256" "256" "256" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:11:51 22/04/2021 UTC
    Collection stop time: 21:11:51 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_256_256 > srad2-log/vtune/9_256_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_256_256 --  srad2 256 256 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-7841-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-7841-quartz1453.sc' filevtune: Executing actions 12 % Loading '7841-7846.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-7846-2907004c.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.342s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.009 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.342
        Serial Time (outside parallel regions): 1.254s (93.4%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.020s
        Parallel Region Time: 0.088s (6.6%)
            Estimated Ideal Time: 0.027s (2.0%)
            OpenMP Potential Gain: 0.061s (4.5%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.860s (99.3% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 35.770s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                35.765s                        100.0%         143
        Mutex 0x6cb3026d                                              0.004s                        100.0%          25
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.950s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module           Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  ---------------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                     14.760s                 98.7%
        __kmp_join_barrier              libiomp5.so                      0.080s                  0.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                      0.030s                  0.2%
        __kmp_join_call                 libiomp5.so                      0.030s                  0.2%
        __pthread_create_2_1            libpthread.so.0                  0.020s                  0.1%
        [Others]                        N/A                              0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "256" "256" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:12:05 22/04/2021 UTC
    Collection stop time: 21:12:07 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_256_256 > srad2-log/vtune/4_256_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_256_256 --  srad2 100 0.5 256 256 4 srad2 256 256 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-8019-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-8019-quartz1453.sc' filevtune: Executing actions 12 % Loading '8033.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-8033-2e77c03f.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.078s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.194 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.388 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "256" "256" "256" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:12:23 22/04/2021 UTC
    Collection stop time: 21:12:23 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_256_256 > srad2-log/vtune/4_256_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_256_512 --  srad2 256 512 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-8106-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-8106-quartz1453.sc' filevtune: Executing actions 12 % Loading '8106-8112.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-8112-7bfbf7c6.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.374s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.034 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.374
        Serial Time (outside parallel regions): 1.288s (93.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad2                 0.010s
        Parallel Region Time: 0.086s (6.2%)
            Estimated Ideal Time: 0.031s (2.2%)
            OpenMP Potential Gain: 0.055s (4.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.300s (99.6% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 36.935s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                36.931s                        100.0%         144
        Mutex 0x6cb3026d                                              0.003s                        100.0%          24
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 15.320s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                 15.051s                 98.0%
        __kmp_join_barrier                                                       libiomp5.so                  0.169s                  1.1%
        __kmp_join_call                                                          libiomp5.so                  0.060s                  0.4%
        __kmp_get_global_thread_id_reg                                           libiomp5.so                  0.030s                  0.2%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "256" "512" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:12:36 22/04/2021 UTC
    Collection stop time: 21:12:38 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_256_512 > srad2-log/vtune/36_256_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_256_512 --  srad2 100 0.5 256 512 36 srad2 256 512 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-8283-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-8283-quartz1453.sc' filevtune: Executing actions 12 % Loading '8298.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-8298-839819ec.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 20 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.094s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.134 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.267 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "512" "256" "512" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:12:54 22/04/2021 UTC
    Collection stop time: 21:12:54 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_256_512 > srad2-log/vtune/36_256_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_256_512 --  srad2 256 512 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-8371-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-8371-quartz1453.sc' filevtune: Executing actions 12 % Loading '8371-8376.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-8376-e0664fab.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.389s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.038 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.389
        Serial Time (outside parallel regions): 1.290s (92.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            rand                            libc.so.6             0.010s
        Parallel Region Time: 0.099s (7.2%)
            Estimated Ideal Time: 0.035s (2.5%)
            OpenMP Potential Gain: 0.065s (4.7%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.260s (99.5% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 36.340s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                36.336s                        100.0%         144
        Mutex 0x6cb3026d                                              0.004s                        100.0%          23
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           4
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 15.296s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 14.740s                 96.1%
        sched_yield                     libc.so.6                    0.270s                  1.8%
        __kmp_join_barrier              libiomp5.so                  0.170s                  1.1%
        __kmp_join_call                 libiomp5.so                  0.060s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.026s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "256" "512" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:13:08 22/04/2021 UTC
    Collection stop time: 21:13:10 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_256_512 > srad2-log/vtune/18_256_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_256_512 --  srad2 100 0.5 256 512 18 srad2 256 512 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-8548-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-8548-quartz1453.sc' filevtune: Executing actions 12 % Loading '8562.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-8562-f20bd549.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.086s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.857
    Average CPU Frequency: 2.514 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.145 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.290 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 0.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "512" "256" "512" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:13:26 22/04/2021 UTC
    Collection stop time: 21:13:26 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_256_512 > srad2-log/vtune/18_256_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_256_512 --  srad2 256 512 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-8635-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-8635-quartz1453.sc' filevtune: Executing actions 12 % Loading '8635-8640.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-8640-3faa0690.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.326s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.099 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.326
        Serial Time (outside parallel regions): 1.253s (94.5%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad2                 0.010s
        Parallel Region Time: 0.073s (5.5%)
            Estimated Ideal Time: 0.022s (1.6%)
            OpenMP Potential Gain: 0.052s (3.9%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.070s (99.3% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 35.995s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                35.977s                        100.0%         139
        Mutex 0x6cb3026d                                              0.017s                        100.0%          31
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.060s (99.2% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.609s                 96.0%
        sched_yield                     libc.so.6                    0.190s                  1.3%
        __kmp_join_barrier              libiomp5.so                  0.151s                  1.1%
        __kmp_join_call                 libiomp5.so                  0.050s                  0.4%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "256" "512" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:13:40 22/04/2021 UTC
    Collection stop time: 21:13:42 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_256_512 > srad2-log/vtune/9_256_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_256_512 --  srad2 100 0.5 256 512 9 srad2 256 512 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-8812-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-8812-quartz1453.sc' filevtune: Executing actions 12 % Loading '8828.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-8828-4f1605d0.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.093s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.161 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.323 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "512" "256" "512" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:13:58 22/04/2021 UTC
    Collection stop time: 21:13:58 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_256_512 > srad2-log/vtune/9_256_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_256_512 --  srad2 256 512 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-8903-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-8903-quartz1453.sc' filevtune: Executing actions 12 % Loading '8903-8908.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-8908-a621b7bb.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.236s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.048 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.236
        Serial Time (outside parallel regions): 1.176s (95.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            rand                            libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.060s (4.9%)
            Estimated Ideal Time: 0.017s (1.4%)
            OpenMP Potential Gain: 0.043s (3.5%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.150s (98.9% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 32.810s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                32.547s                        100.0%         138
        Condition Variable                                            0.256s                        100.0%           2
        Mutex 0x6cb3026d                                              0.006s                        100.0%          20
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 13.250s (99.6% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 12.780s                 96.1%
        sched_yield                     libc.so.6                    0.240s                  1.8%
        __kmp_join_barrier              libiomp5.so                  0.110s                  0.8%
        __kmp_join_call                 libiomp5.so                  0.040s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.050s                  0.4%
Collection and Platform Info
    Application Command Line: srad2 "256" "512" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:14:12 22/04/2021 UTC
    Collection stop time: 21:14:13 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_256_512 > srad2-log/vtune/4_256_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_256_512 --  srad2 100 0.5 256 512 4 srad2 256 512 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-9080-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-9080-quartz1453.sc' filevtune: Executing actions 12 % Loading '9094.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-9094-76e55bac.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.071s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.933 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.175 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.351 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "256" "512" "256" "512" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:14:28 22/04/2021 UTC
    Collection stop time: 21:14:28 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_256_512 > srad2-log/vtune/4_256_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_256_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_512_64 --  srad2 512 64 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-9168-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-9168-quartz1453.sc' filevtune: Executing actions 12 % Loading '9168-9173.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-9173-ea5bee52.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.398s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.043 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.398
        Serial Time (outside parallel regions): 1.296s (92.7%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
            __kmp_fork_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.102s (7.3%)
            Estimated Ideal Time: 0.025s (1.8%)
            OpenMP Potential Gain: 0.077s (5.5%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.990s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 35.202s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                35.200s                        100.0%         145
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.001s                        100.0%          16
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 16.070s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function            Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier  libiomp5.so                 15.390s                 95.5%
        sched_yield         libc.so.6                    0.270s                  1.7%
        __kmp_join_barrier  libiomp5.so                  0.220s                  1.4%
        __kmp_join_call     libiomp5.so                  0.070s                  0.4%
        __kmp_fork_call     libiomp5.so                  0.030s                  0.2%
        [Others]            N/A                          0.090s                  0.6%
Collection and Platform Info
    Application Command Line: srad2 "512" "64" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:14:43 22/04/2021 UTC
    Collection stop time: 21:14:45 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_512_64 > srad2-log/vtune/36_512_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_512_64 --  srad2 100 0.5 512 64 36 srad2 512 64 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-9345-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-9345-quartz1453.sc' filevtune: Executing actions 12 % Loading '9359.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-9359-27c1cdc9.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.089s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.169 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.337 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "64" "512" "64" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:15:01 22/04/2021 UTC
    Collection stop time: 21:15:01 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_512_64 > srad2-log/vtune/36_512_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_512_64 --  srad2 512 64 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-9433-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-9433-quartz1453.sc' filevtune: Executing actions 12 % Loading '9433-9438.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-9438-957c969a.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.401s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.106 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.401
        Serial Time (outside parallel regions): 1.307s (93.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.040s
        Parallel Region Time: 0.095s (6.7%)
            Estimated Ideal Time: 0.030s (2.2%)
            OpenMP Potential Gain: 0.064s (4.6%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.520s (99.1% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 37.651s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                37.638s                        100.0%         145
        Mutex 0x6cb3026d                                              0.012s                        100.0%          19
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 15.536s (99.2% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 15.229s                 97.2%
        __kmp_join_barrier              libiomp5.so                  0.211s                  1.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.040s                  0.3%
        __kmp_join_call                 libiomp5.so                  0.030s                  0.2%
        __kmp_affinity_set_init_mask    libiomp5.so                  0.010s                  0.1%
        [Others]                        N/A                          0.016s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "512" "64" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:15:16 22/04/2021 UTC
    Collection stop time: 21:15:18 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_512_64 > srad2-log/vtune/18_512_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_512_64 --  srad2 100 0.5 512 64 18 srad2 512 64 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-9614-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-9614-quartz1453.sc' filevtune: Executing actions 12 % Loading '9628.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-9628-ab50df46.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libc-2.17.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 38 % Updating precomputed scalar metrics              vtune: Executing actions 38 % Discarding redundant overtime data               vtune: Executing actions 40 % Discarding redundant overtime data               vtune: Executing actions 40 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 43 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.090s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.166 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.333 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "64" "512" "64" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:15:34 22/04/2021 UTC
    Collection stop time: 21:15:34 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_512_64 > srad2-log/vtune/18_512_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_512_64 --  srad2 512 64 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-9703-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-9703-quartz1453.sc' filevtune: Executing actions 12 % Loading '9703-9708.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-9708-1499c495.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.466s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.037 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.466
        Serial Time (outside parallel regions): 1.400s (95.5%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.066s (4.5%)
            Estimated Ideal Time: 0.021s (1.5%)
            OpenMP Potential Gain: 0.044s (3.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.000s (99.3% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 39.589s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                39.582s                        100.0%         137
        Mutex 0x6cb3026d                                              0.006s                        100.0%          20
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.055s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.470s                 95.5%
        sched_yield                     libc.so.6                    0.430s                  3.0%
        __kmp_join_barrier              libiomp5.so                  0.070s                  0.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                 libiomp5.so                  0.020s                  0.1%
        [Others]                        N/A                          0.035s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "512" "64" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:15:48 22/04/2021 UTC
    Collection stop time: 21:15:50 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_512_64 > srad2-log/vtune/9_512_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_512_64 --  srad2 100 0.5 512 64 9 srad2 512 64 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-9879-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-9879-quartz1453.sc' filevtune: Executing actions 12 % Loading '9894.perf' file                         vtune: Executing actions 12 % Loading 'userapicollector-9894-25627c75.trace' fivtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.088s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.794 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.170 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.341 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "64" "512" "64" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:16:06 22/04/2021 UTC
    Collection stop time: 21:16:06 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_512_64 > srad2-log/vtune/9_512_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_512_64 --  srad2 512 64 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_64 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-9967-quartz1453.sc' filevtune: Executing actions 12 % Loading 'systemcollector-9967-quartz1453.sc' filevtune: Executing actions 12 % Loading '9967-9972.0.trace' file                 vtune: Executing actions 12 % Loading 'userapicollector-9972-632b8736.trace' fivtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.400s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.033 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.400
        Serial Time (outside parallel regions): 1.340s (95.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.059s (4.2%)
            Estimated Ideal Time: 0.020s (1.5%)
            OpenMP Potential Gain: 0.039s (2.8%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.520s (98.6% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 38.062s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                38.055s                        100.0%         156
        Mutex 0x6cb3026d                                              0.006s                        100.0%          23
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.670s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                 13.459s                 98.2%
        __kmp_join_barrier                                                       libiomp5.so                  0.061s                  0.4%
        __kmp_join_call                                                          libiomp5.so                  0.040s                  0.3%
        __kmp_get_global_thread_id_reg                                           libiomp5.so                  0.030s                  0.2%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.029s                  0.2%
        [Others]                                                                 N/A                          0.051s                  0.4%
Collection and Platform Info
    Application Command Line: srad2 "512" "64" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:16:19 22/04/2021 UTC
    Collection stop time: 21:16:21 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_512_64 > srad2-log/vtune/4_512_64_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_512_64 --  srad2 100 0.5 512 64 4 srad2 512 64 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_64 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-10144-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-10144-quartz1453.sc' filvtune: Executing actions 12 % Loading '10158.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-10158-758bf648.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.086s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.175 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.351 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "64" "512" "64" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:16:37 22/04/2021 UTC
    Collection stop time: 21:16:37 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_512_64 > srad2-log/vtune/4_512_64_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_64'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_512_128 --  srad2 512 128 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-10231-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-10231-quartz1453.sc' filvtune: Executing actions 12 % Loading '10231-10237.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-10237-dca05ab0.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.248s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.134 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.248
        Serial Time (outside parallel regions): 1.184s (94.9%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.064s (5.1%)
            Estimated Ideal Time: 0.016s (1.3%)
            OpenMP Potential Gain: 0.048s (3.9%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.010s (99.6% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 32.354s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                32.123s                        100.0%         130
        Condition Variable                                            0.226s                        100.0%           2
        Mutex 0x6cb3026d                                              0.004s                        100.0%          28
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        [Others]                                                      0.000s                        100.0%           4
    Spin and Overhead Time: 13.930s (99.0% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                       Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                             libiomp5.so                 13.540s                 96.2%
        sched_yield                                                                    libc.so.6                    0.160s                  1.1%
        __kmp_join_barrier                                                             libiomp5.so                  0.100s                  0.7%
        __kmp_get_global_thread_id_reg                                                 libiomp5.so                  0.030s                  0.2%
        _INTERNAL_25_______src_kmp_runtime_cpp_ddfed41b::__kmp_itt_stack_callee_enter  libiomp5.so                  0.030s                  0.2%
        [Others]                                                                       N/A                          0.070s                  0.5%
Collection and Platform Info
    Application Command Line: srad2 "512" "128" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:16:51 22/04/2021 UTC
    Collection stop time: 21:16:53 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_512_128 > srad2-log/vtune/36_512_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_512_128 --  srad2 100 0.5 512 128 36 srad2 512 128 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-10411-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-10411-quartz1453.sc' filvtune: Executing actions 12 % Loading '10425.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-10425-d622161c.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.080s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.187 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.375 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "128" "512" "128" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:17:09 22/04/2021 UTC
    Collection stop time: 21:17:09 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_512_128 > srad2-log/vtune/36_512_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_512_128 --  srad2 512 128 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-10500-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-10500-quartz1453.sc' filvtune: Executing actions 12 % Loading '10500-10505.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-10505-3abbfa84.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.296s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.082 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.296
        Serial Time (outside parallel regions): 1.199s (92.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            rand                            libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
            __kmp_create_worker             libiomp5.so           0.010s
        Parallel Region Time: 0.096s (7.4%)
            Estimated Ideal Time: 0.022s (1.7%)
            OpenMP Potential Gain: 0.074s (5.7%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.820s (99.1% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 33.070s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                33.065s                        100.0%         134
        Mutex 0x6cb3026d                                              0.005s                        100.0%          21
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.870s (99.4% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module                Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  --------------------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                          14.670s                 98.1%
        __kmp_join_barrier              libiomp5.so                           0.090s                  0.6%
        __kmp_join_call                 libiomp5.so                           0.040s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                           0.030s                  0.2%
        __tls_get_addr                  ld-linux-x86-64.so.2                  0.010s                  0.1%
        [Others]                        N/A                                   0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "512" "128" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:17:23 22/04/2021 UTC
    Collection stop time: 21:17:25 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_512_128 > srad2-log/vtune/18_512_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_512_128 --  srad2 100 0.5 512 128 18 srad2 512 128 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-10676-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-10676-quartz1453.sc' filvtune: Executing actions 12 % Loading '10691.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-10691-313cd472.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libpthread-2.17.so'   vtune: Executing actions 19 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.083s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.180 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.360 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "128" "512" "128" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:17:40 22/04/2021 UTC
    Collection stop time: 21:17:41 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_512_128 > srad2-log/vtune/18_512_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_512_128 --  srad2 512 128 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-10764-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-10764-quartz1453.sc' filvtune: Executing actions 12 % Loading '10764-10769.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-10769-96ff68b5.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.322s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.036 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.322
        Serial Time (outside parallel regions): 1.240s (93.8%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.082s (6.2%)
            Estimated Ideal Time: 0.022s (1.6%)
            OpenMP Potential Gain: 0.061s (4.6%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.170s (99.4% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 34.811s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                34.806s                        100.0%         140
        Mutex 0x6cb3026d                                              0.004s                        100.0%          27
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.210s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.680s                 96.0%
        sched_yield                     libc.so.6                    0.249s                  1.7%
        __kmp_join_barrier              libiomp5.so                  0.150s                  1.1%
        __kmp_join_call                 libiomp5.so                  0.070s                  0.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.031s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "512" "128" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:17:55 22/04/2021 UTC
    Collection stop time: 21:17:56 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_512_128 > srad2-log/vtune/9_512_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_512_128 --  srad2 100 0.5 512 128 9 srad2 512 128 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-10941-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-10941-quartz1453.sc' filvtune: Executing actions 12 % Loading '10955.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-10955-938ee098.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libc-2.17.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.084s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.180 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.360 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "128" "512" "128" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:18:12 22/04/2021 UTC
    Collection stop time: 21:18:12 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_512_128 > srad2-log/vtune/9_512_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_512_128 --  srad2 512 128 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_128 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-11030-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-11030-quartz1453.sc' filvtune: Executing actions 12 % Loading '11030-11035.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-11035-e359dca4.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.337s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.054 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.337
        Serial Time (outside parallel regions): 1.258s (94.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            rand                            libc.so.6             0.010s
        Parallel Region Time: 0.079s (5.9%)
            Estimated Ideal Time: 0.018s (1.4%)
            OpenMP Potential Gain: 0.061s (4.6%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.310s (98.8% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 35.681s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                35.678s                        100.0%         146
        Mutex 0x6cb3026d                                              0.003s                        100.0%          19
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.420s (99.6% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                 14.170s                 97.9%
        __kmp_join_barrier                                                       libiomp5.so                  0.120s                  0.8%
        __kmp_join_call                                                          libiomp5.so                  0.050s                  0.3%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.040s                  0.3%
        __kmp_get_global_thread_id_reg                                           libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                                                          libiomp5.so                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "512" "128" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:18:26 22/04/2021 UTC
    Collection stop time: 21:18:28 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_512_128 > srad2-log/vtune/4_512_128_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_512_128 --  srad2 100 0.5 512 128 4 srad2 512 128 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_128 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-11208-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-11208-quartz1453.sc' filvtune: Executing actions 12 % Loading '11222.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-11222-d2f377db.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.076s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.933 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.165 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.331 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 0.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "128" "512" "128" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:18:43 22/04/2021 UTC
    Collection stop time: 21:18:43 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_512_128 > srad2-log/vtune/4_512_128_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_128'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_512_256 --  srad2 512 256 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-11297-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-11297-quartz1453.sc' filvtune: Executing actions 12 % Loading '11297-11302.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-11302-216c8fba.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `pinbin'               vtune: Executing actions 20 % Resolving information for `pinbin'               vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libc-dynamic.so'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/bin64/pinbin'.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/pinruntime/libc-dynamic.so'.
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libc-dynamic.so'      
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libc-dynamic.so'      vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.379s
    Paused Time: 0s
Effective CPU Utilization: 0.5% (0.338 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.379
        Serial Time (outside parallel regions): 1.301s (94.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
            rand                            libc.so.6                 0.010s
        Parallel Region Time: 0.078s (5.7%)
            Estimated Ideal Time: 0.031s (2.3%)
            OpenMP Potential Gain: 0.047s (3.4%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.220s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 38.193s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                38.189s                        100.0%         137
        Mutex 0x6cb3026d                                              0.003s                        100.0%          22
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.950s (97.3% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.500s                 94.1%
        __kmp_join_barrier              libiomp5.so                  0.210s                  1.5%
        sched_yield                     libc.so.6                    0.100s                  0.7%
        __kmp_join_call                 libiomp5.so                  0.040s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.070s                  0.5%
Collection and Platform Info
    Application Command Line: srad2 "512" "256" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:18:57 22/04/2021 UTC
    Collection stop time: 21:18:59 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_512_256 > srad2-log/vtune/36_512_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_512_256 --  srad2 100 0.5 512 256 36 srad2 512 256 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-11474-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-11474-quartz1453.sc' filvtune: Executing actions 12 % Loading '11488.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-11488-36b6a9d0.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.086s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.175 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.350 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "256" "512" "256" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:19:15 22/04/2021 UTC
    Collection stop time: 21:19:15 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_512_256 > srad2-log/vtune/36_512_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_512_256 --  srad2 512 256 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-11561-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-11561-quartz1453.sc' filvtune: Executing actions 12 % Loading '11561-11567.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-11567-85870d2f.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.287s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.019 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.287
        Serial Time (outside parallel regions): 1.202s (93.4%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
            rand                            libc.so.6                 0.010s
            __kmp_fork_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.084s (6.6%)
            Estimated Ideal Time: 0.030s (2.3%)
            OpenMP Potential Gain: 0.054s (4.2%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.140s (99.3% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 33.007s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                33.006s                        100.0%         136
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%          18
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 15.220s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module           Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  ---------------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                     14.970s                 98.2%
        __kmp_join_barrier              libiomp5.so                      0.110s                  0.7%
        __kmp_join_call                 libiomp5.so                      0.050s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                      0.030s                  0.2%
        __pthread_create_2_1            libpthread.so.0                  0.010s                  0.1%
        [Others]                        N/A                              0.050s                  0.3%
Collection and Platform Info
    Application Command Line: srad2 "512" "256" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:19:29 22/04/2021 UTC
    Collection stop time: 21:19:31 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_512_256 > srad2-log/vtune/18_512_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_512_256 --  srad2 100 0.5 512 256 18 srad2 512 256 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-11738-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-11738-quartz1453.sc' filvtune: Executing actions 12 % Loading '11753.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-11753-98154a0d.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libc-2.17.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.134s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 1.000
    Average CPU Frequency: 2.394 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.131 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.263 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "256" "512" "256" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:19:47 22/04/2021 UTC
    Collection stop time: 21:19:47 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_512_256 > srad2-log/vtune/18_512_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_512_256 --  srad2 512 256 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-11826-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-11826-quartz1453.sc' filvtune: Executing actions 12 % Loading '11826-11831.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-11831-f4806ad4.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.306s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.009 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.306
        Serial Time (outside parallel regions): 1.229s (94.1%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.078s (5.9%)
            Estimated Ideal Time: 0.026s (2.0%)
            OpenMP Potential Gain: 0.051s (3.9%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.860s (99.5% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 34.730s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                34.723s                        100.0%         146
        Mutex 0x6cb3026d                                              0.006s                        100.0%          21
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0xdf159424                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.930s (99.9% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                                                                 Module       Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------------------------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier                                                       libiomp5.so                 14.710s                 98.5%
        __kmp_join_barrier                                                       libiomp5.so                  0.130s                  0.9%
        __kmp_get_global_thread_id_reg                                           libiomp5.so                  0.030s                  0.2%
        _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_itt_thread_name  libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                                                          libiomp5.so                  0.020s                  0.1%
        __kmp_join_call                                                          libiomp5.so                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "512" "256" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:20:01 22/04/2021 UTC
    Collection stop time: 21:20:02 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_512_256 > srad2-log/vtune/9_512_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_512_256 --  srad2 100 0.5 512 256 9 srad2 512 256 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-12007-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-12007-quartz1453.sc' filvtune: Executing actions 12 % Loading '12021.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-12021-f6672012.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.084s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.180 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.359 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "256" "512" "256" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:20:18 22/04/2021 UTC
    Collection stop time: 21:20:18 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_512_256 > srad2-log/vtune/9_512_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_512_256 --  srad2 512 256 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_256 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-12094-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-12094-quartz1453.sc' filvtune: Executing actions 12 % Loading '12094-12099.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-12099-45f22c07.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.321s
    Paused Time: 0s
Effective CPU Utilization: 0.0% (0.027 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.321
        Serial Time (outside parallel regions): 1.241s (94.0%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            main                            srad2                 0.010s
        Parallel Region Time: 0.080s (6.0%)
            Estimated Ideal Time: 0.019s (1.4%)
            OpenMP Potential Gain: 0.061s (4.6%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.570s (99.5% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 34.337s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                34.336s                        100.0%         141
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.001s                        100.0%          21
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0xdf159424                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.620s (99.8% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 14.420s                 98.4%
        __kmp_join_barrier              libiomp5.so                  0.100s                  0.7%
        __kmp_join_call                 libiomp5.so                  0.070s                  0.5%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "512" "256" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:20:32 22/04/2021 UTC
    Collection stop time: 21:20:34 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_512_256 > srad2-log/vtune/4_512_256_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_512_256 --  srad2 100 0.5 512 256 4 srad2 512 256 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_256 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-12271-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-12271-quartz1453.sc' filvtune: Executing actions 12 % Loading '12285.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-12285-3537b35f.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libc-2.17.so'         
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libc-2.17.so'         vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.093s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.162 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.324 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "256" "512" "256" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:20:49 22/04/2021 UTC
    Collection stop time: 21:20:50 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_512_256 > srad2-log/vtune/4_512_256_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_256'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_36_512_512 --  srad2 512 512 0 63 0 63 100 0.5 36 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-12359-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-12359-quartz1453.sc' filvtune: Executing actions 12 % Loading '12359-12364.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-12364-831eff08.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.279s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.176 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.279
        Serial Time (outside parallel regions): 1.204s (94.2%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            rand                            libc.so.6             0.010s
            __kmp_fork_call                 libiomp5.so           0.010s
        Parallel Region Time: 0.075s (5.8%)
            Estimated Ideal Time: 0.028s (2.2%)
            OpenMP Potential Gain: 0.047s (3.6%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 14.830s (99.6% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 33.744s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                33.740s                        100.0%         145
        Mutex 0x6cb3026d                                              0.004s                        100.0%          23
        Stream 0x61a5d4cb                                             0.000s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 14.700s (98.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 14.400s                 96.7%
        __kmp_join_barrier              libiomp5.so                  0.170s                  1.1%
        __kmp_join_call                 libiomp5.so                  0.040s                  0.3%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_fork_call                 libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "512" "512" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:21:03 22/04/2021 UTC
    Collection stop time: 21:21:05 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_36_512_512 > srad2-log/vtune/36_512_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_36_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_36_512_512 --  srad2 100 0.5 512 512 36 srad2 512 512 0 63 0 63 100 0.5 36 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-12538-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-12538-quartz1453.sc' filvtune: Executing actions 12 % Loading '12552.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-12552-7948d516.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.088s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.5% (0.171 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.5% (0.342 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "512" "512" "512" "0" "63" "0" "63" "100" "0.5" "36" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:21:21 22/04/2021 UTC
    Collection stop time: 21:21:21 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_36_512_512 > srad2-log/vtune/36_512_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_36_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_18_512_512 --  srad2 512 512 0 63 0 63 100 0.5 18 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-12625-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-12625-quartz1453.sc' filvtune: Executing actions 12 % Loading '12625-12630.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-12630-c5e887d0.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libtpsstool.so'       vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.425s
    Paused Time: 0s
Effective CPU Utilization: 0.2% (0.116 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.425
        Serial Time (outside parallel regions): 1.333s (93.5%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            __kmp_fork_call                 libiomp5.so           0.030s
            rand                            libc.so.6             0.010s
        Parallel Region Time: 0.093s (6.5%)
            Estimated Ideal Time: 0.025s (1.8%)
            OpenMP Potential Gain: 0.067s (4.7%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 15.870s (99.1% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 38.801s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                38.800s                        100.0%         149
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%          18
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 15.880s (99.1% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 15.550s                 97.1%
        __kmp_join_barrier              libiomp5.so                  0.160s                  1.0%
        __kmp_join_call                 libiomp5.so                  0.070s                  0.4%
        __kmp_fork_call                 libiomp5.so                  0.040s                  0.2%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.030s                  0.2%
Collection and Platform Info
    Application Command Line: srad2 "512" "512" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:21:35 22/04/2021 UTC
    Collection stop time: 21:21:36 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_18_512_512 > srad2-log/vtune/18_512_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_18_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_18_512_512 --  srad2 100 0.5 512 512 18 srad2 512 512 0 63 0 63 100 0.5 18 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-12802-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-12802-quartz1453.sc' filvtune: Executing actions 12 % Loading '12817.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-12817-ee46832f.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libiomp5.so'          
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.075s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.857
    Average CPU Frequency: 2.095 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.6% (0.200 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.6% (0.400 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "512" "512" "512" "0" "63" "0" "63" "100" "0.5" "18" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:21:53 22/04/2021 UTC
    Collection stop time: 21:21:53 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_18_512_512 > srad2-log/vtune/18_512_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_18_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_9_512_512 --  srad2 512 512 0 63 0 63 100 0.5 9 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-12890-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-12890-quartz1453.sc' filvtune: Executing actions 12 % Loading '12890-12895.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-12895-6fc550bc.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.259s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.075 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.259
        Serial Time (outside parallel regions): 1.200s (95.3%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module       Serial CPU Time
            ------------------------------  -----------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so           0.030s
            [Outside any known module]      [Unknown]             0.010s
            rand                            libc.so.6             0.010s
            __kmp_create_worker             libiomp5.so           0.010s
        Parallel Region Time: 0.059s (4.7%)
            Estimated Ideal Time: 0.021s (1.7%)
            OpenMP Potential Gain: 0.038s (3.0%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.670s (99.3% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 33.170s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                33.168s                        100.0%         139
        Mutex 0x6cb3026d                                              0.001s                        100.0%          19
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0xdf159424                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.690s (99.4% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.470s                 97.8%
        __kmp_join_barrier              libiomp5.so                  0.150s                  1.1%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_create_worker             libiomp5.so                  0.010s                  0.1%
        __kmp_join_call                 libiomp5.so                  0.010s                  0.1%
        [Others]                        N/A                          0.020s                  0.1%
Collection and Platform Info
    Application Command Line: srad2 "512" "512" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 4 MB 
    Collection start time: 21:22:07 22/04/2021 UTC
    Collection stop time: 21:22:09 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_9_512_512 > srad2-log/vtune/9_512_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_9_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_9_512_512 --  srad2 100 0.5 512 512 9 srad2 512 512 0 63 0 63 100 0.5 9 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-13068-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-13068-quartz1453.sc' filvtune: Executing actions 12 % Loading '13082.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-13082-6bb7161a.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for dangling locations     vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libc-2.17.so'         vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 21 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/lib64/libc-2.17.so'.
Cannot match the module with the symbol file `/usr/lib/debug/usr/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 22 % Resolving information for `libittnotify_collectorvtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.091s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.933 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.137 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.274 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "512" "512" "512" "0" "63" "0" "63" "100" "0.5" "9" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:22:25 22/04/2021 UTC
    Collection stop time: 21:22:25 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_9_512_512 > srad2-log/vtune/9_512_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_9_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect threading -r srad2-log/vtune/srad_tr_4_512_512 --  srad2 512 512 0 63 0 63 100 0.5 4 
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_512 -command stop.
Randomizing the input matrix
Start the SRAD main loop
Computation Done
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-13155-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-13155-quartz1453.sc' filvtune: Executing actions 12 % Loading '13155-13161.0.trace' file               vtune: Executing actions 12 % Loading 'userapicollector-13161-be49e4d8.trace' fvtune: Executing actions 12 % Converting API Events to Waits                   vtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `libdl.so.2'           vtune: Executing actions 19 % Resolving information for `libpthread.so.0'      vtune: Executing actions 19 % Resolving information for `srad2'                vtune: Executing actions 19 % Resolving information for `libc.so.6'            vtune: Executing actions 19 % Resolving information for `ld-linux-x86-64.so.2' vtune: Executing actions 19 % Resolving information for `libiomp5.so'          vtune: Executing actions 19 % Resolving information for `libittnotify_collectorvtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/lib64/libc.so.6'.
Cannot match the module with the symbol file `/usr/lib/debug/lib64/libc-2.17.so.debug'. Make sure to specify the correct path to the symbol file in the Binary/Symbol Search list of directories.
vtune: Executing actions 21 % Resolving information for `libtpsstool.so'       
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/libtpsstool.so'.
vtune: Executing actions 22 % Resolving information for `libtpsstool.so'       vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving sync object name information           vtune: Executing actions 24 % Resolving sync object name information           vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 25 % Resolving thread name information                vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 31 % Processing profile metrics and debug information vtune: Executing actions 32 % Processing profile metrics and debug information vtune: Executing actions 33 % Processing profile metrics and debug information vtune: Executing actions 34 % Processing profile metrics and debug information vtune: Executing actions 35 % Processing profile metrics and debug information vtune: Executing actions 35 % Setting data model parameters                    vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 37 % Precomputing frequently used data                vtune: Executing actions 38 % Precomputing frequently used data                vtune: Executing actions 39 % Precomputing frequently used data                vtune: Executing actions 40 % Precomputing frequently used data                vtune: Executing actions 41 % Precomputing frequently used data                vtune: Executing actions 41 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Updating precomputed scalar metrics              vtune: Executing actions 42 % Discarding redundant overtime data               vtune: Executing actions 44 % Discarding redundant overtime data               vtune: Executing actions 44 % Saving the result                                vtune: Executing actions 46 % Saving the result                                vtune: Executing actions 48 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 1.313s
    Paused Time: 0s
Effective CPU Utilization: 0.1% (0.036 out of 72 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    OpenMP Analysis. Collection Time: 1.313
        Serial Time (outside parallel regions): 1.255s (95.6%)
         | Serial Time of your application is high. It directly impacts
         | application Elapsed Time and scalability. Explore options for
         | parallelization, algorithm or microarchitecture tuning of the serial
         | part of the application.
         |

            Top Serial Hotspots (outside parallel regions)
            Function                        Module           Serial CPU Time
            ------------------------------  ---------------  ---------------
            __kmp_get_global_thread_id_reg  libiomp5.so               0.030s
            __pthread_create_2_1            libpthread.so.0           0.010s
            rand                            libc.so.6                 0.010s
            __kmp_fork_call                 libiomp5.so               0.010s
        Parallel Region Time: 0.057s (4.4%)
            Estimated Ideal Time: 0.021s (1.6%)
            OpenMP Potential Gain: 0.036s (2.8%)
    Total Thread Count: 100
     | Significant amount of time application spent in thread oversubscription.
     | This can negatively impact parallel performance because of thread
     | preemption and context switch cost.
     |
        Thread Oversubscription: 13.550s (99.2% of CPU Time)
         | Significant amount of time application spent in thread
         | oversubscription. This can negatively impact parallel performance
         | because of thread preemption and context switch cost.
         |
    Wait Time with poor CPU Utilization: 35.289s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                      Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x74c978ed                                35.288s                        100.0%         147
        Stream 0x61a5d4cb                                             0.001s                        100.0%           1
        Mutex 0x6cb3026d                                              0.000s                        100.0%          18
        Stream /proc/cpuinfo 0x320551a8                               0.000s                        100.0%           2
        Stream /proc/meminfo 0x4b151beb                               0.000s                        100.0%           1
        [Others]                                                      0.000s                        100.0%           3
    Spin and Overhead Time: 13.620s (99.7% of CPU Time)
     | A significant portion of CPU time is spent waiting. Use this metric to
     | discover which synchronizations are spinning. Consider adjusting spin
     | wait parameters, changing the lock implementation (for example, by
     | backing off then descheduling), or adjusting the synchronization
     | granularity.
     |

        Top Functions with Spin or Overhead Time
        Function                        Module       Spin and Overhead Time  (% from CPU Time)(%)
        ------------------------------  -----------  ----------------------  --------------------
        __kmp_fork_barrier              libiomp5.so                 13.140s                 96.2%
        sched_yield                     libc.so.6                    0.230s                  1.7%
        __kmp_join_barrier              libiomp5.so                  0.130s                  1.0%
        __kmp_get_global_thread_id_reg  libiomp5.so                  0.030s                  0.2%
        __kmp_join_call                 libiomp5.so                  0.030s                  0.2%
        [Others]                        N/A                          0.060s                  0.4%
Collection and Platform Info
    Application Command Line: srad2 "512" "512" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 5 MB 
    Collection start time: 21:22:39 22/04/2021 UTC
    Collection stop time: 21:22:40 22/04/2021 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_tr_4_512_512 > srad2-log/vtune/4_512_512_tr.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_tr_4_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune  -collect hpc-performance -r srad2-log/vtune/srad_hpc_4_512_512 --  srad2 100 0.5 512 512 4 srad2 512 512 0 63 0 63 100 0.5 4 
vtune: Warning: Access to /proc/kallsyms file is limited. Consider changing /proc/sys/kernel/kptr_restrict to 0 to enable resolution of OS kernel and kernel module symbols.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Warning: Consider reducing possible collection overhead by setting the /proc/sys/kernel/perf_event_paranoid value to 0 (or less).
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_512 -command stop.
Usage: srad2 <rows> <cols> <y1> <y2> <x1> <x2> <no. of threads><lamda> <no. of iter>
	<rows>   - number of rows
	<cols>    - number of cols
	<y1> 	 - y1 value of the speckle
	<y2>      - y2 value of the speckle
	<x1>       - x1 value of the speckle
	<x2>       - x2 value of the speckle
	<no. of threads>  - no. of threads
	<lamda>   - lambda (0,1)
	<no. of iter>   - number of iterations
vtune: Collection stopped.
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions  0 % Finalizing the result                            vtune: Executing actions  0 % Clearing the database                            vtune: Executing actions  7 % Clearing the database                            vtune: Executing actions  7 % Loading raw data to the database                 vtune: Executing actions  7 % Loading 'systemcollector-13332-quartz1453.sc' filvtune: Executing actions 12 % Loading 'systemcollector-13332-quartz1453.sc' filvtune: Executing actions 12 % Loading '13347.perf' file                        vtune: Executing actions 12 % Loading 'userapicollector-13347-d62fc22e.trace' fvtune: Executing actions 12 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Updating precomputed scalar metrics              vtune: Executing actions 14 % Processing profile metrics and debug information vtune: Executing actions 19 % Processing profile metrics and debug information vtune: Executing actions 19 % Setting data model parameters                    vtune: Executing actions 19 % Resolving module symbols                         vtune: Executing actions 19 % Resolving information for dangling locations     vtune: Executing actions 19 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `ld-2.17.so'           vtune: Executing actions 20 % Resolving information for `libittnotify_collector
vtune: Warning: Cannot locate debugging information for file `/usr/tce/packages/vtune/vtune-2020.0/vtune_profiler_2020.0.0.605129/lib64/runtime/libittnotify_collector.so'.
vtune: Executing actions 20 % Resolving information for `libiomp5.so'          vtune: Executing actions 21 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving information for `libiomp5.so'          vtune: Executing actions 22 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving bottom user stack information          vtune: Executing actions 23 % Resolving thread name information                vtune: Executing actions 24 % Resolving thread name information                vtune: Executing actions 24 % Resolving call target names for dynamic code     vtune: Executing actions 25 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Resolving call target names for dynamic code     vtune: Executing actions 26 % Processing profile metrics and debug information vtune: Executing actions 27 % Processing profile metrics and debug information vtune: Executing actions 28 % Processing profile metrics and debug information vtune: Executing actions 29 % Processing profile metrics and debug information vtune: Executing actions 30 % Processing profile metrics and debug information vtune: Executing actions 30 % Setting data model parameters                    vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 30 % Precomputing frequently used data                vtune: Executing actions 31 % Precomputing frequently used data                vtune: Executing actions 32 % Precomputing frequently used data                vtune: Executing actions 33 % Precomputing frequently used data                vtune: Executing actions 34 % Precomputing frequently used data                vtune: Executing actions 35 % Precomputing frequently used data                vtune: Executing actions 36 % Precomputing frequently used data                vtune: Executing actions 36 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Updating precomputed scalar metrics              vtune: Executing actions 37 % Discarding redundant overtime data               vtune: Executing actions 39 % Discarding redundant overtime data               vtune: Executing actions 39 % Saving the result                                vtune: Executing actions 41 % Saving the result                                vtune: Executing actions 42 % Saving the result                                vtune: Executing actions 49 % Saving the result                                vtune: Executing actions 50 % Saving the result                                vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              Elapsed Time: 0.087s
    SP GFLOPS: 0.000
    DP GFLOPS: 0.000
    x87 GFLOPS: 0.000
    CPI Rate: 0.875
    Average CPU Frequency: 2.444 GHz 
    Total Thread Count: 1
Effective Physical Core Utilization: 0.4% (0.144 out of 36)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 0.4% (0.288 out of 72)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 0.0% of Pipeline Slots
    Cache Bound: 0.0% of Clockticks
    DRAM Bound: 0.0% of Clockticks
    NUMA: % of Remote Accesses: 0.0%
Vectorization: 0.0% of Packed FP Operations
    Instruction Mix
        SP FLOPs: 0.0% of uOps
            Packed: 0.0% from SP FP
                128-bit: 0.0% from SP FP
                256-bit: 0.0% from SP FP
            Scalar: 0.0% from SP FP
        DP FLOPs: 0.0% of uOps
            Packed: 0.0% from DP FP
                128-bit: 0.0% from DP FP
                256-bit: 0.0% from DP FP
            Scalar: 0.0% from DP FP
        x87 FLOPs: 0.0% of uOps
        Non-FP: 100.0% of uOps
    FP Arith/Mem Rd Instr. Ratio: 0.000
    FP Arith/Mem Wr Instr. Ratio: 0.000
Collection and Platform Info
    Application Command Line: srad2 "100" "0.5" "512" "512" "512" "512" "0" "63" "0" "63" "100" "0.5" "4" 
    Operating System: 3.10.0-1160.15.2.1chaos.ch6.x86_64 NAME="Red Hat Enterprise Linux Server" VERSION="7.9 (Maipo)" ID="rhel" ID_LIKE="fedora" VARIANT="Server" VARIANT_ID="server" VERSION_ID="7.9" PRETTY_NAME="Red Hat Enterprise Linux Server 7.9 (Maipo)" ANSI_COLOR="0;31" CPE_NAME="cpe:/o:redhat:enterprise_linux:7.9:GA:server" HOME_URL="https://www.redhat.com/" BUG_REPORT_URL="https://bugzilla.redhat.com/"  REDHAT_BUGZILLA_PRODUCT="Red Hat Enterprise Linux 7" REDHAT_BUGZILLA_PRODUCT_VERSION=7.9 REDHAT_SUPPORT_PRODUCT="Red Hat Enterprise Linux" REDHAT_SUPPORT_PRODUCT_VERSION="7.9"
    Computer Name: quartz1453
    Result Size: 3 MB 
    Collection start time: 21:22:57 22/04/2021 UTC
    Collection stop time: 21:22:57 22/04/2021 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) Processor code named Broadwell
        Frequency: 2.095 GHz 
        Logical CPU Count: 72

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
Vtune command: vtune -report summary -format=csv -report-knob show-issues=false  -r srad2-log/vtune/srad_hpc_4_512_512 > srad2-log/vtune/4_512_512_hpc.log 
vtune: Using result path `/usr/WS1/lin32/project/HPC-FAIR/rodinia_3.1/openmp/srad/srad2-log/vtune/srad_hpc_4_512_512'
vtune: Executing actions  0 %                                                  vtune: Executing actions  0 % Finalizing results                               vtune: Executing actions 50 % Finalizing results                               vtune: Executing actions 50 % Generating a report                              vtune: Executing actions 50 % Setting data model parameters                    vtune: Executing actions 75 % Setting data model parameters                    vtune: Executing actions 75 % Generating a report                              vtune: Executing actions 100 % Generating a report                             vtune: Executing actions 100 % done                                            
